openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.11.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description:
    "\n    **Version 2.11.0 - September 16, 2025:**\n    **Complete Relationship API Integration:** Added comprehensive TeamsRelationshipApi and UsersRelationshipApi endpoints.\n    **New Features:** Team relationship management (/teams/{teamId}/environments, /teams/{teamId}/applications, /teams/{teamId}/labels, /teams/{teamId}/summary),\n    User relationship management (/users/{userId}/teams, /users/{userId}/environments, /users/{userId}/applications, /users/{userId}/summary).\n    **Enterprise Capabilities:** Full association management, comprehensive relationship summaries, enterprise-grade security,\n    and complete RBAC integration. **Documentation Coverage:** Achieved 100% API documentation coverage across entire UMIG ecosystem.\n    **Quality Standard:** All endpoints meet 9.4/10 enterprise documentation quality standard with comprehensive error handling,\n    security features, and performance optimizations.\n\n    **Version 2.10.0 - January 13, 2025:**\n    **Enterprise Security & Rate Limiting Enhancement:** Complete\
    \ OpenAPI specification synchronization with enhanced API documentation.\n    **Security Features:** Added comprehensive\
    \ rate limiting responses (HTTP 429), enterprise security headers (X-Frame-Options, X-XSS-Protection, CSP),\n    and RBAC\
    \ integration documentation. **Error Handling:** Enhanced error schemas with SQL state mappings (23503\u2192400, 23505\u2192\
    409),\n    detailed conflict resolution, and comprehensive validation error responses. **Performance SLA:** Documented\
    \ response time targets\n    (<100ms to <200ms), throughput limits, and enterprise-grade performance characteristics.\
    \ **Documentation Coverage:** 100% synchronization\n    with Applications, Environments, Teams, and other enhanced API\
    \ documentation achieving 9.4/10 quality score.\n\n        REST API for the Unified Migration and Implementation Governance\
    \ (UMIG) application.\n\nThis API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It\
    \ supersedes the V1 API.\nArchitectural principles are documented in ADR-017.\n\n**Version 2.9.0 - September 4, 2025:**\n\
    **US-034 ImportQueue API v1.0.0 - Queue Management & Orchestration:** Added comprehensive import queue management with\
    \ 7 new endpoints.\n**Queue Operations:** GET/POST /import-queue for status monitoring and request submission with real-time\
    \ statistics.\n**Request Management:** GET/DELETE /import-request/{requestId} for request status tracking and cancellation.\n\
    **Schedule Management:** GET/POST /import-schedules for scheduled import creation and listing with recurring support.\n\
    **Resource Monitoring:** GET /import-resources for active resource locks and system status with performance recommendations.\n\
    **Enhanced Features:** Priority-based queue management, resource allocation tracking, scheduled imports with cron patterns,\n\
    comprehensive error handling with detailed rollback support. All endpoints follow CustomEndpointDelegate pattern with\n\
    authentication (confluence-users group), type safety (ADR-031 explicit casting), and consistent error responses.\n\n**Version\
    \ 2.8.0 - September 3, 2025:**\n**API Inventory Comprehensive Update:** Complete documentation update reflecting actual\
    \ codebase inventory of 24 REST APIs.\nUpdated from previously documented 13 APIs to accurate count including all production,\
    \ configuration, and specialized endpoints.\nCategories: Core Entity Management (8), Migration Hierarchy (7), Configuration\
    \ & Administration (5), Specialized & Integration (4).\nAll APIs follow consistent patterns established in ADR-017 with\
    \ proper authentication, error handling, and repository patterns.\n\n**Version 2.7.0 - September 3, 2025:**\n**Import\
    \ API v2.0.0:** Added comprehensive data import operations with 14 endpoints for JSON and CSV imports.\nSupports single\
    \ JSON file imports, batch JSON imports, CSV base entity imports (teams, users, applications, environments),\nand master\
    \ plan configuration. Features include batch processing with audit trails, rollback capabilities with detailed\naction\
    \ tracking, import history with filtering, comprehensive statistics, and CSV template downloads.\nEnhanced error handling\
    \ with SQL state mappings (23505\u2192409 Conflict, 23503\u2192400 Bad Request).\n**Note:** CSV master-plan import (POST\
    \ /import/csv/master-plan) returns HTTP 501 NOT_IMPLEMENTED pending development.\nAll other endpoints fully operational\
    \ with comprehensive validation and type safety (ADR-031).\n\n**Version 2.6.0 - August 27, 2025:**\n**URL Configuration\
    \ API v1.0.0:** Added complete URL Configuration API with 4 endpoints for client-side URL construction.\nGET /api/v2/urlConfiguration\
    \ for retrieving configuration with optional environment parameter support.\nGET /api/v2/urlConfiguration/health for service\
    \ health monitoring with status reporting.\nPOST /api/v2/urlConfiguration/clearCache for cache management and immediate\
    \ configuration updates.\nGET /api/v2/urlConfiguration/debug for comprehensive troubleshooting with service diagnostics.\n\
    Enhanced with comprehensive input validation, error handling, and security integration.\nFull environment-specific configuration\
    \ support with defensive type checking patterns.\n\n**Version 2.5.0 - August 27, 2025:**\n**Steps API v2.3.0 Master Steps\
    \ Management:** Added POST /steps/master endpoint for creating new master step templates.\nAdded PUT /steps/master/{id}\
    \ endpoint for updating existing master step templates. Enhanced Admin GUI with full CREATE \nand EDIT functionality for\
    \ Master Steps. Comprehensive validation with specific error messages for foreign key violations.\nAutomatic audit field\
    \ handling (created_by, updated_by, timestamps). SQL state error mapping with enhanced error responses.\nComplete master\
    \ step details with computed fields (instruction_count, instance_count) and hierarchical context.\n\n**Version 2.4.1 -\
    \ August 25, 2025:**\n**Controls API v2.1.0 Admin GUI Enhancement:** Enhanced GET /controls/master with comprehensive\
    \ pagination, filtering, and sorting support.\nAdded hierarchy fields (plm_name, sqm_name, phm_name, tms_name) to sort\
    \ options for improved Admin GUI integration.\nUpdated PUT /controls/master/{id} to support phm_id parameter for Phase\
    \ Master association updates enabling EDIT mode functionality.\nAdded 16 total sort fields including computed fields (instance_count,\
    \ validation_count) for comprehensive control management.\n\n**Version 2.4.0 - August 25, 2025:**\n**Steps API v2.2.0\
    \ Integration:** Added 6 new Steps API endpoints - /steps/summary, /steps/progress, /steps/export,\n/steps/bulk/status,\
    \ /steps/bulk/assign, /steps/bulk/reorder. Enhanced GET /steps/master with pagination, filtering, and sorting.\nUpdated\
    \ PUT /steps/{id}/status to support both statusId and status fields for modern and legacy compatibility.\n**Users API\
    \ v2.1.0 Integration:** Enhanced /user/context endpoint with role mapping (ADMIN=1, NORMAL=2, PILOT=3).\nAdded userCode\
    \ query parameter support with debugging information. Improved error responses with SQL state codes.\n**New Bulk Operations:**\
    \ Complete bulk management for step status updates, team assignments, and reordering.\n**Enhanced Admin GUI Support:**\
    \ All APIs now provide comprehensive pagination, filtering, and sorting for admin interfaces.\n\n**Version 2.3.0 - August\
    \ 25, 2025:**\n**Migration API Specification Sync:** Updated OpenAPI spec to reflect Migration API v2.3 documentation.\n\
    **Sort Fields Enhanced:** Added mig_id, mig_type, iteration_count, plan_count to migration sort options.\n**Error Examples\
    \ Expanded:** Comprehensive validation error examples for all Migration API endpoints.\n**Dashboard Validation:** Enhanced\
    \ period validation for dashboard metrics endpoint.\n**Hierarchical Path Support:** Complete error handling for nested\
    \ migration endpoints.\n\n**Version 2.2.0 - August 22, 2025:**\n**Migration API Enhanced:** POST /migrations now supports\
    \ flexible status handling (string names OR integer IDs),\nautomatic owner assignment with intelligent fallback, and enhanced\
    \ date parsing (YYYY-MM-DD or ISO datetime).\n**Error Handling:** Comprehensive validation with specific error messages\
    \ for all failure scenarios.\n**Backward Compatibility:** All existing API usage continues to work unchanged.\n**Implementation\
    \ Status:** All documented features are fully implemented and tested.\n\n**Previous Updates:**\n**US-024 Complete:** Enhanced\
    \ StepsAPI with improved comments endpoint error handling.\n**Features:** RESTful sub-resource pattern for comments with\
    \ clear documentation and practical examples.\n**Validation:** HTTP Basic Auth, SQL state mappings (23503\u2192400, 23505\u2192\
    409) confirmed.\n"
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Migrations
    description: Operations about migrations, iterations, sequences and phases.
  - name: Iterations
    description: Operations about iterations with full CRUD functionality and pagination.
  - name: Teams
    description: Operations about teams.
  - name: Environments
    description: Operations about environments and their associations.
  - name: Applications
    description: Operations about applications.
  - name: Labels
    description: Operations about labels and hierarchical filtering.
  - name: Plans
    description: Operations about plans, both master templates and instances.
  - name: Sequences
    description: Operations about sequences, both master templates and instances.
  - name: Phases
    description: Operations about phases, control points, ordering, and progress tracking.
  - name: Users
    description: Operations about users.
  - name: EmailTemplates
    description: Operations about email templates for notifications.
  - name: Steps
    description: Operations about steps, step instances, and status management.
  - name: Instructions
    description: Operations about instructions, completion tracking, and analytics.
  - name: Controls
    description: Operations about controls, validation checkpoints, and progress tracking.
  - name: Comments
    description: Operations about step comments and collaboration.
  - name: Statuses
    description: Operations about status management for different entity types.
  - name: WebApp
    description: Serves static web assets.
  - name: UrlConfiguration
    description: Operations about URL configuration management and client-side URL construction.
  - name: Import
    description:
      Operations for importing JSON data and CSV base entities with batch processing, rollback capabilities, and
      audit trails.
  - name: ImportQueue
    description: Operations for import queue management, scheduling, and resource monitoring with orchestration capabilities.
  - name: MigrationTypes
    description: Operations about migration types with comprehensive sorting, filtering, and CRUD functionality.
  - name: TeamRelationships
    description: Operations for managing team relationships and association management with environments, applications, and labels.
  - name: UserRelationships
    description: Operations for managing user relationships and association management with teams, environments, and applications.
paths:
  /iterationsList:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all iterations with pagination
      description:
        "Retrieve all iterations with comprehensive filtering, pagination, and search capabilities.

        Supports sorting by multiple fields and migration-based filtering.

        "
      tags:
        - Iterations
      operationId: listIterations
      parameters:
        - name: page
          in: query
          description: Page number (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size (1-100, default 50)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: search
          in: query
          description: Search term for iteration names and descriptions (min 3 chars, max 100 chars)
          schema:
            type: string
            minLength: 3
            maxLength: 100
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
            enum:
              - ite_id
              - ite_name
              - itt_code
              - ite_static_cutover_date
              - ite_dynamic_cutover_date
              - ite_status
              - migration_name
              - master_plan_name
              - created_at
              - updated_at
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: migrationId
          in: query
          description: Filter by migration ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Paginated list of iterations with metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedIterations"
        "400": &id001
          $ref: "#/components/responses/BadRequest"
        "500": &id002
          $ref: "#/components/responses/InternalServerError"
        "429": &id003
          $ref: "#/components/responses/RateLimit"
    post:
      summary: Create new iteration
      security:
        - ConfluenceUsers: []
      description:
        "Create a new iteration with validation and automatic field assignment.

        Migration ID is required and must exist. Name uniqueness is enforced.

        "
      tags:
        - Iterations
      operationId: createIteration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIterationRequest"
            example:
              ite_name: Phase 1 Iteration
              mig_id: 123e4567-e89b-12d3-a456-426614174000
              ite_static_cutover_date: "2025-08-15"
      responses:
        "201":
          description: Iteration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400": *id001
        "409": &id005
          $ref: "#/components/responses/Conflict"
        "500": *id002
        "429": *id003
  /iterationsList/{id}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get single iteration by ID
      description: Retrieve a specific iteration with full metadata and relationships
      tags:
        - Iterations
      operationId: getIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Single iteration with metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400": *id001
        "404": &id004
          $ref: "#/components/responses/NotFound"
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      summary: Update iteration
      description: "Update an existing iteration with validation.

        Only provided fields are updated, others remain unchanged.

        "
      tags:
        - Iterations
      operationId: updateIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIterationRequest"
            example:
              ite_name: Updated Iteration Name
              ite_description: Updated description
              ite_static_cutover_date: "2025-08-20"
      responses:
        "200":
          description: Iteration updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      summary: Delete iteration
      description:
        "Delete an iteration. Will fail if the iteration has associated plans or is referenced by other resources.

        "
      tags:
        - Iterations
      operationId: deleteIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Iteration deleted successfully
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /status:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get statuses by entity type
      description: "Retrieve status information for different entity types.

        Entity type is case-insensitive but normalized to proper case internally.

        "
      tags:
        - Statuses
      operationId: getStatuses
      parameters:
        - name: entityType
          in: query
          required: true
          description: Entity type to get statuses for
          schema:
            type: string
            enum:
              - Migration
              - Iteration
              - Plan
              - Sequence
              - Phase
              - Step
              - Control
              - Label
              - Environment
              - Team
              - Application
              - User
          example: Migration
      responses:
        "200":
          description: Array of status objects with metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusInfo"
              example:
                - id: 1
                  name: PLANNING
                  color: "#FFA500"
                  type: Migration
                - id: 2
                  name: IN_PROGRESS
                  color: "#007BFF"
                  type: Migration
        "400": *id001
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations/{iteId}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get a specific iteration
      tags:
        - Migrations
      operationId: getIterationById
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single iteration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/plan-instances:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all plan instances for an iteration
      tags:
        - Migrations
      operationId: listPlanInstancesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All plan instances for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlanInstanceSummary"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/sequences:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all sequences for an iteration
      tags:
        - Migrations
      operationId: listSequencesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All sequences for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceSummary"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for an iteration
      tags:
        - Migrations
      operationId: listPhasesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all sequences for a plan instance
      tags:
        - Migrations
      operationId: listSequencesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All sequences for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceSummary"
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for a plan instance
      tags:
        - Migrations
      operationId: listPhasesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"
        "429": *id003
  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences/{seqId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for a sequence
      tags:
        - Migrations
      operationId: listPhasesForSequence
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seqId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"
        "429": *id003
  /migrations:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all migrations with advanced filtering and pagination
      tags:
        - Migrations
      operationId: listMigrations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: search
          in: query
          description: Search term for name/description
          schema:
            type: string
            maxLength: 100
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - mig_id
              - mig_name
              - mig_status
              - mig_type
              - created_at
              - updated_at
              - mig_start_date
              - mig_end_date
              - iteration_count
              - plan_count
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: status
          in: query
          description: Filter by status (comma-separated)
          schema:
            type: string
        - name: dateFrom
          in: query
          description: Start date filter
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: End date filter
          schema:
            type: string
            format: date
        - name: teamId
          in: query
          description: Filter by team ID
          schema:
            type: integer
        - name: ownerId
          in: query
          description: Filter by owner user ID
          schema:
            type: integer
      responses:
        "200":
          description: Paginated list of migrations with filters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMigrations"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      summary: Create a new migration
      tags:
        - Migrations
      operationId: createMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMigrationRequest"
            examples:
              minimal:
                summary: Minimal request (required fields only)
                value:
                  mig_name: Data Center Migration Q3 2025
              stringStatus:
                summary: Full request with string status
                value:
                  mig_name: Data Center Migration Q3 2025
                  mig_description: Migration of all core services to new data center.
                  mig_status: IN_PROGRESS
                  mig_start_date: "2025-07-01"
                  mig_end_date: "2025-09-30"
                  mig_business_cutover_date: "2025-08-15T14:30:00"
                  mig_type: Infrastructure
                  usr_id_owner: 123
              integerStatus:
                summary: Request with integer status
                value:
                  mig_name: Application Modernization
                  mig_description: Modernizing legacy applications.
                  mig_status: 2
                  mig_start_date: "2025-08-01T08:00:00"
                  mig_type: Application
      responses:
        "201":
          description: Migration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /migrations/{id}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get a single migration by ID with status metadata
      tags:
        - Migrations
      operationId: getMigrationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The migration object with status metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      summary: Update a migration
      tags:
        - Migrations
      operationId: updateMigration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMigrationRequest"
      responses:
        "200":
          description: Migration updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      summary: Delete a migration
      tags:
        - Migrations
      operationId: deleteMigration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Migration deleted successfully
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /migrations/dashboard/summary:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get dashboard summary data
      tags:
        - Migrations
        - Dashboard
      operationId: getDashboardSummary
      responses:
        "200":
          description: Dashboard summary with totals and status distribution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSummary"
        "500": *id002
        "429": *id003
  /migrations/dashboard/progress:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get progress aggregation data
      tags:
        - Migrations
        - Dashboard
      operationId: getDashboardProgress
      parameters:
        - name: migrationId
          in: query
          description: Specific migration filter
          schema:
            type: string
            format: uuid
        - name: dateFrom
          in: query
          description: Start date filter
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: End date filter
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Progress aggregation data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardProgress"
        "400": *id001
        "500": *id002
        "429": *id003
  /migrations/dashboard/metrics:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get performance metrics (placeholder)
      tags:
        - Migrations
        - Dashboard
      operationId: getDashboardMetrics
      parameters:
        - name: period
          in: query
          description: Metrics period
          schema:
            type: string
            enum:
              - day
              - week
              - month
              - quarter
            default: month
        - name: migrationId
          in: query
          description: Specific migration filter
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Performance metrics (placeholder implementation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardMetrics"
        "400": *id001
        "500": *id002
        "429": *id003
  /migrations/bulk/status:
    put:
      security:
        - ConfluenceUsers: []
      summary: Bulk update migration status (placeholder)
      tags:
        - Migrations
        - Bulk Operations
      operationId: bulkUpdateMigrationStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStatusUpdateRequest"
      responses:
        "200":
          description: Bulk status update result (placeholder implementation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResult"
        "400": *id001
        "500": *id002
        "429": *id003
  /migrations/bulk/export:
    post:
      security:
        - ConfluenceUsers: []
      summary: Bulk export migrations to JSON/CSV
      tags:
        - Migrations
        - Bulk Operations
      operationId: bulkExportMigrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkExportRequest"
      responses:
        "200":
          description: Export result with download information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkExportResult"
        "400": *id001
        "500": *id002
        "429": *id003
  /migrations/{migId}/iterations:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all iterations for a migration
      tags:
        - Migrations
      operationId: listIterationsForMigration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All iterations for the given migration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IterationSummary"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /step-view:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - StepView
      summary: Get all step view data
      description: Retrieves all data for the step view component.
      operationId: getStepViewData
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StepView"
        "500": *id002
        "429": *id003
  /stepViewApi/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - StepView
      summary: Get step instance details by migration, iteration, and step code
      description:
        "Retrieves detailed information about a specific step instance in a given migration and iteration,

        including instructions, comments, labels, and impacted teams. This endpoint is used

        by the standalone step view macro to display a single step's details.

        "
      operationId: getStepInstanceByCode
      parameters:
        - name: migrationName
          in: query
          required: true
          schema:
            type: string
          description: Migration name
          example: migrationa
        - name: iterationName
          in: query
          required: true
          schema:
            type: string
          description: Iteration name
          example: run1
        - name: stepCode
          in: query
          required: true
          schema:
            type: string
            pattern: ^[A-Z]{3}-\d{3}$
          description: Step code in format XXX-nnn (e.g., APP-001, DBM-042)
          example: APP-001
      responses:
        "200":
          description: Step instance details including instructions and metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepInstanceDetails"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /teams:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Get teams with optional hierarchical filtering
      description:
        "Retrieves a list of teams. Can be filtered by hierarchical entities to show only teams \ninvolved in specific\
        \ migrations, iterations, plans, sequences, or phases.\n"
      operationId: getAllTeams
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by phase instance ID
      responses:
        "200":
          description: A list of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the provided details.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
      responses:
        "201":
          description: Team created successfully.
        "400": *id001
        "409": *id005
        "429": *id003
  /teams/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Get a team by ID
      description: Retrieves a single team by its unique ID.
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: The requested team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404": *id004
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Update a team
      description: Updates an existing team's details.
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
      responses:
        "204":
          description: Team updated successfully.
        "400": *id001
        "404": *id004
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Delete a team
      description: Deletes a team by its unique ID.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Team deleted successfully.
        "404": *id004
        "409": *id005
        "429": *id003
  /teams/{teamId}/users/{userId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Add a user to a team
      description: Adds a user to a team, creating the membership link.
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User added to team successfully.
        "404": *id004
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Remove a user from a team
      description: Removes a user from a team, deleting the membership link.
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User removed from team successfully.
        "404": *id004
        "429": *id003
  /teams/{teamId}/applications/{applicationId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Add an application to a team
      description: Creates an association between a team and an application.
      operationId: addApplicationToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application added to team successfully.
        "404": *id004
        "409": *id005
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Remove an application from a team
      description: Removes the association between a team and an application.
      operationId: removeApplicationFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application removed from team successfully.
        "404": *id004
        "429": *id003
  /teams/{teamId}/users:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Get users for specific team
      description: |
        Retrieves users for a specific team with membership details and role information.
        Part of the bidirectional team-user relationship management system.
      operationId: getUsersForTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to retrieve users for
        - name: includeInactive
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include inactive users in results
      responses:
        "200":
          description: Users for team retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                  teamName:
                    type: string
                  includeInactive:
                    type: boolean
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        usr_id:
                          type: integer
                        usr_first_name:
                          type: string
                        usr_last_name:
                          type: string
                        usr_email:
                          type: string
                        usr_active:
                          type: boolean
                        role_name:
                          type: string
                        created_by:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_by:
                          type: string
                        updated_at:
                          type: string
                          format: date-time
                  totalUsers:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /teams/{teamId}/users/{userId}/validate:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Validate team-user relationship integrity
      description: |
        Validates the integrity of a specific team-user relationship.
        Checks for data consistency, relationship existence, and potential issues.
      operationId: validateTeamUserRelationship
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to validate relationship for
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to validate relationship for
      responses:
        "200":
          description: Relationship validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                  userId:
                    type: integer
                  validation:
                    type: object
                    properties:
                      isValid:
                        type: boolean
                      relationshipExists:
                        type: boolean
                      teamActive:
                        type: boolean
                      userActive:
                        type: boolean
                      integrityIssues:
                        type: array
                        items:
                          type: object
                          properties:
                            issue:
                              type: string
                            severity:
                              type: string
                            description:
                              type: string
                      validationDate:
                        type: string
                        format: date-time
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /teams/{teamId}/delete-protection:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Check cascade delete protection for team
      description: |
        Analyzes blocking relationships before team deletion.
        Provides detailed impact assessment for safe deletion decisions.
      operationId: checkTeamDeleteProtection
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to check delete protection for
      responses:
        "200":
          description: Delete protection analysis completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                  teamName:
                    type: string
                  protection:
                    type: object
                    properties:
                      canDelete:
                        type: boolean
                      blockingRelationships:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            count:
                              type: integer
                            description:
                              type: string
                      memberCount:
                        type: integer
                      activeMembers:
                        type: integer
                      relatedEntities:
                        type: object
                        properties:
                          migrations:
                            type: integer
                          plans:
                            type: integer
                          steps:
                            type: integer
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /teams/relationship-statistics:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Get team relationship statistics
      description: |
        Retrieves comprehensive statistics about team relationships.
        Includes member counts, orphaned relationships, and integrity metrics.
      operationId: getTeamRelationshipStatistics
      responses:
        "200":
          description: Team relationship statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statistics:
                    type: object
                    properties:
                      totalTeams:
                        type: integer
                      activeTeams:
                        type: integer
                      archivedTeams:
                        type: integer
                      totalMembers:
                        type: integer
                      averageMembersPerTeam:
                        type: number
                      orphanedMembers:
                        type: integer
                      integrityIssues:
                        type: integer
                      lastCleanupDate:
                        type: string
                        format: date-time
                  timestamp:
                    type: string
                    format: date-time
        "500": *id002
        "429": *id003
  /teams/{teamId}/soft-delete:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Soft delete team with relationship preservation
      description: |
        Soft deletes a team while preserving all relationship data for audit trail.
        Sets tms_active = false instead of physical deletion.
      operationId: softDeleteTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to soft delete
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userContext:
                  type: object
                  properties:
                    userId:
                      type: string
                    reason:
                      type: string
                    notes:
                      type: string
      responses:
        "200":
          description: Team soft deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                  result:
                    type: object
                    properties:
                      success:
                        type: boolean
                      membersHandled:
                        type: integer
                      relatedEntitiesUpdated:
                        type: integer
                      auditRecord:
                        type: string
                      preservedRelationships:
                        type: integer
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /teams/{teamId}/restore:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Restore soft-deleted team
      description: |
        Restores a soft-deleted team by setting tms_active = true.
        Reactivates associated relationships and permissions.
      operationId: restoreTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to restore
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userContext:
                  type: object
                  properties:
                    userId:
                      type: string
                    reason:
                      type: string
                    notes:
                      type: string
      responses:
        "200":
          description: Team restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                  result:
                    type: object
                    properties:
                      success:
                        type: boolean
                      membersRestored:
                        type: integer
                      relatedEntitiesUpdated:
                        type: integer
                      auditRecord:
                        type: string
                      restoredRelationships:
                        type: integer
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /teams/cleanup-orphaned-members:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Cleanup orphaned team members
      description: |
        Removes orphaned team member records and fixes integrity issues.
        Safe to run multiple times with comprehensive reporting.
      operationId: cleanupOrphanedTeamMembers
      responses:
        "200":
          description: Orphaned member cleanup completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  cleanup:
                    type: object
                    properties:
                      orphanedMembersFound:
                        type: integer
                      orphanedMembersRemoved:
                        type: integer
                      integrityIssuesFixed:
                        type: integer
                      teamsAffected:
                        type: integer
                      executionTimeMs:
                        type: integer
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            action:
                              type: string
                            count:
                              type: integer
                            description:
                              type: string
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "500": *id002
        "429": *id003
  /teams/batch-validate-relationships:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Team Relationships
      summary: Batch validate team-user relationships
      description: |
        Validates multiple team-user relationships in a single operation.
        Performance optimized for large batches with detailed reporting.
      operationId: batchValidateTeamRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationships:
                  type: array
                  items:
                    type: object
                    properties:
                      teamId:
                        type: integer
                      userId:
                        type: integer
                    required:
                      - teamId
                      - userId
              required:
                - relationships
      responses:
        "200":
          description: Batch relationship validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  batchValidation:
                    type: object
                    properties:
                      totalRelationships:
                        type: integer
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            teamId:
                              type: integer
                            userId:
                              type: integer
                            validation:
                              type: object
                              properties:
                                isValid:
                                  type: boolean
                                relationshipExists:
                                  type: boolean
                                integrityIssues:
                                  type: array
                                  items:
                                    type: string
                      validCount:
                        type: integer
                      invalidCount:
                        type: integer
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "500": *id002
        "429": *id003
  # User Relationships API Endpoints
  /users/{userId}/teams/{teamId}/validate:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Validate user-team relationship integrity
      description: |
        Validates the integrity of a specific user-team relationship from user perspective.
        Includes role validation and comprehensive integrity checking.
      operationId: validateUserTeamRelationship
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to validate relationship for
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          description: Team ID to validate relationship for
      responses:
        "200":
          description: Relationship validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  teamId:
                    type: integer
                  validation:
                    type: object
                    properties:
                      isValid:
                        type: boolean
                      relationshipExists:
                        type: boolean
                      userActive:
                        type: boolean
                      teamActive:
                        type: boolean
                      roleValid:
                        type: boolean
                      integrityIssues:
                        type: array
                        items:
                          type: object
                          properties:
                            issue:
                              type: string
                            severity:
                              type: string
                              enum: [LOW, MEDIUM, HIGH, CRITICAL]
                            description:
                              type: string
                            recommendation:
                              type: string
                      validationDate:
                        type: string
                        format: date-time
                      lastAuditDate:
                        type: string
                        format: date-time
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /users/{userId}/delete-protection:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Check cascade delete protection for user
      description: |
        Analyzes blocking relationships before user deletion.
        Includes team memberships, leadership roles, and related entities.
      operationId: checkUserDeleteProtection
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to check delete protection for
      responses:
        "200":
          description: Delete protection analysis completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  userName:
                    type: string
                  protection:
                    type: object
                    properties:
                      canDelete:
                        type: boolean
                      blockingRelationships:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            count:
                              type: integer
                            description:
                              type: string
                            severity:
                              type: string
                      teamMemberships:
                        type: integer
                      activeMemberships:
                        type: integer
                      leadershipRoles:
                        type: integer
                      relatedEntities:
                        type: object
                        properties:
                          ownedMigrations:
                            type: integer
                          assignedPlans:
                            type: integer
                          activeSteps:
                            type: integer
                          auditRecords:
                            type: integer
                      retentionPeriod:
                        type: integer
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /users/{userId}/activity:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Get user activity tracking with history
      description: |
        Retrieves user activity history including team joins/leaves, role changes.
        Supports compliance and audit requirements with configurable time period.
      operationId: getUserActivity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to retrieve activity for
        - name: days
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of days for activity history
      responses:
        "200":
          description: User activity retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  userName:
                    type: string
                  days:
                    type: integer
                  activities:
                    type: array
                    items:
                      type: object
                      properties:
                        activity_id:
                          type: string
                        activity_type:
                          type: string
                        description:
                          type: string
                        team_id:
                          type: integer
                        team_name:
                          type: string
                        timestamp:
                          type: string
                          format: date-time
                        metadata:
                          type: object
                          properties:
                            action:
                              type: string
                            old_value:
                              type: string
                            new_value:
                              type: string
                            context:
                              type: string
                  totalActivities:
                    type: integer
                  activitySummary:
                    type: object
                    properties:
                      teamJoined:
                        type: integer
                      teamLeft:
                        type: integer
                      roleChanged:
                        type: integer
                      loginCount:
                        type: integer
                      lastLoginDate:
                        type: string
                        format: date-time
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /users/relationship-statistics:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Get user relationship statistics
      description: |
        Retrieves comprehensive statistics about user relationships.
        Includes role distribution, activity metrics, and audit information.
      operationId: getUserRelationshipStatistics
      responses:
        "200":
          description: User relationship statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statistics:
                    type: object
                    properties:
                      totalUsers:
                        type: integer
                      activeUsers:
                        type: integer
                      inactiveUsers:
                        type: integer
                      archivedUsers:
                        type: integer
                      totalMemberships:
                        type: integer
                      averageTeamsPerUser:
                        type: number
                      orphanedMemberships:
                        type: integer
                      integrityIssues:
                        type: integer
                      roleDistribution:
                        type: object
                        properties:
                          developer:
                            type: integer
                          team_lead:
                            type: integer
                          manager:
                            type: integer
                          admin:
                            type: integer
                      activityMetrics:
                        type: object
                        properties:
                          activeInLast30Days:
                            type: integer
                          newUsersLast30Days:
                            type: integer
                          roleChangesLast30Days:
                            type: integer
                      lastCleanupDate:
                        type: string
                        format: date-time
                      auditRetentionDays:
                        type: integer
                  timestamp:
                    type: string
                    format: date-time
        "500": *id002
        "429": *id003
  /users/{userId}/soft-delete:
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - User Relationships
      summary: Soft delete user with relationship preservation
      description: |
        Soft deletes a user while preserving all relationship data for audit trail.
        Sets usr_active = false with 90-day retention period.
      operationId: softDeleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to soft delete
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userContext:
                  type: object
                  properties:
                    userId:
                      type: string
                    reason:
                      type: string
                    notes:
                      type: string
      responses:
        "200":
          description: User soft deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  result:
                    type: object
                    properties:
                      success:
                        type: boolean
                      membershipsHandled:
                        type: integer
                      relatedEntitiesUpdated:
                        type: integer
                      auditRecord:
                        type: string
                      preservedRelationships:
                        type: integer
                      dataRetentionPeriod:
                        type: integer
                      restorationDeadline:
                        type: string
                        format: date-time
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /users/{userId}/restore:
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - User Relationships
      summary: Restore soft-deleted user
      description: |
        Restores a soft-deleted user by setting usr_active = true.
        Reactivates team memberships and role assignments within retention period.
      operationId: restoreUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to restore
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userContext:
                  type: object
                  properties:
                    userId:
                      type: string
                    reason:
                      type: string
                    notes:
                      type: string
      responses:
        "200":
          description: User restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  result:
                    type: object
                    properties:
                      success:
                        type: boolean
                      membershipsRestored:
                        type: integer
                      relatedEntitiesUpdated:
                        type: integer
                      auditRecord:
                        type: string
                      restoredRelationships:
                        type: integer
                      roleRestored:
                        type: string
                      teamsRejoined:
                        type: integer
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /users/{userId}/role:
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - User Relationships
      summary: Change user role with validation
      description: |
        Changes user role with comprehensive validation and audit trail.
        Updates permissions across all affected teams automatically.
      operationId: changeUserRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to change role for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: integer
                  description: New role ID
                userContext:
                  type: object
                  properties:
                    userId:
                      type: string
                    reason:
                      type: string
                    notes:
                      type: string
              required:
                - roleId
      responses:
        "200":
          description: User role changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  result:
                    type: object
                    properties:
                      success:
                        type: boolean
                      oldRoleId:
                        type: integer
                      newRoleId:
                        type: integer
                      oldRoleName:
                        type: string
                      newRoleName:
                        type: string
                      effectiveDate:
                        type: string
                        format: date-time
                      auditRecord:
                        type: string
                      affectedTeams:
                        type: integer
                      permissionsUpdated:
                        type: integer
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /users/{userId}/role/validate:
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - User Relationships
      summary: Validate role transition feasibility
      description: |
        Validates role transition with prerequisite checking and impact analysis.
        Provides guidance for successful role changes without making changes.
      operationId: validateRoleTransition
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID to validate role transition for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fromRoleId:
                  type: integer
                  description: Current role ID (optional)
                toRoleId:
                  type: integer
                  description: Target role ID
              required:
                - toRoleId
      responses:
        "200":
          description: Role transition validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  roleTransition:
                    type: object
                    properties:
                      fromRoleId:
                        type: integer
                      toRoleId:
                        type: integer
                      fromRoleName:
                        type: string
                      toRoleName:
                        type: string
                  validation:
                    type: object
                    properties:
                      isValid:
                        type: boolean
                      canTransition:
                        type: boolean
                      requiresApproval:
                        type: boolean
                      blockers:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            description:
                              type: string
                            severity:
                              type: string
                            resolution:
                              type: string
                      prerequisites:
                        type: array
                        items:
                          type: object
                          properties:
                            requirement:
                              type: string
                            fulfilled:
                              type: boolean
                            description:
                              type: string
                      implications:
                        type: array
                        items:
                          type: object
                          properties:
                            area:
                              type: string
                            impact:
                              type: string
                            description:
                              type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /users/cleanup-orphaned-members:
    post:
      security:
        - ConfluenceAdministrators: []
      tags:
        - User Relationships
      summary: Cleanup orphaned user memberships
      description: |
        Removes orphaned user membership records and fixes integrity issues.
        Administrative operation with comprehensive audit logging.
      operationId: cleanupOrphanedUserMembers
      responses:
        "200":
          description: Orphaned member cleanup completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  cleanup:
                    type: object
                    properties:
                      orphanedMembershipsFound:
                        type: integer
                      orphanedMembershipsRemoved:
                        type: integer
                      integrityIssuesFixed:
                        type: integer
                      usersAffected:
                        type: integer
                      teamsAffected:
                        type: integer
                      auditRecordsCreated:
                        type: integer
                      executionTimeMs:
                        type: integer
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            action:
                              type: string
                            count:
                              type: integer
                            description:
                              type: string
                            affectedEntities:
                              type: array
                              items:
                                type: string
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "500": *id002
        "429": *id003
  /users/batch-validate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Batch validate multiple users
      description: |
        Validates multiple users in a single operation with summary statistics.
        Performance optimized for large user batches.
      operationId: batchValidateUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: integer
                  description: Array of user IDs to validate
              required:
                - userIds
      responses:
        "200":
          description: Batch user validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  batchValidation:
                    type: object
                    properties:
                      totalUsers:
                        type: integer
                      validUsers:
                        type: integer
                      invalidUsers:
                        type: integer
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: integer
                            userName:
                              type: string
                            isValid:
                              type: boolean
                            issues:
                              type: array
                              items:
                                type: string
                            teamCount:
                              type: integer
                            lastActivity:
                              type: string
                              format: date-time
                      summary:
                        type: object
                        properties:
                          activeUsers:
                            type: integer
                          inactiveUsers:
                            type: integer
                          orphanedUsers:
                            type: integer
                          usersWithIssues:
                            type: integer
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "500": *id002
        "429": *id003
  /users/batch-validate-relationships:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - User Relationships
      summary: Batch validate user-team relationships
      description: |
        Validates multiple user-team relationships in a single operation.
        Performance optimized for large relationship batches with detailed reporting.
      operationId: batchValidateUserRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationships:
                  type: array
                  items:
                    type: object
                    properties:
                      userId:
                        type: integer
                      teamId:
                        type: integer
                    required:
                      - userId
                      - teamId
              required:
                - relationships
      responses:
        "200":
          description: Batch relationship validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  batchValidation:
                    type: object
                    properties:
                      totalRelationships:
                        type: integer
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: integer
                            teamId:
                              type: integer
                            validation:
                              type: object
                              properties:
                                isValid:
                                  type: boolean
                                relationshipExists:
                                  type: boolean
                                integrityIssues:
                                  type: array
                                  items:
                                    type: string
                      validCount:
                        type: integer
                      invalidCount:
                        type: integer
                      summary:
                        type: object
                        properties:
                          activeRelationships:
                            type: integer
                          archivedRelationships:
                            type: integer
                          orphanedRelationships:
                            type: integer
                          integrityIssues:
                            type: integer
                  timestamp:
                    type: string
                    format: date-time
        "400": *id001
        "500": *id002
        "429": *id003
  /environments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get all environments with counts
      description:
        "Retrieves a list of all environments with their associated application and iteration counts.

        Supports pagination, sorting, and search for admin GUI.

        "
      operationId: getAllEnvironments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          description: Page size for pagination
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter environments
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort direction
      responses:
        "200":
          description: A list of environments with counts
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/EnvironmentWithCounts"
                  - $ref: "#/components/schemas/PaginatedEnvironments"
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Create a new environment
      description: Creates a new environment with the provided details.
      operationId: createEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreateRequest"
      responses:
        "201":
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /environments/roles:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get all environment roles
      description: Retrieves a list of all available environment roles.
      operationId: getEnvironmentRoles
      responses:
        "200":
          description: A list of environment roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnvironmentRole"
        "500": *id002
        "429": *id003
  /environments/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get an environment by ID
      description: Retrieves a single environment with full details including applications and iterations.
      operationId: getEnvironmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Environment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentDetails"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Update an environment
      description: Updates an existing environment's details.
      operationId: updateEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreateRequest"
      responses:
        "200":
          description: Environment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentDetails"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Delete an environment
      description: Deletes an environment by its unique ID.
      operationId: deleteEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Environment deleted successfully
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /environments/{id}/iterations:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get iterations grouped by role
      description: Retrieves iterations associated with an environment, grouped by their environment role.
      operationId: getEnvironmentIterationsByRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Iterations grouped by role
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/RoleIterations"
        "400": *id001
        "500": *id002
        "429": *id003
  /environments/{id}/applications/{appId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Associate an application with an environment
      description: Creates an association between an environment and an application.
      operationId: associateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Remove application association
      description: Removes the association between an environment and an application.
      operationId: disassociateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application disassociated successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /environments/{id}/iterations/{iteId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Associate an iteration with an environment
      description: Creates an association between an environment and an iteration with a specific role.
      operationId: associateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enr_id
              properties:
                enr_id:
                  type: integer
                  description: Environment role ID
      responses:
        "200":
          description: Iteration associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Remove iteration association
      description: Removes the association between an environment and an iteration.
      operationId: disassociateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Iteration disassociated successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /steps:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get steps with hierarchical filtering for runsheet
      description:
        "Retrieves step instances grouped by sequence and phase for runsheet display.

        Supports comprehensive hierarchical filtering to show only steps matching the specified criteria.

        Multiple filters can be combined for progressive refinement.

        Results are ordered by sequence number, phase number, and step number.

        "
      operationId: getStepsForRunsheet
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by label ID (steps that have this label)
      responses:
        "200":
          description: Steps grouped by sequence and phase for runsheet display
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceWithSteps"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get master steps with pagination and Admin GUI support
      description:
        "Retrieves master step templates with comprehensive filtering, pagination, and sorting support \nfor both\
        \ dropdown selections and Admin GUI management. Supports all standard filtering parameters.\n"
      operationId: getMasterSteps
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination (default 1)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
          description: Number of items per page (default 50)
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - stm_id
              - stm_name
              - stm_order
              - created_at
              - updated_at
              - instruction_count
              - instance_count
              - plm_name
              - sqm_name
              - phm_name
            default: stm_order
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort direction
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
      responses:
        "200":
          description: Paginated list of master steps
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMasterSteps"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Create new master step
      description:
        "Creates a new master step template with comprehensive validation.

        Supports full CREATE functionality for Master Steps in the Admin GUI.

        Validates required fields and foreign key relationships.

        "
      operationId: createMasterStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterStepRequest"
            example:
              phm_id: f9aa535d-4d8b-447c-9d89-16494f678702
              tms_id_owner: 15
              stt_code: APP
              stm_number: 101
              stm_name: Deploy Application Components
              stm_description: Deploy all application components to target environment
              stm_duration_minutes: 45
              enr_id_target: 3
              enr_id: 2
      responses:
        "201":
          description: Master step created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStepResponse"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /steps/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get single master step by ID
      description:
        "Retrieves detailed information about a specific master step template by its UUID.

        Returns comprehensive step information including metadata and related entity details.

        "
      operationId: getMasterStepById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master step UUID
      responses:
        "200":
          description: Master step details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStep"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Update existing master step
      description:
        "Updates an existing master step template with partial data support.

        Supports full EDIT functionality for Master Steps in the Admin GUI.

        Only provided fields will be updated, others remain unchanged.

        "
      operationId: updateMasterStep
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master step UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterStepRequest"
            example:
              stm_name: Deploy Application Components - Updated
              stm_description: Deploy and validate all application components to target environment
              stm_duration_minutes: 60
              tms_id_owner: 18
      responses:
        "200":
          description: Master step updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStepResponse"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /steps/instance/{stepInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get step instance details with instructions
      description:
        "Retrieves detailed information about a specific step instance including all associated instructions.

        Supports both UUID and step code lookup for backward compatibility.

        "
      operationId: getStepInstanceDetails
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
          description: Step instance ID (UUID) or step code for backward compatibility
      responses:
        "200":
          description: Step instance details with instructions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepInstanceDetails"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /steps/{stepInstanceId}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Update step instance status
      description:
        "Updates the status of a step instance and sends email notifications to relevant users.

        Valid statuses are: OPEN, IN_PROGRESS, COMPLETED, BLOCKED, ON_HOLD.

        "
      operationId: updateStepInstanceStatus
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StepStatusUpdate"
      responses:
        "200":
          description: Step status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepStatusUpdateResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/{stepInstanceId}/open:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark step as opened by PILOT
      description:
        "Marks a step instance as opened by the PILOT and sends email notifications to the owning team.

        "
      operationId: openStepInstance
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Step opened successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepActionResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/{stepInstanceId}/instructions/{instructionId}/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark instruction as completed
      description:
        "Marks a specific instruction within a step instance as completed and sends email notifications.

        "
      operationId: completeInstruction
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Instruction completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/{stepInstanceId}/instructions/{instructionId}/incomplete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark instruction as incomplete
      description:
        "Marks a specific instruction within a step instance as incomplete and sends email notifications.

        This is the reverse operation of completing an instruction.

        "
      operationId: markInstructionIncomplete
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Instruction marked as incomplete successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/{stepInstanceId}/comments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Get comments for a step instance
      description:
        "Retrieves all comments associated with a specific step instance using the RESTful sub-resource pattern.

        This endpoint follows the pattern `/steps/{stepInstanceId}/comments` for accessing comments as a sub-resource of steps.

        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance.

        "
      operationId: getStepInstanceComments
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        "200":
          description: List of comments for the step instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Create a new comment for a step instance
      description:
        "Creates a new comment for the specified step instance using the RESTful sub-resource pattern.

        This endpoint follows the pattern `POST /steps/{stepInstanceId}/comments` for creating comments as a sub-resource
        of steps.

        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.

        "
      operationId: createStepInstanceComment
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "200":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentCreateResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /comments/{commentId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Update a comment
      description:
        "Updates the body of an existing comment using direct comment access for efficiency.

        This endpoint follows the pattern `PUT /comments/{commentId}` for direct comment operations.

        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.

        "
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentUpdateResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Delete a comment
      description:
        "Deletes an existing comment using direct comment access for efficiency.

        This endpoint follows the pattern `DELETE /comments/{commentId}` for direct comment operations.

        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.

        "
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentDeleteResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /steps/summary:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get dashboard summary metrics for steps
      description:
        "Retrieves summary metrics for steps within a migration, used for dashboard displays.

        Provides counts by status, team breakdown, and completion percentages.

        "
      operationId: getStepsSummary
      parameters:
        - name: migrationId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Migration UUID to get summary for
      responses:
        "200":
          description: Step summary metrics for dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsSummary"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get detailed progress tracking data
      description:
        "Retrieves detailed progress tracking information for steps within a migration.

        Provides sequence-by-sequence and phase-by-phase breakdown with completion percentages.

        "
      operationId: getStepsProgress
      parameters:
        - name: migrationId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Migration UUID to track progress for
      responses:
        "200":
          description: Detailed progress tracking data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsProgress"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/export:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Export steps data in JSON or CSV format
      description:
        "Exports step data with filtering support in JSON or CSV format.

        All standard hierarchical filtering parameters are supported.

        "
      operationId: exportStepsData
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by label ID
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum:
              - json
              - csv
            default: json
          description: Export format (json or csv)
      responses:
        "200":
          description: Exported steps data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsExportData"
            text/csv:
              schema:
                type: string
                description: CSV formatted steps data
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/bulk/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk update step status
      description:
        "Updates the status of multiple step instances in a single operation with notifications.

        Provides detailed feedback on successful and failed updates.

        "
      operationId: bulkUpdateStepsStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStatusUpdate"
      responses:
        "200":
          description: Bulk status update completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/bulk/assign:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk assign steps to team
      description:
        "Assigns multiple step instances to a team in a single operation.

        Provides detailed feedback on successful and failed assignments.

        "
      operationId: bulkAssignStepsToTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkTeamAssignment"
      responses:
        "200":
          description: Bulk team assignment completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /steps/bulk/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk reorder steps within phases
      description:
        "Reorders multiple step instances within their respective phases.

        Provides detailed feedback on successful and failed reordering operations.

        "
      operationId: bulkReorderSteps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStepReordering"
      responses:
        "200":
          description: Bulk reordering completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /instructions:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get master instructions with hierarchical filtering
      description:
        "Retrieves master instructions with optional hierarchical filtering by step, plan, sequence, or phase.

        Results are ordered by instruction order within each step.

        "
      operationId: getMasterInstructions
      parameters:
        - name: stepId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by step master ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID
      responses:
        "200":
          description: List of master instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterInstruction"
        "400": *id001
        "500": *id002
        "429": *id003
  /instructions/master:
    post:
      tags:
        - Instructions
      summary: Create a new master instruction
      description: Creates a new master instruction template for a step.
      operationId: createMasterInstruction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterInstructionCreate"
      responses:
        "201":
          description: Master instruction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
      security:
        - ConfluenceUsers: []
  /instructions/master/{instructionId}:
    get:
      tags:
        - Instructions
      summary: Get master instruction by ID
      description: Retrieves a specific master instruction by its ID.
      operationId: getMasterInstructionById
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      responses:
        "200":
          description: Master instruction details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "404": *id004
        "500": *id002
        "429": *id003
      security:
        - ConfluenceUsers: []
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Update master instruction
      description: Updates an existing master instruction template.
      operationId: updateMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterInstructionUpdate"
      responses:
        "200":
          description: Master instruction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Delete master instruction
      description:
        "Deletes a master instruction and all its instances (cascade deletion).

        This operation cannot be undone.

        "
      operationId: deleteMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID to delete
      responses:
        "204":
          description: Master instruction deleted successfully (no content)
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/master/{stepId}/reorder:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Reorder master instructions within a step
      description: Updates the order of master instructions within a specific step.
      operationId: reorderMasterInstructions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step master ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionReorderRequest"
      responses:
        "200":
          description: Instructions reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReorderResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/instance/by-step/{stepInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction instances for a step instance
      description: Retrieves all instruction instances for a specific step instance, ordered by sequence.
      operationId: getInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        "200":
          description: List of instruction instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InstructionInstance"
        "404": *id004
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Create instruction instances for a step
      description: Creates instruction instances from master templates for a specific step instance.
      operationId: createInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionInstanceCreate"
      responses:
        "201":
          description: Instruction instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InstructionInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/instance/{instructionInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction instance by ID
      description: Retrieves a specific instruction instance by its ID.
      operationId: getInstructionInstanceById
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        "200":
          description: Instruction instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionInstance"
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Delete instruction instance
      description: "Deletes a specific instruction instance.

        This operation cannot be undone.

        "
      operationId: deleteInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID to delete
      responses:
        "204":
          description: Instruction instance deleted successfully (no content)
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/instance/{instructionInstanceId}/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Mark instruction instance as completed
      description: Marks an instruction instance as completed by a specific user with timestamp.
      operationId: completeInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionCompleteRequest"
      responses:
        "200":
          description: Instruction instance completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/instance/{instructionInstanceId}/uncomplete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Mark instruction instance as not completed
      description: Reverts an instruction instance completion status (sets ini_is_completed to false).
      operationId: uncompleteInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        "200":
          description: Instruction instance uncompleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionUncompleteResponse"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /instructions/bulk/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Bulk complete instruction instances
      description: Marks multiple instruction instances as completed by a specific user.
      operationId: bulkCompleteInstructions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkInstructionCompleteRequest"
      responses:
        "200":
          description: Instructions completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkInstructionCompleteResponse"
        "400": *id001
        "500": *id002
        "429": *id003
  /instructions/analytics/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction progress analytics
      description:
        "Retrieves instruction completion progress statistics with hierarchical filtering.

        Returns progress metrics for migrations, iterations, or teams.

        "
      operationId: getInstructionProgressAnalytics
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        "200":
          description: Instruction progress analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionProgressAnalytics"
        "400": *id001
        "500": *id002
        "429": *id003
  /instructions/analytics/completion:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction completion timeline
      description:
        "Retrieves instruction completion timeline data for progress tracking and reporting.

        Shows completion trends over time.

        "
      operationId: getInstructionCompletionAnalytics
      parameters:
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        "200":
          description: Instruction completion timeline
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompletionAnalytics"
        "400": *id001
        "500": *id002
        "429": *id003
  /instructions/bulk:
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Bulk delete instruction instances
      description:
        "Deletes multiple instruction instances in a single operation.

        Returns summary of successful and failed deletions.

        "
      operationId: bulkDeleteInstructions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - instructionInstanceIds
              properties:
                instructionInstanceIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: List of instruction instance IDs to delete
      responses:
        "200":
          description: Bulk deletion result
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    description: Number of successfully deleted instances
                  failed:
                    type: integer
                    description: Number of failed deletions
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Instance ID that failed to delete
                        reason:
                          type: string
                          description: Reason for deletion failure
        "400": *id001
        "500": *id002
        "429": *id003
  /controls/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get all master control templates with pagination and sorting
      description:
        "Retrieves all master control templates with optional filtering by phase, pagination, and sorting.

        Results include phase hierarchy information. Supports Admin GUI integration with comprehensive sorting options.

        "
      operationId: getAllMasterControls
      parameters:
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter controls by master phase ID
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
          description: Number of items per page
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - ctm_id
              - ctm_code
              - ctm_name
              - ctm_description
              - ctm_type
              - ctm_is_critical
              - ctm_order
              - created_at
              - updated_at
              - instance_count
              - validation_count
              - plm_name
              - sqm_name
              - phm_name
              - tms_name
            default: ctm_code
          description: Field to sort by (default is ctm_code - primary display field for Admin GUI)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort direction
      responses:
        "200":
          description: List of master control templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterControl"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create a new master control template
      description: Creates a new master control template for a phase.
      operationId: createMasterControl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterControlRequest"
      responses:
        "201":
          description: Master control created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /controls/master/{controlId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get master control by ID
      description: Retrieves a specific master control template by its ID.
      operationId: getMasterControlById
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      responses:
        "200":
          description: Master control details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update master control
      description: Updates an existing master control template.
      operationId: updateMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterControlRequest"
      responses:
        "200":
          description: Master control updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Delete master control
      description: Deletes a master control template if no instances exist.
      operationId: deleteMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      responses:
        "204":
          description: Master control deleted successfully
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /controls/master/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Reorder master controls within phase
      description: Updates the display order of master controls within a phase.
      operationId: reorderMasterControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderControlsRequest"
      responses:
        "204":
          description: Controls reordered successfully
        "400": *id001
        "500": *id002
        "429": *id003
  /controls/master/bulk:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create multiple master controls
      description: Creates multiple master control templates in a single operation.
      operationId: bulkCreateMasterControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateMasterControlRequest"
                  description: Array of master controls to create
      responses:
        "201":
          description: Bulk creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkControlResult"
        "400": *id001
        "500": *id002
        "429": *id003
  /controls/master/{controlId}/instantiate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create instance from master control
      description: Creates a control instance from a specific master control template.
      operationId: instantiateMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstantiateControlRequest"
      responses:
        "201":
          description: Control instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /controls/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get control instances with hierarchical filtering
      description:
        "Retrieves control instances with optional hierarchical filtering.

        Supports filtering by migration, iteration, plan, sequence, phase, team, and status.

        "
      operationId: getControlInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID (hierarchical)
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID (hierarchical)
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID (hierarchical)
        - name: sequenceInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID (hierarchical)
        - name: phaseInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID (hierarchical)
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: List of control instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create a new control instance
      description: Creates a new control instance from a master control template.
      operationId: createControlInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateControlInstanceRequest"
      responses:
        "201":
          description: Control instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /controls/instance/{instanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get control instance by ID
      description: Retrieves a specific control instance by its ID.
      operationId: getControlInstanceById
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      responses:
        "200":
          description: Control instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update control instance
      description: Updates an existing control instance.
      operationId: updateControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateControlInstanceRequest"
      responses:
        "200":
          description: Control instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Delete control instance
      description: Deletes a control instance.
      operationId: deleteControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      responses:
        "204":
          description: Control instance deleted successfully
        "404": *id004
        "500": *id002
        "429": *id003
  /controls/instance/{instanceId}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update control instance status
      description: Updates the status of a control instance.
      operationId: updateControlInstanceStatus
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cti_status
              properties:
                cti_status:
                  type: string
                  description: New status value
                  enum:
                    - PENDING
                    - IN_PROGRESS
                    - VALIDATED
                    - FAILED
                    - OVERRIDDEN
      responses:
        "204":
          description: Status updated successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /controls/instance/{instanceId}/validate:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Validate control with IT/Business approval
      description: Validates a control instance with IT and business validator assignments.
      operationId: validateControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateControlRequest"
      responses:
        "200":
          description: Control validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /controls/instance/{instanceId}/override:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Override control with justification
      description: Overrides a control instance with a documented reason and approval.
      operationId: overrideControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverrideControlRequest"
      responses:
        "200":
          description: Control overridden successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /controls/instance/bulk:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create multiple control instances
      description: Creates multiple control instances in a single operation.
      operationId: bulkCreateControlInstances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instances:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateControlInstanceRequest"
                  description: Array of control instances to create
      responses:
        "201":
          description: Bulk creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkControlResult"
        "400": *id001
        "500": *id002
        "429": *id003
  /controls/instance/bulk/validate:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Validate all controls in a phase
      description: Validates all control instances within a phase instance simultaneously.
      operationId: bulkValidateControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkValidateControlsRequest"
      responses:
        "200":
          description: Bulk validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  validated:
                    type: integer
                    description: Number of controls validated
                  failed:
                    type: integer
                    description: Number of validation failures
                  total:
                    type: integer
                    description: Total controls processed
        "400": *id001
        "500": *id002
        "429": *id003
  /controls/{phaseId}/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Calculate control progress for phase
      description: "Calculates control validation progress for a phase instance.

        Returns metrics including total controls, validated controls, and progress percentages.

        "
      operationId: getPhaseControlProgress
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase instance ID
      responses:
        "200":
          description: Phase control progress metrics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlProgress"
        "404": *id004
        "500": *id002
        "429": *id003
  /statuses:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Statuses
      summary: Get all statuses
      description: Retrieves all available statuses across all entity types.
      operationId: getAllStatuses
      responses:
        "200":
          description: List of all statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
        "500": *id002
        "429": *id003
  /statuses/{type}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Statuses
      summary: Get statuses by entity type
      description: "Retrieves all statuses for a specific entity type.

        Common types include: Step, Migration, Iteration, Plan, Sequence, Phase.

        "
      operationId: getStatusesByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Entity type (capitalized, e.g., "Step", "Migration")
      responses:
        "200":
          description: List of statuses for the specified type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
        "404": *id004
        "500": *id002
        "429": *id003
  /iterationTypes:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Get all iteration types with enhanced filtering and sorting
      description:
        "Retrieves all available iteration types with comprehensive filtering, pagination, and sorting capabilities.

        Supports both legacy Admin GUI requests and modern paginated requests.


        **Sorting Support**: 11 fields (itt_code, itt_name, itt_description, itt_color, itt_icon, itt_display_order, itt_active,
        created_by, created_at, updated_by, updated_at)

        **Pagination**: Enterprise-grade pagination with metadata

        **Filtering**: Include/exclude inactive iteration types

        **Statistics**: Optional usage statistics with `stats=true`

        "
      operationId: getAllIterationTypes
      parameters:
        - name: includeInactive
          in: query
          description: Include inactive iteration types (default false)
          schema:
            type: boolean
            default: false
        - name: stats
          in: query
          description: Include usage statistics instead of basic listing
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: Page number (1-based indexing)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size (1-1000, default 50)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
            enum:
              - itt_code
              - itt_name
              - itt_description
              - itt_color
              - itt_icon
              - itt_display_order
              - itt_active
              - created_by
              - created_at
              - updated_by
              - updated_at
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: List of iteration types (paginated if page/size parameters provided)
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    description: Simple array for legacy requests
                    items:
                      $ref: "#/components/schemas/IterationType"
                  - type: object
                    description: Paginated response with metadata
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/IterationType"
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          pageSize:
                            type: integer
                          totalItems:
                            type: integer
                          totalPages:
                            type: integer
                          hasNext:
                            type: boolean
                          hasPrevious:
                            type: boolean
              examples:
                simpleList:
                  summary: Simple list for legacy Admin GUI
                  value:
                    - itt_code: PILOT
                      itt_name: Pilot Migration
                      itt_active: true
                paginatedResponse:
                  summary: Paginated response with metadata
                  value:
                    data:
                      - itt_code: PILOT
                        itt_name: Pilot Migration
                        itt_description: Small scale pilot migration
                        itt_color: "#6B73FF"
                        itt_icon: pilot
                        itt_display_order: 1
                        itt_active: true
                        created_by: admin
                        created_at: "2024-01-01T12:00:00Z"
                        updated_by: admin
                        updated_at: "2024-01-01T12:00:00Z"
                    pagination:
                      currentPage: 1
                      pageSize: 50
                      totalItems: 5
                      totalPages: 1
                      hasNext: false
                      hasPrevious: false
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Create a new iteration type
      description: "Creates a new iteration type with comprehensive validation.

        Requires itt_code and itt_name. Supports color, icon, and display order customization.

        "
      operationId: createIterationType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itt_code:
                  type: string
                  pattern: ^[a-zA-Z0-9_-]+$
                  maxLength: 20
                  description: Unique iteration type code (alphanumeric, underscore, dash only)
                  example: PILOT
                itt_name:
                  type: string
                  maxLength: 100
                  description: Display name for the iteration type
                  example: Pilot Migration
                itt_description:
                  type: string
                  maxLength: 500
                  description: Optional description
                  example: Small scale pilot migration for testing
                itt_color:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  description: Hex color code for visual differentiation
                  example: "#6B73FF"
                itt_icon:
                  type: string
                  pattern: ^[a-zA-Z0-9_-]+$
                  maxLength: 50
                  description: Icon name for UI display
                  example: pilot
                itt_display_order:
                  type: integer
                  description: Sort order for display (default 0)
                  default: 0
                itt_active:
                  type: boolean
                  description: Whether the iteration type is active (default true)
                  default: true
              required:
                - itt_code
                - itt_name
            examples:
              minimalCreate:
                summary: Minimal creation with required fields only
                value:
                  itt_code: PILOT
                  itt_name: Pilot Migration
              fullCreate:
                summary: Complete creation with all optional fields
                value:
                  itt_code: FULL_PROD
                  itt_name: Full Production
                  itt_description: Complete production migration with all systems
                  itt_color: "#FF6B6B"
                  itt_icon: production
                  itt_display_order: 10
                  itt_active: true
      responses:
        "201":
          description: Iteration type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IterationType"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /iterationTypes/{code}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Get iteration type by code
      description: "Retrieves a specific iteration type by its unique code.

        "
      operationId: getIterationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique iteration type code
          example: PILOT
      responses:
        "200":
          description: Iteration type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IterationType"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Update iteration type by code
      description:
        "Updates an existing iteration type. All fields except itt_code are updatable.

        Supports partial updates - only provided fields will be modified.

        "
      operationId: updateIterationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique iteration type code
          example: PILOT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itt_name:
                  type: string
                  maxLength: 100
                  description: Display name for the iteration type
                  example: Updated Pilot Migration
                itt_description:
                  type: string
                  maxLength: 500
                  description: Optional description
                  example: Updated description for pilot migration
                itt_color:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  description: Hex color code for visual differentiation
                  example: "#FF6B6B"
                itt_icon:
                  type: string
                  pattern: ^[a-zA-Z0-9_-]+$
                  maxLength: 50
                  description: Icon name for UI display
                  example: updated_icon
                itt_display_order:
                  type: integer
                  description: Sort order for display
                  example: 5
                itt_active:
                  type: boolean
                  description: Whether the iteration type is active
                  example: false
            examples:
              partialUpdate:
                summary: Partial update - name and color only
                value:
                  itt_name: Updated Pilot Migration
                  itt_color: "#FF6B6B"
              fullUpdate:
                summary: Complete update of all fields
                value:
                  itt_name: Completely Updated Pilot
                  itt_description: Fully updated description
                  itt_color: "#00FF00"
                  itt_icon: new_icon
                  itt_display_order: 15
                  itt_active: false
      responses:
        "200":
          description: Iteration type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IterationType"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Soft delete iteration type by code
      description: "Performs soft deletion by setting itt_active = false.

        Checks for blocking relationships before allowing deletion.

        Cannot delete iteration types that are still referenced by iterations or step templates.

        "
      operationId: deleteIterationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique iteration type code to delete
          example: PILOT
      responses:
        "204":
          description: Iteration type soft deleted successfully
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /migrationTypes:
    get:
      security:
        - ConfluenceUsers: []
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Get all migration types with comprehensive filtering and sorting
      description:
        "Retrieves all migration types with advanced filtering, pagination, and sorting capabilities.

        Supports both legacy Admin GUI requests and modern paginated requests.


        **Sorting Support**: 12 fields (mit_id, mit_code, mit_name, mit_description, mit_color, mit_icon, mit_display_order,
        mit_active, created_by, created_at, updated_by, updated_at)

        **Pagination**: Enterprise-grade pagination with metadata (ready for future implementation)

        **Filtering**: Include/exclude inactive migration types

        **Statistics**: Optional usage statistics with special endpoints

        "
      operationId: getAllMigrationTypes
      parameters:
        - name: includeInactive
          in: query
          description: Include inactive migration types (default false)
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: Page number (1-based indexing, pagination ready)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size (1-100, default 50, pagination ready)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
            enum:
              - mit_id
              - mit_code
              - mit_name
              - mit_description
              - mit_color
              - mit_icon
              - mit_display_order
              - mit_active
              - created_by
              - created_at
              - updated_by
              - updated_at
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: List of migration types (with sorting support)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MigrationType"
              examples:
                sortedList:
                  summary: Sorted list with all fields
                  value:
                    - mit_id: 1
                      mit_code: PILOT
                      mit_name: Pilot Migration
                      mit_description: Small scale pilot migration for testing
                      mit_color: "#6B73FF"
                      mit_icon: pilot
                      mit_display_order: 1
                      mit_active: true
                      created_by: admin
                      created_at: "2024-01-01T12:00:00Z"
                      updated_by: admin
                      updated_at: "2024-01-01T12:00:00Z"
                    - mit_id: 2
                      mit_code: FULL_PROD
                      mit_name: Full Production
                      mit_description: Complete production migration
                      mit_color: "#FF6B6B"
                      mit_icon: production
                      mit_display_order: 2
                      mit_active: true
                      created_by: admin
                      created_at: "2024-01-01T12:00:00Z"
                      updated_by: admin
                      updated_at: "2024-01-01T12:00:00Z"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Create a new migration type
      description: "Creates a new migration type with comprehensive validation.

        Requires mit_code and mit_name. Supports color, icon, and display order customization.

        Automatically handles audit fields (created_by, updated_by).

        "
      operationId: createMigrationType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mit_code:
                  type: string
                  maxLength: 20
                  description: Unique migration type code
                  example: PILOT
                mit_name:
                  type: string
                  maxLength: 100
                  description: Display name for the migration type
                  example: Pilot Migration
                mit_description:
                  type: string
                  maxLength: 500
                  description: Optional description
                  example: Small scale pilot migration for testing purposes
                mit_color:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  description: Hex color code for visual differentiation
                  example: "#6B73FF"
                mit_icon:
                  type: string
                  maxLength: 50
                  description: Icon name for UI display
                  example: pilot
                mit_display_order:
                  type: integer
                  description: Sort order for display (default 0)
                  default: 0
                mit_active:
                  type: boolean
                  description: Whether the migration type is active (default true)
                  default: true
              required:
                - mit_code
                - mit_name
            examples:
              minimalCreate:
                summary: Minimal creation with required fields only
                value:
                  mit_code: PILOT
                  mit_name: Pilot Migration
              fullCreate:
                summary: Complete creation with all optional fields
                value:
                  mit_code: FULL_PROD
                  mit_name: Full Production Migration
                  mit_description: Complete production migration with all systems and data
                  mit_color: "#FF6B6B"
                  mit_icon: production
                  mit_display_order: 10
                  mit_active: true
      responses:
        "201":
          description: Migration type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationType"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /migrationTypes/selection:
    get:
      security:
        - ConfluenceUsers: []
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Get active migration types for selection dropdowns
      description:
        "Retrieves active migration types optimized for dropdown selection.

        Returns simplified structure for UI components.

        "
      operationId: getMigrationTypesForSelection
      responses:
        "200":
          description: Active migration types for selection
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    mit_id:
                      type: integer
                    mit_code:
                      type: string
                    mit_name:
                      type: string
                    mit_color:
                      type: string
                    mit_icon:
                      type: string
              examples:
                selectionList:
                  summary: Migration types for dropdown selection
                  value:
                    - mit_id: 1
                      mit_code: PILOT
                      mit_name: Pilot Migration
                      mit_color: "#6B73FF"
                      mit_icon: pilot
                    - mit_id: 2
                      mit_code: FULL_PROD
                      mit_name: Full Production
                      mit_color: "#FF6B6B"
                      mit_icon: production
        "500": *id002
        "429": *id003
  /migrationTypes/stats:
    get:
      security:
        - ConfluenceUsers: []
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Get migration type usage statistics
      description:
        "Retrieves usage statistics for migration types including usage counts

        and relationships with migrations.

        "
      operationId: getMigrationTypeUsageStats
      responses:
        "200":
          description: Migration type usage statistics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    mit_id:
                      type: integer
                    mit_code:
                      type: string
                    mit_name:
                      type: string
                    usage_count:
                      type: integer
                      description: Number of migrations using this type
                    last_used:
                      type: string
                      format: date-time
                      description: Last usage timestamp
              examples:
                usageStats:
                  summary: Usage statistics for migration types
                  value:
                    - mit_id: 1
                      mit_code: PILOT
                      mit_name: Pilot Migration
                      usage_count: 5
                      last_used: "2024-01-15T10:30:00Z"
                    - mit_id: 2
                      mit_code: FULL_PROD
                      mit_name: Full Production
                      usage_count: 12
                      last_used: "2024-01-20T14:45:00Z"
        "500": *id002
        "429": *id003
  /migrationTypes/{id}:
    get:
      security:
        - ConfluenceUsers: []
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Get migration type by ID
      description: "Retrieves a specific migration type by its unique ID.

        "
      operationId: getMigrationTypeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique migration type ID
          example: 1
      responses:
        "200":
          description: Migration type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationType"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Update migration type by ID
      description:
        "Updates an existing migration type. All fields except mit_id are updatable.

        Supports partial updates - only provided fields will be modified.

        Automatically handles audit fields (updated_by).

        "
      operationId: updateMigrationTypeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique migration type ID
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mit_code:
                  type: string
                  maxLength: 20
                  description: Unique migration type code
                  example: UPDATED_PILOT
                mit_name:
                  type: string
                  maxLength: 100
                  description: Display name for the migration type
                  example: Updated Pilot Migration
                mit_description:
                  type: string
                  maxLength: 500
                  description: Optional description
                  example: Updated description for pilot migration
                mit_color:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  description: Hex color code for visual differentiation
                  example: "#FF6B6B"
                mit_icon:
                  type: string
                  maxLength: 50
                  description: Icon name for UI display
                  example: updated_icon
                mit_display_order:
                  type: integer
                  description: Sort order for display
                  example: 5
                mit_active:
                  type: boolean
                  description: Whether the migration type is active
                  example: false
            examples:
              partialUpdate:
                summary: Partial update - name and color only
                value:
                  mit_name: Updated Pilot Migration
                  mit_color: "#FF6B6B"
              fullUpdate:
                summary: Complete update of all fields
                value:
                  mit_code: UPDATED_PILOT
                  mit_name: Completely Updated Pilot
                  mit_description: Fully updated description
                  mit_color: "#00FF00"
                  mit_icon: new_icon
                  mit_display_order: 15
                  mit_active: false
      responses:
        "200":
          description: Migration type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationType"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Delete migration type by ID
      description:
        "Deletes a migration type after checking for blocking relationships.

        Cannot delete migration types that are still referenced by migrations.

        Returns detailed information about blocking relationships if deletion is not possible.

        "
      operationId: deleteMigrationTypeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Unique migration type ID to delete
          example: 1
      responses:
        "200":
          description: Migration type deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Migration type deleted successfully
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /migrationTypes/code/{code}:
    get:
      security:
        - ConfluenceUsers: []
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Get migration type by code
      description: "Retrieves a specific migration type by its unique code.

        "
      operationId: getMigrationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique migration type code
          example: PILOT
      responses:
        "200":
          description: Migration type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationType"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Update migration type by code
      description:
        "Updates an existing migration type identified by code. All fields are updatable.

        Supports partial updates - only provided fields will be modified.

        Automatically handles audit fields (updated_by).

        "
      operationId: updateMigrationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique migration type code
          example: PILOT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mit_name:
                  type: string
                  maxLength: 100
                  description: Display name for the migration type
                  example: Updated Pilot Migration
                mit_description:
                  type: string
                  maxLength: 500
                  description: Optional description
                  example: Updated description for pilot migration
                mit_color:
                  type: string
                  pattern: ^#[0-9A-Fa-f]{6}$
                  description: Hex color code for visual differentiation
                  example: "#FF6B6B"
                mit_icon:
                  type: string
                  maxLength: 50
                  description: Icon name for UI display
                  example: updated_icon
                mit_display_order:
                  type: integer
                  description: Sort order for display
                  example: 5
                mit_active:
                  type: boolean
                  description: Whether the migration type is active
                  example: false
            examples:
              updateByCode:
                summary: Update migration type by code
                value:
                  mit_name: Updated Pilot Migration
                  mit_description: Enhanced pilot migration for better testing
                  mit_color: "#9B59B6"
      responses:
        "200":
          description: Migration type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationType"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Delete migration type by code
      description:
        "Deletes a migration type identified by code after checking for blocking relationships.

        Cannot delete migration types that are still referenced by migrations.

        "
      operationId: deleteMigrationTypeByCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: Unique migration type code to delete
          example: PILOT
      responses:
        "200":
          description: Migration type deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Migration type deleted successfully
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /migrationTypes/reorder:
    post:
      security:
        - ConfluenceAdministrators: []
      tags:
        - MigrationTypes
      summary: Reorder migration types
      description:
        "Updates the display order of multiple migration types in a single operation.

        Accepts a mapping of migration type IDs to their new display orders.

        "
      operationId: reorderMigrationTypes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderMap:
                  type: object
                  additionalProperties:
                    type: integer
                  description: Mapping of migration type IDs to new display orders
                  example:
                    "1": 1
                    "2": 2
                    "3": 3
              required:
                - orderMap
            examples:
              reorderExample:
                summary: Reorder three migration types
                value:
                  orderMap:
                    "1": 3
                    "2": 1
                    "3": 2
      responses:
        "200":
          description: Migration types reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Migration types reordered successfully
                  updatedCount:
                    type: integer
                    example: 3
        "400": *id001
        "500": *id002
        "429": *id003
  /user/context:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get user context with role information (v2.1.0)
      description:
        "Retrieves context information for a user including role and permissions.

        Used for authentication and authorization purposes. Enhanced in v2.1.0 with

        clear role mapping (ADMIN=1, NORMAL=2, PILOT=3) and improved error handling.

        "
      operationId: getUserContext
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: Username to get context for
      responses:
        "200":
          description: User context information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContext"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /labels:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get labels with optional hierarchical filtering
      description:
        "Retrieves a list of labels. Can be filtered by hierarchical entities to show only labels \nassociated\
        \ with step instances in specific migrations, iterations, plans, sequences, or phases.\n"
      operationId: getAllLabels
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by phase instance ID
      responses:
        "200":
          description: A list of labels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Create a new label
      description: Creates a new label within a migration scope.
      operationId: createLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelCreate"
      responses:
        "201":
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /labels/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get a specific label by ID
      description: Retrieves detailed information about a specific label including associated applications and step count.
      operationId: getLabelById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "200":
          description: Label details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Update an existing label
      description: Updates label properties including migration assignment.
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelUpdate"
      responses:
        "200":
          description: Label updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Delete a label
      description: Deletes a label and all its associations.
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "204":
          description: Label deleted successfully
        "404": *id004
        "500": *id002
        "429": *id003
  /labels/{id}/steps:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get steps associated with a label
      description: Retrieves all master steps that are associated with the specified label.
      operationId: getLabelSteps
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "200":
          description: List of associated steps
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      $ref: "#/components/schemas/LabelStep"
        "404": *id004
        "500": *id002
        "429": *id003
  /labels/{labelId}/applications/{applicationId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Add application association to label
      description: Associates an application with a label.
      operationId: addLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        "200":
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Remove application association from label
      description: Removes the association between an application and a label.
      operationId: removeLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        "200":
          description: Application association removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404": *id004
        "500": *id002
        "429": *id003
  /labels/{labelId}/steps/{stepId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Add step association to label
      description: Associates a master step with a label.
      operationId: addLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        "200":
          description: Step associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Remove step association from label
      description: Removes the association between a master step and a label.
      operationId: removeLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        "200":
          description: Step association removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404": *id004
        "500": *id002
        "429": *id003
  /plans/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get all master plans
      description: Retrieves a list of all master plan templates.
      operationId: getAllMasterPlans
      responses:
        "200":
          description: A list of master plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterPlan"
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Create a new master plan
      description: Creates a new master plan template.
      operationId: createMasterPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanInput"
      responses:
        "201":
          description: Master plan created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /plans/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get master plan by ID
      description: Retrieves a specific master plan template by its ID.
      operationId: getMasterPlanById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        "200":
          description: Master plan details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update master plan
      description: Updates an existing master plan template.
      operationId: updateMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanUpdate"
      responses:
        "200":
          description: Master plan updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Delete master plan
      description: Soft deletes a master plan template. Only allowed if no instances exist.
      operationId: deleteMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        "204":
          description: Master plan deleted successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /plans:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get plan instances
      description: Retrieves a list of plan instances with optional filtering.
      operationId: getPlanInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of plan instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlanInstance"
        "400": *id001
        "500": *id002
        "429": *id003
  /plans/instance:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Create plan instance
      description: Creates a new plan instance from a master plan template.
      operationId: createPlanInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanInstanceInput"
      responses:
        "201":
          description: Plan instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /plans/instance/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get plan instance by ID
      description: Retrieves a specific plan instance by its ID.
      operationId: getPlanInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        "200":
          description: Plan instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstanceDetail"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update plan instance
      description: Updates an existing plan instance.
      operationId: updatePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanInstanceUpdate"
      responses:
        "200":
          description: Plan instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstanceDetail"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Delete plan instance
      description: Deletes a plan instance.
      operationId: deletePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        "204":
          description: Plan instance deleted successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /plans/{id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update plan instance status
      description:
        Updates the status of a plan instance. Supports flexible status input - accepts either status names (strings)
        or status IDs (integers) for enhanced usability and PostgreSQL compatibility.
      operationId: updatePlanInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  oneOf:
                    - type: string
                      description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
                    - type: integer
                      description: Status ID (references status_sts table)
                  description:
                    New status - accepts either status name (string) or status ID (integer) for flexible input
                    handling
                  example: PLANNING
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /sequences/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get all master sequences
      description: Retrieves a list of all master sequence templates.
      operationId: getAllMasterSequences
      responses:
        "200":
          description: A list of master sequences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterSequence"
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Create a new master sequence
      description: Creates a new master sequence template.
      operationId: createMasterSequence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceRequest"
      responses:
        "201":
          description: Master sequence created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /sequences/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get master sequence by ID
      description: Retrieves a specific master sequence template by its ID.
      operationId: getMasterSequenceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        "200":
          description: Master sequence details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update master sequence
      description: Updates an existing master sequence template.
      operationId: updateMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceRequest"
      responses:
        "200":
          description: Master sequence updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Delete master sequence
      description: Soft deletes a master sequence template. Only allowed if no instances exist.
      operationId: deleteMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        "204":
          description: Master sequence deleted successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /sequences/master/{id}/order:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update master sequence order
      description: Updates the display order of a master sequence template.
      operationId: updateMasterSequenceOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSequenceOrderRequest"
      responses:
        "200":
          description: Master sequence order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /sequences:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get sequence instances
      description: Retrieves a list of sequence instances with optional filtering.
      operationId: getSequenceInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of sequence instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceInstance"
        "400": *id001
        "500": *id002
        "429": *id003
  /sequences/instance:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Create sequence instance
      description: Creates a new sequence instance from a master sequence template.
      operationId: createSequenceInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceInstanceRequest"
      responses:
        "201":
          description: Sequence instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /sequences/instance/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get sequence instance by ID
      description: Retrieves a specific sequence instance by its ID.
      operationId: getSequenceInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        "200":
          description: Sequence instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update sequence instance
      description: Updates an existing sequence instance.
      operationId: updateSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceInstanceRequest"
      responses:
        "200":
          description: Sequence instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Delete sequence instance
      description: Deletes a sequence instance.
      operationId: deleteSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        "204":
          description: Sequence instance deleted successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /sequences/instance/{id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update sequence instance status
      description: Updates the status of a sequence instance.
      operationId: updateSequenceInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  type: integer
                  description: New status ID
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get all master phases with advanced filtering and pagination
      description:
        "Retrieves all master phase templates with comprehensive filtering, pagination, sorting, and computed fields.

        Supports Admin GUI with enhanced status metadata, relationship data, and performance optimization.


        **Enhanced Features:**

        - Computed fields (step_count, instance_count)

        - Status metadata with colors and descriptions

        - Flexible pagination and sorting

        - Advanced filtering by status, owner, date range, and search

        - PostgreSQL-optimized queries with proper type casting

        "
      operationId: getMasterPhases
      parameters:
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence master ID (legacy parameter)
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of items per page
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - phm_id
              - phm_name
              - phm_status
              - created_at
              - updated_at
              - step_count
              - instance_count
            default: phm_name
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort direction
        - name: status
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: Filter by status name(s). Can be single value or array
          example:
            - ACTIVE
            - PLANNING
        - name: ownerId
          in: query
          required: false
          schema:
            type: string
          description: Filter by owner team ID (through plan master relationship)
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search in phase name and description
        - name: startDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by creation date from (YYYY-MM-DD)
        - name: startDateTo
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by creation date to (YYYY-MM-DD)
      responses:
        "200":
          description: Master phases with pagination and metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MasterPhase"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: Current page number
                      size:
                        type: integer
                        description: Items per page
                      total:
                        type: integer
                        description: Total number of items
                      totalPages:
                        type: integer
                        description: Total number of pages
                  filters:
                    type: object
                    description: Applied filters for reference
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Create master phase
      description: Creates a new master phase template.
      operationId: createMasterPhase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterPhaseRequest"
      responses:
        "201":
          description: Master phase created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/master/{phm_id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get master phase by ID
      description: Retrieves a specific master phase template.
      operationId: getMasterPhaseById
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        "200":
          description: Master phase details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update master phase
      description: Updates a master phase template.
      operationId: updateMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterPhaseRequest"
      responses:
        "200":
          description: Master phase updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Delete master phase
      description: Deletes a master phase template if no dependencies exist.
      operationId: deleteMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        "200":
          description: Master phase deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "409": *id005
        "500": *id002
        "429": *id003
  /phases/master/{phm_id}/instantiate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Instantiate phases from master
      description: Creates phase instances from a master phase template for a specific sequence instance.
      parameters:
        - name: phm_id
          in: path
          required: true
          description: Master phase ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sqi_id
              properties:
                sqi_id:
                  type: string
                  format: uuid
                  description: Sequence instance ID to create phases for
      responses:
        "201":
          description: Phase instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase instances
      description: Retrieves phase instances with hierarchical filtering.
      operationId: getPhaseInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of phase instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseInstance"
        "400": *id001
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Create phase instance
      description: Creates a phase instance from a master phase template.
      operationId: createPhaseInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePhaseInstanceRequest"
      responses:
        "201":
          description: Phase instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/instance/{phi_id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase instance by ID
      description: Retrieves a specific phase instance.
      operationId: getPhaseInstanceById
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update phase instance
      description: Updates a phase instance.
      operationId: updatePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePhaseInstanceRequest"
      responses:
        "200":
          description: Phase instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Delete phase instance
      description: Deletes a phase instance if no dependencies exist.
      operationId: deletePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase instance deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "409": *id005
        "500": *id002
        "429": *id003
  /phases/instance/{phi_id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update phase instance status
      description: Updates the status of a specific phase instance.
      parameters:
        - name: phi_id
          in: path
          required: true
          description: Phase instance ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sts_id
              properties:
                sts_id:
                  type: integer
                  description: New status ID (foreign key to status_sts table)
      responses:
        "204":
          description: Status updated successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/{phi_id}/controls:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase control points
      description: Retrieves all control points for a phase instance.
      operationId: getPhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: List of control points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ControlPoint"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/{phi_id}/controls/validate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Validate phase control points
      description: Validates all control points for a phase instance.
      operationId: validatePhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Validation results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlPointValidation"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/{phi_id}/controls/{cti_id}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update control point
      description: Updates a control point status and validators.
      operationId: updateControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateControlPointRequest"
      responses:
        "200":
          description: Control point updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/{phi_id}/controls/{cti_id}/override:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Override control point
      description: Overrides a control point with reason and audit trail.
      operationId: overrideControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverrideControlPointRequest"
      responses:
        "200":
          description: Control point overridden successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/{phi_id}/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase progress
      description: Calculates and returns progress percentage for a phase instance.
      operationId: getPhaseProgress
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase progress information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseProgress"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/master/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Bulk reorder master phases
      description: Reorders multiple master phases within a sequence.
      operationId: reorderMasterPhases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderMasterPhasesRequest"
      responses:
        "200":
          description: Master phases reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/instance/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Bulk reorder phase instances
      description: Reorders multiple phase instances within a sequence.
      operationId: reorderPhaseInstances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderPhaseInstancesRequest"
      responses:
        "200":
          description: Phase instances reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "500": *id002
        "429": *id003
  /phases/master/{phm_id}/move:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Move master phase
      description: Moves a master phase to a new position within its sequence.
      operationId: moveMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovePhaseRequest"
      responses:
        "200":
          description: Master phase moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /phases/instance/{phi_id}/move:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Move phase instance
      description: Moves a phase instance to a new position within its sequence.
      operationId: movePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovePhaseRequest"
      responses:
        "200":
          description: Phase instance moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /applications:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Applications
      summary: Get all applications
      description: Retrieves a list of all applications.
      operationId: getAllApplications
      responses:
        "200":
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "500": *id002
        "429": *id003
  /users:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get all users
      description: Retrieves a paginated list of all users with optional filtering and sorting.
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
          description: Number of items per page
        - name: search
          in: query
          required: false
          schema:
            type: string
            minLength: 2
          description: Search term to filter users by name, email, or code (min 2 chars)
        - name: userCode
          in: query
          required: false
          schema:
            type: string
          description: Find user by exact code match (for authentication, returns debug info if not found)
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter users by team membership
        - name: active
          in: query
          required: false
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., usr_first_name, usr_last_name, usr_email)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort direction
      responses:
        "200":
          description: A paginated list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  totalElements:
                    type: integer
                    description: Total number of users
                  totalPages:
                    type: integer
                    description: Total number of pages
                  pageNumber:
                    type: integer
                    description: Current page number (1-based)
                  pageSize:
                    type: integer
                    description: Number of items per page
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /users/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Update user
      description: Updates an existing user's information.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Delete user
      description: Deletes a user from the system.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "204":
          description: User deleted successfully.
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
  /emailTemplates:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Get all email templates
      description:
        "Retrieves a list of all email templates used for notifications.

        Can be filtered to show only active templates.

        "
      operationId: getAllEmailTemplates
      parameters:
        - name: activeOnly
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Filter to show only active templates
      responses:
        "200":
          description: List of email templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmailTemplate"
                  total:
                    type: integer
                    description: Total number of templates
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Create a new email template
      description: Creates a new email template for notifications.
      operationId: createEmailTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplateCreate"
      responses:
        "201":
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400": *id001
        "409": *id005
        "500": *id002
        "429": *id003
  /emailTemplates/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Get an email template by ID
      description: Retrieves a specific email template by its unique ID.
      operationId: getEmailTemplateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        "200":
          description: Email template details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Update an email template
      description: Updates an existing email template. Supports partial updates.
      operationId: updateEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplateUpdate"
      responses:
        "200":
          description: Email template updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400": *id001
        "404": *id004
        "409": *id005
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Delete an email template
      description: Deletes an email template by its unique ID.
      operationId: deleteEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        "204":
          description: Email template deleted successfully
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /webapp/{path}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - WebApp
      summary: Serve a static asset
      description: Serves a static asset from the webapp resources.
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The requested asset.
          content:
            application/javascript: {}
            text/css: {}
            image/png: {}
            image/jpeg: {}
            image/svg+xml: {}
        "404": *id004
        "429": *id003
  /api/v2/urlConfiguration:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Get URL configuration for client-side construction
      description:
        "Retrieves URL configuration settings that clients can use to construct proper URLs

        for navigation and links within the UMIG application. Supports environment-specific

        configuration retrieval for multi-environment deployments.

        "
      operationId: getUrlConfiguration
      parameters:
        - name: environment
          in: query
          required: false
          description: Environment identifier (2-5 alphanumeric characters)
          schema:
            type: string
            pattern: ^[a-zA-Z0-9]{2,5}$
            example: DEV
      responses:
        "200":
          description: URL configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfiguration"
              example:
                baseUrl: http://localhost:8090
                spaceKey: UMIG
                pageId: "123456789"
                pageTitle: UMIG Application
                environment: DEV
                isActive: true
                urlTemplate: "{{baseUrl}}/spaces/{{spaceKey}}/pages/{{pageId}}"
        "400": *id001
        "404": *id004
        "500": *id002
        "429": *id003
  /api/v2/urlConfiguration/health:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Health check for URL configuration service
      description:
        "Performs a health check on the URL configuration service, verifying that

        the service is operational and can retrieve configuration data.

        "
      operationId: getUrlConfigurationHealth
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationHealth"
              example:
                status: healthy
                timestamp: "2025-08-27T14:30:00Z"
                details: All configuration services operational
        "503":
          description: Service is degraded or unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationHealth"
              example:
                status: degraded
                timestamp: "2025-08-27T14:30:00Z"
                details: Database connection slow
        "500": *id002
        "429": *id003
  /api/v2/urlConfiguration/clearCache:
    post:
      tags:
        - UrlConfiguration
      summary: Clear URL configuration cache
      description:
        "Clears the URL configuration cache, forcing the service to reload

        configuration from the database on the next request. Useful for

        applying configuration changes immediately.

        "
      operationId: clearUrlConfigurationCache
      responses:
        "200":
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheClearResponse"
              example:
                message: URL configuration cache cleared successfully
                timestamp: "2025-08-27T14:30:00Z"
                nextCacheRefresh: "2025-08-27T14:35:00Z"
        "500": *id002
        "429": *id003
      security:
        - ConfluenceUsers: []
  /api/v2/urlConfiguration/debug:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Debug information for URL configuration troubleshooting
      description:
        "Provides comprehensive debug information about the URL configuration service,

        including service health, cached configurations, environment detection status,

        and system diagnostics. Intended for troubleshooting and system monitoring.

        "
      operationId: getUrlConfigurationDebug
      responses:
        "200":
          description: Debug information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationDebug"
              example:
                serviceHealth:
                  status: healthy
                  databaseConnected: true
                  cacheEnabled: true
                cachedConfigurations:
                  - environment: DEV
                    lastRefresh: "2025-08-27T14:25:00Z"
                    entryCount: 1
                  - environment: TEST
                    lastRefresh: "2025-08-27T14:20:00Z"
                    entryCount: 1
                environmentDetection:
                  currentEnvironment: DEV
                  detectionMethod: CONFLUENCE_BASE_URL
                  fallbackUsed: false
                timestamp: "2025-08-27T14:30:00Z"
        "500": *id002
        "429": *id003
  /import/json:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import single JSON file
      description:
        "Import a single JSON file containing migration data. The JSON content is validated and stored in staging
        tables before promotion to master tables.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importJson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonImportRequest"
      responses:
        "200":
          description: Import completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonImportResponse"
        "400": *id001
        "401": &id006
          $ref: "#/components/responses/Unauthorized"
        "403": &id007
          $ref: "#/components/responses/Forbidden"
        "409": *id005
        "500": *id002
        "429": *id003
  /import/batch:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import multiple JSON files as a batch
      description:
        "Import multiple JSON files as a single batch operation. Files are processed sequentially with comprehensive
        statistics tracking.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchImportRequest"
      responses:
        "200":
          description: Batch import completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/teams:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import teams from CSV
      description:
        "Import team data from CSV format. Supports team_name, team_description, and team_lead fields.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importTeamsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: 'team_name,team_description,team_lead

                "Infrastructure Team","Manages servers and infrastructure","john.doe"

                "Development Team","Application development","jane.smith"

                '
      responses:
        "200":
          description: Teams imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/users:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import users from CSV
      description:
        "Import user data from CSV format. Supports username, display_name, email, and role fields.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importUsersCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: 'username,display_name,email,role

                "john.doe","John Doe","john@company.com","admin"

                "jane.smith","Jane Smith","jane@company.com","user"

                '
      responses:
        "200":
          description: Users imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/applications:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import applications from CSV
      description:
        "Import application data from CSV format. Supports app_name, app_description, and app_owner fields.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importApplicationsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: 'app_name,app_description,app_owner

                "Web Portal","Main application","dev-team"

                "API Gateway","Authentication service","platform-team"

                '
      responses:
        "200":
          description: Applications imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/environments:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import environments from CSV
      description:
        "Import environment data from CSV format. Supports env_name, env_description, and env_type fields.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importEnvironmentsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: 'env_name,env_description,env_type

                "Production","Live environment","PROD"

                "Staging","Pre-production testing","STAGING"

                '
      responses:
        "200":
          description: Environments imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/all:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import all base entities in proper dependency order
      description:
        "Import all base entities (teams, users, applications, environments) in a single operation.

        Processes entities in proper dependency order to maintain referential integrity.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importAllCsv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllEntitiesCsvRequest"
      responses:
        "200":
          description: All entities imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "500": *id002
        "429": *id003
  /import/csv/master-plan:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import master plan CSV (Not Implemented)
      description: "Import master plan configuration from CSV format.

        **This endpoint returns HTTP 501 NOT_IMPLEMENTED** until the importMasterPlans method is implemented in CsvImportService.

        "
      tags:
        - Import
      operationId: importMasterPlanCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: 'plan_name,plan_description,plan_owner

                "Migration Plan Alpha","High-level migration plan","admin"

                '
      responses:
        "501":
          description: Not Implemented - Feature pending implementation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: Master plan CSV import is not yet implemented
                details: The importMasterPlans method needs to be added to CsvImportService
        "400": *id001
        "401": *id006
        "403": *id007
        "429": *id003
  /import/master-plan:
    post:
      security:
        - ConfluenceUsers: []
      summary: Create master plan configuration
      description:
        "Create a master plan configuration entry. Plan names must be unique.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: importMasterPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanRequest"
      responses:
        "200":
          description: Master plan created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlanResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "409": *id005
        "500": *id002
        "429": *id003
  /import/rollback/{batchId}:
    post:
      security:
        - ConfluenceUsers: []
      summary: Rollback import batch with audit trail
      description:
        "Rollback a specific import batch with comprehensive audit trail.

        Removes imported data and updates batch status to ROLLED_BACK.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: rollbackImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          description: Batch rolled back successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "404": *id004
        "500": *id002
        "429": *id003
  /import/history:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get import history with optional filtering
      description:
        "Retrieve import history with optional filtering by user and pagination support.

        Returns comprehensive import batch information with statistics.

        "
      tags:
        - Import
      operationId: getImportHistory
      parameters:
        - name: userId
          in: query
          required: false
          description: Filter by username
          schema:
            type: string
            example: admin
        - name: limit
          in: query
          required: false
          description: Limit number of history records (1-1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
            example: 10
      responses:
        "200":
          description: Import history retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportHistoryResponse"
        "400": *id001
        "401": *id006
        "500": *id002
        "429": *id003
  /import/batch/{batchId}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get details of a specific import batch
      description:
        "Retrieve comprehensive details of a specific import batch including statistics and status.

        "
      tags:
        - Import
      operationId: getImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: Batch details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportBatchDetails"
        "400": *id001
        "401": *id006
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      summary: Rollback a specific import batch
      description:
        "Rollback (delete) a specific import batch. Alternative endpoint to POST /import/rollback/{batchId}.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: deleteImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          description: Batch rolled back successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "404": *id004
        "500": *id002
        "429": *id003
    put:
      security:
        - ConfluenceUsers: []
      summary: Update import batch status
      description: "Update the status and statistics of a specific import batch.

        Requires administrator privileges for execution.

        "
      tags:
        - Import
      operationId: updateImportBatchStatus
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchStatusUpdateRequest"
      responses:
        "200":
          description: Batch status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchStatusUpdateResponse"
        "400": *id001
        "401": *id006
        "403": *id007
        "404": *id004
        "500": *id002
        "429": *id003
  /import/statistics:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get overall import statistics
      description:
        "Retrieve overall import system statistics including total batches, success rates, and performance metrics.

        "
      tags:
        - Import
      operationId: getImportStatistics
      responses:
        "200":
          description: Import statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportStatistics"
        "401": *id006
        "500": *id002
        "429": *id003
  /import/templates/{entity}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Download CSV templates for base entities
      description:
        "Download CSV template files for importing base entities (teams, users, applications, environments).

        Templates include proper headers and example data.

        "
      tags:
        - Import
      operationId: downloadCsvTemplate
      parameters:
        - name: entity
          in: path
          required: true
          description: Entity type for template download
          schema:
            type: string
            enum:
              - teams
              - users
              - applications
              - environments
            example: teams
      responses:
        "200":
          description: CSV template downloaded successfully
          content:
            text/csv:
              schema:
                type: string
                example: 'team_name,team_description,team_lead

                  "Infrastructure Team","Manages servers and infrastructure","john.doe"

                  "Development Team","Application development","jane.smith"

                  '
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="teams_template.csv"
            Cache-Control:
              schema:
                type: string
                example: no-cache, no-store, must-revalidate
        "400": *id001
        "401": *id006
        "404": *id004
        "500": *id002
        "429": *id003
  /import-queue:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get import queue status and statistics
      description:
        "Retrieve comprehensive import queue status including active imports, queue statistics, \nresource utilization,\
        \ and system recommendations. Provides real-time monitoring of \nimport operations with performance insights and system\
        \ health status.\n"
      tags:
        - ImportQueue
      operationId: getImportQueueStatus
      responses:
        "200":
          description: Import queue status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportQueueStatusResponse"
        "401": *id006
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      summary: Submit import request to queue
      description:
        "Submit a new import request to the queue with priority handling, resource requirements \ncalculation,\
        \ and estimated completion time. Supports various import types with \ncomprehensive configuration options and automatic\
        \ queue positioning.\n"
      tags:
        - ImportQueue
      operationId: submitImportRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportQueueRequest"
      responses:
        "200":
          description: Import request submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportQueueSubmissionResponse"
        "400": *id001
        "401": *id006
        "500": *id002
        "429": *id003
  /import-request/{requestId}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get import request status
      description:
        "Retrieve detailed status information for a specific import request including current \nstatus, progress,\
        \ execution details, and completion estimates.\n"
      tags:
        - ImportQueue
      operationId: getImportRequestStatus
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Import request identifier
      responses:
        "200":
          description: Import request status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportRequestStatusResponse"
        "400": *id001
        "401": *id006
        "404": *id004
        "500": *id002
        "429": *id003
    delete:
      security:
        - ConfluenceUsers: []
      summary: Cancel queued import request
      description:
        "Cancel a queued import request with optional reason. Supports cancellation of \npending requests with\
        \ comprehensive audit trail and status updates.\n"
      tags:
        - ImportQueue
      operationId: cancelImportRequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Import request identifier to cancel
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelRequestBody"
      responses:
        "200":
          description: Import request cancelled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelRequestResponse"
        "400": *id001
        "401": *id006
        "404": *id004
        "500": *id002
        "429": *id003
  /import-schedules:
    get:
      security:
        - ConfluenceUsers: []
      summary: List import schedules
      description:
        "Retrieve list of import schedules with filtering options. Includes schedule \nstatistics and supports\
        \ user-specific filtering and active-only filtering.\n"
      tags:
        - ImportQueue
      operationId: getImportSchedules
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter schedules by user ID
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 1000
          description: Maximum number of schedules to return
        - name: activeOnly
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: Return only active schedules
      responses:
        "200":
          description: Import schedules retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportSchedulesResponse"
        "401": *id006
        "500": *id002
        "429": *id003
    post:
      security:
        - ConfluenceUsers: []
      summary: Create scheduled import
      description:
        "Create a new scheduled import with recurring pattern support. Supports cron-like \nscheduling with comprehensive\
        \ configuration options and validation.\n"
      tags:
        - ImportQueue
      operationId: createScheduledImport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleRequest"
      responses:
        "200":
          description: Import schedule created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateScheduleResponse"
        "400": *id001
        "401": *id006
        "500": *id002
        "429": *id003
  /import-resources:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get resource utilization and locks
      description:
        "Retrieve current resource utilization including active resource locks, system status, \nqueue statistics,\
        \ and performance recommendations for optimal resource management.\n"
      tags:
        - ImportQueue
      operationId: getImportResources
      responses:
        "200":
          description: Resource information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResourcesResponse"
        "401": *id006
        "500": *id002
        "429": *id003

  # Team Relationship Management API Endpoints
  /teams/{teamId}/environments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - TeamRelationships
      summary: Get team-environment relationships
      description: |
        Retrieves all environments associated with a specific team including complete environment details,
        relationship metadata, and comprehensive team context information.
      operationId: getTeamEnvironments
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique team identifier
      responses:
        "200":
          description: Team environments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    env_id:
                      type: integer
                    env_name:
                      type: string
                    env_code:
                      type: string
                    env_description:
                      type: string
        "404":
          description: Team not found
        "500":
          description: Internal server error

  /teams/{teamId}/applications:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - TeamRelationships
      summary: Get team-application relationships
      description: |
        Retrieves all applications associated with a specific team including complete application details
        and comprehensive team context.
      operationId: getTeamApplications
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique team identifier
      responses:
        "200":
          description: Team applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    app_id:
                      type: integer
                    app_name:
                      type: string
                    app_code:
                      type: string
                    app_description:
                      type: string
        "404":
          description: Team not found
        "500":
          description: Internal server error

  /teams/{teamId}/labels:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - TeamRelationships
      summary: Get team-label relationships
      description: |
        Retrieves all labels associated with a specific team including complete label details,
        color information, and comprehensive team context.
      operationId: getTeamLabels
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique team identifier
      responses:
        "200":
          description: Team labels retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    lbl_id:
                      type: integer
                    lbl_name:
                      type: string
                    lbl_color:
                      type: string
                    lbl_description:
                      type: string
        "404":
          description: Team not found
        "500":
          description: Internal server error

  /teams/{teamId}/summary:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - TeamRelationships
      summary: Get comprehensive team relationship summary
      description: |
        Retrieves complete relationship summary for a team including all associated environments,
        applications, labels, and comprehensive statistics and metrics.
      operationId: getTeamRelationshipSummary
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique team identifier
      responses:
        "200":
          description: Team relationship summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    type: object
                    properties:
                      tms_id:
                        type: integer
                      tms_name:
                        type: string
                      tms_description:
                        type: string
                      tms_email:
                        type: string
                  environments:
                    type: array
                    items:
                      type: object
                  applications:
                    type: array
                    items:
                      type: object
                  labels:
                    type: array
                    items:
                      type: object
                  summary:
                    type: object
                    properties:
                      environment_count:
                        type: integer
                      application_count:
                        type: integer
                      label_count:
                        type: integer
        "404":
          description: Team not found
        "500":
          description: Internal server error

  # User Relationship Management API Endpoints
  /users/{userId}/teams:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UserRelationships
      summary: Get user-team relationships
      description: |
        Retrieves all teams associated with a specific user including complete team details,
        role information, and comprehensive user context.
      operationId: getUserTeams
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique user identifier
      responses:
        "200":
          description: User teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tms_id:
                      type: integer
                    tms_name:
                      type: string
                    tms_description:
                      type: string
                    tms_email:
                      type: string
        "404":
          description: User not found
        "500":
          description: Internal server error

  /users/{userId}/environments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UserRelationships
      summary: Get user-environment relationships
      description: |
        Retrieves all environments accessible to a specific user through team associations
        including complete environment details and access context.
      operationId: getUserEnvironments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique user identifier
      responses:
        "200":
          description: User environments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    env_id:
                      type: integer
                    env_name:
                      type: string
                    env_code:
                      type: string
                    env_description:
                      type: string
                    team_name:
                      type: string
        "404":
          description: User not found
        "500":
          description: Internal server error

  /users/{userId}/applications:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UserRelationships
      summary: Get user-application relationships
      description: |
        Retrieves all applications accessible to a specific user through team associations
        including complete application details and access context.
      operationId: getUserApplications
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique user identifier
      responses:
        "200":
          description: User applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    app_id:
                      type: integer
                    app_name:
                      type: string
                    app_code:
                      type: string
                    app_description:
                      type: string
                    team_name:
                      type: string
        "404":
          description: User not found
        "500":
          description: Internal server error

  /users/{userId}/summary:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UserRelationships
      summary: Get comprehensive user relationship summary
      description: |
        Retrieves complete relationship summary for a user including all associated teams,
        environments, applications, and comprehensive access statistics.
      operationId: getUserRelationshipSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          description: The unique user identifier
      responses:
        "200":
          description: User relationship summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      usr_id:
                        type: integer
                      usr_login:
                        type: string
                      usr_display_name:
                        type: string
                      usr_email:
                        type: string
                  teams:
                    type: array
                    items:
                      type: object
                  environments:
                    type: array
                    items:
                      type: object
                  applications:
                    type: array
                    items:
                      type: object
                  summary:
                    type: object
                    properties:
                      team_count:
                        type: integer
                      environment_count:
                        type: integer
                      application_count:
                        type: integer
        "404":
          description: User not found
        "500":
          description: Internal server error

components:
  schemas:
    StepView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
    UrlConfiguration:
      type: object
      description: URL configuration settings for client-side URL construction
      properties:
        baseUrl:
          type: string
          description: Base URL of the Confluence instance
          example: http://localhost:8090
        spaceKey:
          type: string
          description: Confluence space key where UMIG is deployed
          example: UMIG
        pageId:
          type: string
          description: Page ID where the UMIG application is hosted
          example: "123456789"
        pageTitle:
          type: string
          description: Title of the page hosting UMIG
          example: UMIG Application
        environment:
          type: string
          description: Current environment identifier
          example: DEV
        isActive:
          type: boolean
          description: Whether this configuration is currently active
          example: true
        urlTemplate:
          type: string
          description: Template for constructing URLs using configuration values
          example: "{{baseUrl}}/spaces/{{spaceKey}}/pages/{{pageId}}"
      required:
        - baseUrl
        - spaceKey
        - pageId
        - pageTitle
        - environment
        - isActive
        - urlTemplate
    UrlConfigurationHealth:
      type: object
      description: Health status of the URL configuration service
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - error
          description: Current health status of the service
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: Timestamp when health check was performed
          example: "2025-08-27T14:30:00Z"
        details:
          type: string
          description: Additional details about the health status
          example: All configuration services operational
      required:
        - status
        - timestamp
    CacheClearResponse:
      type: object
      description: Response after clearing URL configuration cache
      properties:
        message:
          type: string
          description: Confirmation message
          example: URL configuration cache cleared successfully
        timestamp:
          type: string
          format: date-time
          description: Timestamp when cache was cleared
          example: "2025-08-27T14:30:00Z"
        nextCacheRefresh:
          type: string
          format: date-time
          description: Estimated time for next cache refresh
          example: "2025-08-27T14:35:00Z"
      required:
        - message
        - timestamp
    UrlConfigurationDebug:
      type: object
      description: Debug information for URL configuration troubleshooting
      properties:
        serviceHealth:
          type: object
          description: Service health information
          properties:
            status:
              type: string
              description: Service status
              example: healthy
            databaseConnected:
              type: boolean
              description: Database connection status
              example: true
            cacheEnabled:
              type: boolean
              description: Whether caching is enabled
              example: true
          required:
            - status
            - databaseConnected
            - cacheEnabled
        cachedConfigurations:
          type: array
          description: Information about cached configurations
          items:
            type: object
            properties:
              environment:
                type: string
                description: Environment identifier
                example: DEV
              lastRefresh:
                type: string
                format: date-time
                description: When this cache entry was last refreshed
                example: "2025-08-27T14:25:00Z"
              entryCount:
                type: integer
                description: Number of cached entries for this environment
                example: 1
            required:
              - environment
              - lastRefresh
              - entryCount
        environmentDetection:
          type: object
          description: Environment detection information
          properties:
            currentEnvironment:
              type: string
              description: Currently detected environment
              example: DEV
            detectionMethod:
              type: string
              description: Method used to detect environment
              example: CONFLUENCE_BASE_URL
            fallbackUsed:
              type: boolean
              description: Whether fallback detection was used
              example: false
          required:
            - currentEnvironment
            - detectionMethod
            - fallbackUsed
        timestamp:
          type: string
          format: date-time
          description: Timestamp when debug information was generated
          example: "2025-08-27T14:30:00Z"
      required:
        - serviceHealth
        - cachedConfigurations
        - environmentDetection
        - timestamp
    MigrationSummary:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
        mig_name:
          type: string
        mig_status:
          type: integer
        statusMetadata:
          $ref: "#/components/schemas/StatusMetadata"
    Migration:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: integer
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date
        mig_business_cutover_date:
          type: string
          format: date
        usr_id_owner:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          type: string
          description: Username of the user who created the migration
        updated_by:
          type: string
          description: Username of the user who last updated the migration
        iteration_count:
          type: integer
          description: Count of iterations associated with the migration
          readOnly: true
        plan_count:
          type: integer
          description: Count of distinct plans associated with the migration via iterations
          readOnly: true
        statusMetadata:
          $ref: "#/components/schemas/StatusMetadata"
    CreateMigrationRequest:
      type: object
      required:
        - mig_name
      properties:
        mig_name:
          type: string
          minLength: 1
          description: Name of the migration (required)
          example: Data Center Migration Q3 2025
        mig_description:
          type: string
          description: Detailed description of the migration
          example: Migration of all core services to new data center.
        mig_status:
          oneOf:
            - type: string
              enum:
                - PLANNING
                - IN_PROGRESS
                - COMPLETED
                - ON_HOLD
                - CANCELLED
              description: Status as string name
              example: PLANNING
            - type: integer
              enum:
                - 1
                - 2
                - 3
                - 4
                - 5
              description: Status as integer ID (1=PLANNING, 2=IN_PROGRESS, 3=COMPLETED, 4=ON_HOLD, 5=CANCELLED)
              example: 1
          description: Migration status - accepts either string name or integer ID. Defaults to PLANNING if not provided.
        mig_start_date:
          type: string
          description: Start date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-07-01"
        mig_end_date:
          type: string
          description: End date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-09-30"
        mig_business_cutover_date:
          type: string
          description: Business cutover date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-08-15T14:30:00"
        mig_type:
          type: string
          description: Type of migration (defaults to 'MIGRATION')
          example: Infrastructure
        usr_id_owner:
          type: integer
          description:
            "Owner user ID (optional - auto-assigned using admin \u2192 active \u2192 any user fallback if not\
            \ provided)"
          example: 123
        created_by:
          type: string
          description: Username of the user creating the migration (auto-populated if not provided)
          example: admin
        updated_by:
          type: string
          description: Username of the user creating the migration (auto-populated if not provided)
          example: admin
    UpdateMigrationRequest:
      type: object
      properties:
        mig_name:
          type: string
          minLength: 1
        mig_description:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date
        mig_business_cutover_date:
          type: string
          format: date
        mig_type:
          type: string
        usr_id_owner:
          type: integer
        mig_status:
          type: integer
        updated_by:
          type: string
          description: Username of the user updating the migration (auto-populated if not provided)
    StatusMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        type:
          type: string
    PaginatedMigrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Migration"
        pagination:
          $ref: "#/components/schemas/PaginationMetadata"
        filters:
          $ref: "#/components/schemas/FilterMetadata"
    PaginationMetadata:
      type: object
      description: Enhanced pagination metadata with performance information
      properties:
        page:
          type: integer
          minimum: 1
          example: 1
        size:
          type: integer
          minimum: 1
          maximum: 500
          example: 50
        total:
          type: integer
          example: 150
        pages:
          type: integer
          example: 3
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false
        performance:
          $ref: "#/components/schemas/PerformanceMetrics"
      required:
        - page
        - size
        - total
        - pages
        - hasNext
        - hasPrevious
    FilterMetadata:
      type: object
      properties:
        search:
          type: string
        status:
          type: array
          items:
            type: string
        sort:
          type: string
        direction:
          type: string
    DashboardSummary:
      type: object
      properties:
        data:
          type: object
          properties:
            totalMigrations:
              type: integer
            byStatus:
              type: object
              additionalProperties:
                type: integer
            upcomingDeadlines:
              type: array
              items:
                type: object
                properties:
                  mig_id:
                    type: string
                    format: uuid
                  mig_name:
                    type: string
                  mig_end_date:
                    type: string
                    format: date
                  daysRemaining:
                    type: integer
            recentUpdates:
              type: array
              items:
                type: object
                properties:
                  mig_id:
                    type: string
                    format: uuid
                  mig_name:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
                  action:
                    type: string
    DashboardProgress:
      type: object
      properties:
        data:
          type: object
          properties:
            migrationId:
              type: string
              format: uuid
            name:
              type: string
            overallProgress:
              type: number
              minimum: 0
              maximum: 100
            iterationsProgress:
              type: array
              items:
                type: object
                properties:
                  ite_id:
                    type: string
                    format: uuid
                  ite_name:
                    type: string
                  progress:
                    type: number
                  status:
                    type: string
            milestones:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                  completed:
                    type: boolean
            timeline:
              type: object
              properties:
                start:
                  type: string
                  format: date
                end:
                  type: string
                  format: date
                current:
                  type: string
                  format: date
    DashboardMetrics:
      type: object
      properties:
        data:
          type: object
          properties:
            period:
              type: string
            migrationId:
              type: string
              format: uuid
            message:
              type: string
            completionRate:
              type: number
            avgDuration:
              type: number
            statusDistribution:
              type: object
            trends:
              type: array
              items:
                type: object
    BulkStatusUpdateRequest:
      type: object
      required:
        - migrationIds
        - newStatus
      properties:
        migrationIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        newStatus:
          type: string
          minLength: 1
        reason:
          type: string
    BulkExportRequest:
      type: object
      required:
        - migrationIds
      properties:
        migrationIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        format:
          type: string
          enum:
            - json
            - csv
          default: json
        includeIterations:
          type: boolean
          default: false
    BulkOperationResult:
      type: object
      properties:
        updated:
          type: array
          items:
            type: string
            format: uuid
        failed:
          type: array
          items:
            type: object
            properties:
              migrationId:
                type: string
                format: uuid
              error:
                type: string
        summary:
          type: object
          properties:
            total:
              type: integer
            updated:
              type: integer
            failed:
              type: integer
            message:
              type: string
    BulkExportResult:
      type: object
      properties:
        exportId:
          type: string
          format: uuid
        format:
          type: string
        totalRecords:
          type: integer
        includeIterations:
          type: boolean
        generatedAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
        expiresAt:
          type: string
          format: date-time
    IterationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date
    Team:
      type: object
      properties:
        tms_id:
          type: integer
          description: Unique identifier for the team
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team
    Label:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the label
        name:
          type: string
          description: Name of the label
        description:
          type: string
          description: Description of the label
        color:
          type: string
          pattern: ^#[0-9a-fA-F]{6}$
          description: Hex color code for the label
    LabelDetail:
      type: object
      properties:
        lbl_id:
          type: integer
          description: Unique identifier for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: ^#[0-9a-fA-F]{6}$
          description: Hex color code for the label
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: User ID who created the label
        applications:
          type: array
          items:
            type: object
            properties:
              app_id:
                type: integer
              app_code:
                type: string
              app_name:
                type: string
        step_count:
          type: integer
          description: Number of associated steps
    LabelCreate:
      type: object
      required:
        - lbl_name
        - lbl_color
        - mig_id
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: ^#[0-9a-fA-F]{6}$
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    LabelUpdate:
      type: object
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: ^#[0-9a-fA-F]{6}$
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    LabelStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        step_type:
          type: string
          description: Step type code
        step_number:
          type: integer
          description: Step number
        step_title:
          type: string
          description: Step title/name
    MasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        stt_code:
          type: string
          description: Step type code
        stm_step_number:
          type: integer
          description: Step number
        stm_title:
          type: string
          description: Step title/name
        stm_description:
          type: string
          description: Step description
        stt_name:
          type: string
          description: Step type name
        step_code:
          type: string
          description: Composed step code (type-number)
        display_name:
          type: string
          description: Display name for dropdowns
    StepInstanceDetails:
      type: object
      description: Complete details for a step instance, including instructions, comments, and metadata
      properties:
        stepSummary:
          type: object
          description: Summary information about the step
          properties:
            ID:
              type: string
              format: uuid
              description: Step instance ID
            StepCode:
              type: string
              pattern: ^[A-Z]{3}-\d{3}$
              description: Step code (e.g., APP-001)
            Name:
              type: string
              description: Step name
            Status:
              type: string
              description: Current status of the step
            Duration:
              type: integer
              nullable: true
              description: Duration in minutes
            AssignedTeam:
              type: string
              description: Name of the team assigned to this step
            PredecessorCode:
              type: string
              nullable: true
              description: Code of the predecessor step if any
            PredecessorName:
              type: string
              nullable: true
              description: Name of the predecessor step if any
            TargetEnvironment:
              type: string
              nullable: true
              description: Target environment for this step
            Description:
              type: string
              nullable: true
              description: Step description
            MigrationName:
              type: string
              description: Name of the migration
            IterationName:
              type: string
              description: Name of the iteration
            PlanName:
              type: string
              description: Name of the plan
            SequenceName:
              type: string
              description: Name of the sequence
            PhaseName:
              type: string
              description: Name of the phase
            Labels:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Label name
                  color:
                    type: string
                    description: Label color in hex format
        instructions:
          type: array
          description: List of instructions for this step
          items:
            type: object
            properties:
              Id:
                type: string
                format: uuid
                description: Instruction instance ID
              Order:
                type: integer
                description: Display order of the instruction
              Description:
                type: string
                description: Instruction text
              Duration:
                type: integer
                nullable: true
                description: Duration in minutes
              IsCompleted:
                type: boolean
                description: Whether the instruction is completed
        impactedTeams:
          type: array
          description: Teams impacted by this step
          items:
            type: object
            properties:
              name:
                type: string
                description: Team name
        comments:
          type: array
          description: Comments on this step instance
          items:
            type: object
            properties:
              id:
                type: integer
                description: Comment ID
              body:
                type: string
                description: Comment text
              createdAt:
                type: string
                format: date-time
                description: When the comment was created
              author:
                type: object
                properties:
                  name:
                    type: string
                    description: Author's display name
                  team:
                    type: string
                    nullable: true
                    description: Author's team name
    InstructionInstance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Instruction instance ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          description: Instruction description
        content:
          type: string
          description: Instruction content/details
        status:
          type: string
          description: Instruction status
        number:
          type: integer
          description: Instruction number within the step
        isCompleted:
          type: boolean
          description: Whether the instruction is completed
    StepStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - PENDING
            - TODO
            - IN_PROGRESS
            - COMPLETED
            - FAILED
            - BLOCKED
            - CANCELLED
          description: New status for the step (legacy string support)
        statusId:
          type: integer
          description: New status ID for the step (modern database-validated approach)
        userId:
          type: integer
          description: User ID for audit logging
      description:
        "Update step status using either statusId (preferred) or status (legacy).

        Only one of statusId or status should be provided.

        "
    StepStatusUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        newStatus:
          type: string
          description: The new status that was set
        emailsSent:
          type: integer
          description: Number of notification emails sent
    StepActionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the action was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent
    InstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the completion was successful
        message:
          type: string
          description: Success message
        instructionId:
          type: string
          format: uuid
          description: Instruction ID
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent
    MasterInstruction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Master instruction ID
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        teamName:
          type: string
          nullable: true
          description: Responsible team name
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        controlName:
          type: string
          nullable: true
          description: Associated control name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User who created the instruction
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          nullable: true
          description: User who last updated the instruction
    MasterInstructionCreate:
      type: object
      required:
        - stepMasterId
        - name
        - content
        - instructionOrder
      properties:
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        createdBy:
          type: integer
          description: User creating the instruction
    MasterInstructionUpdate:
      type: object
      properties:
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        updatedBy:
          type: integer
          description: User updating the instruction
    InstructionInstanceCreate:
      type: object
      required:
        - masterInstructionIds
      properties:
        masterInstructionIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of master instruction IDs to create instances from
    InstructionCompleteRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          description: User ID marking the instruction as complete
    InstructionUncompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the uncomplete action was successful
        message:
          type: string
          description: Success message
        instructionInstanceId:
          type: string
          format: uuid
          description: Instruction instance ID
    BulkInstructionCompleteRequest:
      type: object
      required:
        - instructionInstanceIds
        - userId
      properties:
        instructionInstanceIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of instruction instance IDs to complete
        userId:
          type: integer
          description: User ID marking the instructions as complete
    BulkInstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the bulk completion was successful
        message:
          type: string
          description: Success message
        completedCount:
          type: integer
          description: Number of instructions successfully completed
        failedCount:
          type: integer
          description: Number of instructions that failed to complete
        emailsSent:
          type: integer
          description: Number of notification emails sent
    InstructionReorderRequest:
      type: object
      required:
        - orderData
      properties:
        orderData:
          type: array
          items:
            type: object
            required:
              - instructionId
              - order
            properties:
              instructionId:
                type: string
                format: uuid
                description: Instruction ID
              order:
                type: integer
                description: New order position
          description: List of instruction ID and order pairs
    ReorderResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the reorder was successful
        message:
          type: string
          description: Success message
        updatedCount:
          type: integer
          description: Number of instructions reordered
    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message
        deletedId:
          type: string
          format: uuid
          description: ID of the deleted entity
    InstructionProgressAnalytics:
      type: object
      properties:
        totalInstructions:
          type: integer
          description: Total number of instruction instances
        completedInstructions:
          type: integer
          description: Number of completed instruction instances
        completionPercentage:
          type: number
          format: double
          description: Completion percentage (0-100)
        teamBreakdown:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              totalInstructions:
                type: integer
                description: Total instructions for this team
              completedInstructions:
                type: integer
                description: Completed instructions for this team
              completionPercentage:
                type: number
                format: double
                description: Team completion percentage
          description: Progress breakdown by team
        phaseBreakdown:
          type: array
          items:
            type: object
            properties:
              phaseId:
                type: string
                format: uuid
                description: Phase instance ID
              phaseName:
                type: string
                description: Phase name
              totalInstructions:
                type: integer
                description: Total instructions in this phase
              completedInstructions:
                type: integer
                description: Completed instructions in this phase
              completionPercentage:
                type: number
                format: double
                description: Phase completion percentage
          description: Progress breakdown by phase
    InstructionCompletionAnalytics:
      type: object
      properties:
        timelineData:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: Date of completion
              count:
                type: integer
                description: Number of instructions completed on this date
              cumulativeCount:
                type: integer
                description: Cumulative count of completed instructions
          description: Daily completion timeline
        averageCompletionTime:
          type: number
          format: double
          description: Average time to complete instructions (in hours)
        peakCompletionDays:
          type: array
          items:
            type: string
            format: date
          description: Days with highest completion activity
        teamPerformance:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              averageCompletionTime:
                type: number
                format: double
                description: Average completion time for this team (in hours)
              totalCompleted:
                type: integer
                description: Total instructions completed by this team
          description: Team performance metrics
    MasterControl:
      type: object
      properties:
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phm_id:
          type: string
          format: uuid
          description: Associated phase master ID
        ctm_order:
          type: integer
          description: Display order within phase
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type (VALIDATION, CHECK, APPROVAL)
        ctm_is_critical:
          type: boolean
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        created_by:
          type: string
          description: User who created the control
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          nullable: true
          description: User who last updated the control
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
        phm_name:
          type: string
          description: Phase master name
        phase_description:
          type: string
          nullable: true
          description: Phase description
        sqm_id:
          type: string
          format: uuid
          description: Sequence master ID
        sqm_name:
          type: string
          description: Sequence master name
        sequence_description:
          type: string
          nullable: true
          description: Sequence description
        plm_id:
          type: string
          format: uuid
          description: Plan master ID
        plm_name:
          type: string
          description: Plan master name
        plan_description:
          type: string
          nullable: true
          description: Plan description
        tms_id:
          type: integer
          description: Team ID
        tms_name:
          type: string
          description: Team name
    ControlInstance:
      type: object
      properties:
        cti_id:
          type: string
          format: uuid
          description: Control instance ID
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phi_id:
          type: string
          format: uuid
          description: Associated phase instance ID
        cti_order:
          type: integer
          description: Display order within phase
        cti_name:
          type: string
          description: Control instance name
        cti_description:
          type: string
          nullable: true
          description: Control instance description
        cti_type:
          type: string
          nullable: true
          description: Control type
        cti_is_critical:
          type: boolean
          description: Whether this is a critical control
        cti_code:
          type: string
          nullable: true
          description: Control code identifier
        cti_status:
          type: string
          description: Control status (PENDING, IN_PROGRESS, VALIDATED, FAILED, OVERRIDDEN)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
        created_by:
          type: string
          description: User who created the instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          nullable: true
          description: User who last updated the instance
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
        ctm_name:
          type: string
          description: Master control name
        master_description:
          type: string
          nullable: true
          description: Master control description
        phi_name:
          type: string
          description: Phase instance name
        phase_description:
          type: string
          nullable: true
          description: Phase instance description
        sqi_id:
          type: string
          format: uuid
          description: Sequence instance ID
        sequence_name:
          type: string
          description: Sequence instance name
        pli_id:
          type: string
          format: uuid
          description: Plan instance ID
        plan_name:
          type: string
          description: Plan instance name
        ite_id:
          type: string
          format: uuid
          description: Iteration ID
        iteration_name:
          type: string
          description: Iteration name
        mig_id:
          type: string
          format: uuid
          description: Migration ID
        migration_name:
          type: string
          description: Migration name
        it_validator_name:
          type: string
          nullable: true
          description: IT validator name
        biz_validator_name:
          type: string
          nullable: true
          description: Business validator name
    CreateMasterControlRequest:
      type: object
      required:
        - phm_id
        - ctm_name
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type
        ctm_is_critical:
          type: boolean
          nullable: true
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        ctm_order:
          type: integer
          nullable: true
          description: Display order within phase
    UpdateMasterControlRequest:
      type: object
      properties:
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type
        ctm_is_critical:
          type: boolean
          nullable: true
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        ctm_order:
          type: integer
          nullable: true
          description: Display order within phase
        phm_id:
          type: string
          format: uuid
          nullable: true
          description: Associated Phase Master ID for Admin GUI EDIT mode support
    CreateControlInstanceRequest:
      type: object
      required:
        - ctm_id
        - phi_id
      properties:
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_name:
          type: string
          nullable: true
          description: Override control name
        cti_description:
          type: string
          nullable: true
          description: Override control description
        cti_status:
          type: string
          nullable: true
          description: Initial status (defaults to PENDING)
        cti_order:
          type: integer
          nullable: true
          description: Override display order
        cti_type:
          type: string
          nullable: true
          description: Override control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Override critical flag
        cti_code:
          type: string
          nullable: true
          description: Override control code
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
    UpdateControlInstanceRequest:
      type: object
      properties:
        cti_name:
          type: string
          description: Control instance name
        cti_description:
          type: string
          nullable: true
          description: Control instance description
        cti_status:
          type: string
          nullable: true
          description: Control status
        cti_order:
          type: integer
          nullable: true
          description: Display order
        cti_type:
          type: string
          nullable: true
          description: Control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Critical flag
        cti_code:
          type: string
          nullable: true
          description: Control code
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
    InstantiateControlRequest:
      type: object
      required:
        - phi_id
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_name:
          type: string
          nullable: true
          description: Override control name
        cti_description:
          type: string
          nullable: true
          description: Override control description
        cti_status:
          type: string
          nullable: true
          description: Initial status (defaults to PENDING)
        cti_order:
          type: integer
          nullable: true
          description: Override display order
        cti_type:
          type: string
          nullable: true
          description: Override control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Override critical flag
        cti_code:
          type: string
          nullable: true
          description: Override control code
    ReorderControlsRequest:
      type: object
      required:
        - phm_id
        - control_order
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
        control_order:
          type: array
          items:
            type: string
            format: uuid
          description: Ordered array of control IDs
    ValidateControlRequest:
      type: object
      properties:
        cti_status:
          type: string
          description: New status (typically VALIDATED)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
    OverrideControlRequest:
      type: object
      required:
        - reason
        - overrideBy
      properties:
        reason:
          type: string
          description: Justification for overriding the control
        overrideBy:
          type: string
          description: Email or identifier of person overriding
    BulkValidateControlsRequest:
      type: object
      required:
        - phi_id
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_status:
          type: string
          description: New status for all controls
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
    BulkControlResult:
      type: object
      properties:
        created:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/MasterControl"
              - $ref: "#/components/schemas/ControlInstance"
          description: Successfully created controls
        failures:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
                description: Index in request array
              error:
                type: string
                description: Error message
          description: Failed control creations
        summary:
          type: object
          properties:
            total_requested:
              type: integer
              description: Total controls requested
            created_count:
              type: integer
              description: Number successfully created
            failed_count:
              type: integer
              description: Number of failures
    ControlProgress:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        phase_name:
          type: string
          description: Phase name
        total_controls:
          type: integer
          description: Total number of controls
        validated_controls:
          type: integer
          description: Number of validated controls
        pending_controls:
          type: integer
          description: Number of pending controls
        overridden_controls:
          type: integer
          description: Number of overridden controls
        critical_controls:
          type: integer
          description: Total critical controls
        critical_validated:
          type: integer
          description: Number of validated critical controls
        progress_percentage:
          type: number
          format: double
          description: Overall progress percentage
        critical_progress_percentage:
          type: number
          format: double
          description: Critical controls progress percentage
        validation_status:
          type: string
          description: Overall validation status (COMPLETE, IN_PROGRESS, NOT_STARTED)
          enum:
            - COMPLETE
            - IN_PROGRESS
            - NOT_STARTED
    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment ID
        body:
          type: string
          description: Comment text content
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User ID who created the comment
        createdByName:
          type: string
          description: Name of the user who created the comment
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          description: User ID who last updated the comment
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance this comment belongs to
    CommentCreate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)
    CommentUpdate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Updated comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)
    CommentCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the creation was successful
        commentId:
          type: integer
          description: ID of the created comment
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
    CommentUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message
    CommentDeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message
    Status:
      type: object
      properties:
        sts_id:
          type: integer
          description: Status ID
        sts_code:
          type: string
          description: Status code
        sts_name:
          type: string
          description: Status name
        sts_description:
          type: string
          description: Status description
        sts_type:
          type: string
          description: Entity type this status applies to
        sts_color:
          type: string
          pattern: ^#[0-9a-fA-F]{6}$
          description: Hex color code for the status
        sts_sort_order:
          type: integer
          description: Sort order for display
    IterationType:
      type: object
      properties:
        itt_code:
          type: string
          maxLength: 20
          pattern: ^[a-zA-Z0-9_-]+$
          description: Unique iteration type code (alphanumeric, underscore, dash only)
          example: PILOT
        itt_name:
          type: string
          maxLength: 100
          description: Display name for the iteration type
          example: Pilot Migration
        itt_description:
          type: string
          maxLength: 500
          nullable: true
          description: Optional detailed description of the iteration type
          example: Small scale pilot migration for testing purposes
        itt_color:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          nullable: true
          description: Hex color code for visual differentiation in UI
          example: "#6B73FF"
        itt_icon:
          type: string
          maxLength: 50
          pattern: ^[a-zA-Z0-9_-]+$
          nullable: true
          description: Icon name for UI display (alphanumeric, underscore, dash only)
          example: pilot
        itt_display_order:
          type: integer
          description: Sort order for display purposes (lower numbers appear first)
          default: 0
          example: 1
        itt_active:
          type: boolean
          description: Whether the iteration type is active and available for selection
          default: true
          example: true
        created_by:
          type: string
          maxLength: 255
          description: User code who created this iteration type
          example: admin
        created_at:
          type: string
          format: date-time
          description: Timestamp when this iteration type was created
          example: "2024-01-01T12:00:00Z"
        updated_by:
          type: string
          maxLength: 255
          description: User code who last updated this iteration type
          example: admin
        updated_at:
          type: string
          format: date-time
          description: Timestamp when this iteration type was last updated
          example: "2024-01-01T12:00:00Z"
      required:
        - itt_code
        - itt_name
        - itt_display_order
        - itt_active
        - created_by
        - created_at
        - updated_by
        - updated_at
    MigrationType:
      type: object
      properties:
        mit_id:
          type: integer
          description: Unique migration type identifier (auto-generated primary key)
          example: 1
          readOnly: true
        mit_code:
          type: string
          maxLength: 20
          description: Unique migration type code for referencing and identification
          example: PILOT
        mit_name:
          type: string
          maxLength: 100
          description: Display name for the migration type
          example: Pilot Migration
        mit_description:
          type: string
          maxLength: 500
          nullable: true
          description: Optional detailed description of the migration type and its purpose
          example: Small scale pilot migration used for testing and validation purposes
        mit_color:
          type: string
          pattern: ^#[0-9A-Fa-f]{6}$
          nullable: true
          description: Hex color code for visual differentiation in UI components
          example: "#6B73FF"
        mit_icon:
          type: string
          maxLength: 50
          nullable: true
          description: Icon name for UI display and visual identification
          example: pilot
        mit_display_order:
          type: integer
          description: Sort order for display purposes (lower numbers appear first)
          default: 0
          example: 1
        mit_active:
          type: boolean
          description: Whether the migration type is active and available for selection
          default: true
          example: true
        created_by:
          type: string
          maxLength: 255
          description: User code who created this migration type
          example: admin
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Timestamp when this migration type was created
          example: "2024-01-01T12:00:00Z"
          readOnly: true
        updated_by:
          type: string
          maxLength: 255
          description: User code who last updated this migration type
          example: admin
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp when this migration type was last updated
          example: "2024-01-01T12:00:00Z"
          readOnly: true
      required:
        - mit_id
        - mit_code
        - mit_name
        - mit_display_order
        - mit_active
        - created_by
        - created_at
        - updated_by
        - updated_at
    UserContext:
      type: object
      properties:
        userId:
          type: integer
          description: User ID
        username:
          type: string
          description: Username/code
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        isAdmin:
          type: boolean
          description: Whether the user has admin privileges
        roleId:
          type: integer
          description: Role ID (1=ADMIN, 2=NORMAL, 3=PILOT)
        role:
          type: string
          enum:
            - ADMIN
            - NORMAL
            - PILOT
          description: Role code - ADMIN (full system access), NORMAL (standard user), PILOT (execution privileges)
        isActive:
          type: boolean
          description: Whether the user account is active
    TeamCreateRequest:
      type: object
      required:
        - tms_name
        - tms_email
      properties:
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team
    MasterPlan:
      type: object
      properties:
        plm_id:
          type: string
          format: uuid
          description: Unique identifier for the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        tms_name:
          type: string
          description: Name of the owning team
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          type: string
          description: Current status of the master plan
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the plan
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
    MasterPlanInput:
      type: object
      required:
        - tms_id
        - plm_name
        - plm_status
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description:
            Initial status of the master plan - accepts either status name (string) or status ID (integer) for
            flexible input handling
          example: PLANNING
    MasterPlanUpdate:
      type: object
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description:
            Status of the master plan - accepts either status name (string) or status ID (integer) for flexible
            input handling
          example: PLANNING
    PlanInstance:
      type: object
      properties:
        pli_id:
          type: string
          format: uuid
          description: Unique identifier for the plan instance
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan template
        plm_name:
          type: string
          description: Name of the master plan
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration this instance belongs to
        itr_name:
          type: string
          description: Name of the iteration
        mig_name:
          type: string
          description: Name of the migration
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description:
            Current status of the plan instance - accepts either status name (string) or status ID (integer) for
            flexible input handling
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        created_by:
          type: string
          description: User who created the plan instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
    PlanInstanceDetail:
      allOf:
        - $ref: "#/components/schemas/PlanInstance"
        - type: object
          properties:
            plm_description:
              type: string
              description: Description from master plan
    PlanInstanceInput:
      type: object
      required:
        - plm_id
        - ite_id
        - usr_id_owner
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan to instantiate
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration for this instance
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        pli_name:
          type: string
          description: Override name for the instance (optional)
        pli_description:
          type: string
          description: Override description for the instance (optional)
    PlanInstanceUpdate:
      type: object
      properties:
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description:
            Status of the plan instance - accepts either status name (string) or status ID (integer) for flexible
            input handling
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
    MasterSequence:
      type: object
      properties:
        sqm_id:
          type: string
          format: uuid
          description: Unique identifier for the master sequence
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        plm_name:
          type: string
          description: Name of the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this sequence
        tms_name:
          type: string
          description: Name of the owning team
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan
        sqm_status:
          type: string
          description: Current status of the master sequence
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the sequence
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
    CreateSequenceRequest:
      type: object
      required:
        - plm_id
        - sqm_name
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        tms_id:
          type: integer
          description: ID of the team that owns this sequence (auto-assigned from plan if not provided)
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan (auto-assigned as next available if not provided)
        sqm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "INACTIVE")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: DRAFT
          description: Initial status of the master sequence - accepts both string names and integer IDs
        planned_start_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-15"
          description: Planned start date - supports multiple date formats with automatic conversion
        planned_end_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-20"
          description: Planned end date - supports multiple date formats with automatic conversion
    UpdateSequenceOrderRequest:
      type: object
      required:
        - sqm_order
      properties:
        sqm_order:
          type: integer
          description: New display order for the sequence
    SequenceInstance:
      type: object
      properties:
        sqi_id:
          type: string
          format: uuid
          description: Unique identifier for the sequence instance
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence template
        sqm_name:
          type: string
          description: Name of the master sequence
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance this sequence belongs to
        pli_name:
          type: string
          description: Name of the plan instance
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration
        itr_name:
          type: string
          description: Name of the iteration
        mig_id:
          type: string
          format: uuid
          description: ID of the migration
        mig_name:
          type: string
          description: Name of the migration
        sqi_name:
          type: string
          description: Name of the sequence instance
        sqi_description:
          type: string
          description: Description of the sequence instance
        sqi_order:
          type: integer
          description: Display order within the plan instance
        sqi_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "IN_PROGRESS", "COMPLETED")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: IN_PROGRESS
          description: Current status - accepts both string names and integer IDs for flexible input
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        tms_name:
          type: string
          description: Name of the team
        created_by:
          type: string
          description: User who created the sequence instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp (PostgreSQL timestamp type)
        phase_count:
          type: integer
          description: Number of phases in this sequence instance (computed field)
        step_count:
          type: integer
          description: Total number of steps across all phases (computed field)
        actual_start_date:
          type: string
          format: date
          description: Actual start date (PostgreSQL date type)
        actual_end_date:
          type: string
          format: date
          description: Actual end date (PostgreSQL date type)
        completion_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Completion percentage based on completed steps (computed field)
    CreateSequenceInstanceRequest:
      type: object
      required:
        - sqm_id
        - pli_id
        - usr_id_owner
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence to instantiate
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance for this sequence
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        sqi_name:
          type: string
          description: Override name for the sequence instance (optional)
        sqi_description:
          type: string
          description: Override description for the sequence instance (optional)
        sqi_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "IN_PROGRESS", "COMPLETED")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: DRAFT
          description: Initial status - accepts both string names and integer IDs for flexible assignment
        actual_start_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-15"
          description: Actual start date - supports multiple date formats with automatic conversion
        actual_end_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-20"
          description: Actual end date - supports multiple date formats with automatic conversion
    User:
      type: object
      properties:
        usr_id:
          type: integer
          description: Unique identifier for the user
        usr_code:
          type: string
          description: The user's unique 3-letter code
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active
        rls_id:
          type: integer
          description: Role ID
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        teams:
          type: array
          items:
            type: object
            properties:
              tms_id:
                type: integer
              tms_name:
                type: string
              tms_description:
                type: string
              tms_email:
                type: string
                format: email
          description: Teams the user belongs to
    UserInput:
      type: object
      required:
        - usr_first_name
        - usr_last_name
        - usr_is_admin
      properties:
        usr_code:
          type: string
          description: The user's unique 3-letter code
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active (defaults to true)
        rls_id:
          type: integer
          description: Role ID
    PlanInstanceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    SequenceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PhaseSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    SequenceWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        phases:
          type: array
          items:
            $ref: "#/components/schemas/PhaseWithSteps"
    PhaseWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepWithLabels"
    StepWithLabels:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: Formatted step code (e.g., "BGO-001")
        name:
          type: string
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - FAILED
        durationMinutes:
          type: integer
        ownerTeamId:
          type: integer
        ownerTeamName:
          type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    Environment:
      type: object
      properties:
        env_id:
          type: integer
          description: Unique identifier for the environment
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment
    EnvironmentWithCounts:
      allOf:
        - $ref: "#/components/schemas/Environment"
        - type: object
          properties:
            application_count:
              type: integer
              description: Number of applications associated with this environment
            iteration_count:
              type: integer
              description: Number of iterations associated with this environment
    EnvironmentCreateRequest:
      type: object
      required:
        - env_code
        - env_name
      properties:
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment
    EnvironmentDetails:
      allOf:
        - $ref: "#/components/schemas/EnvironmentWithCounts"
        - type: object
          properties:
            applications:
              type: array
              items:
                $ref: "#/components/schemas/Application"
              description: List of applications associated with this environment
            iterations:
              type: array
              items:
                $ref: "#/components/schemas/IterationWithRole"
              description: List of iterations associated with this environment
    Application:
      type: object
      properties:
        app_id:
          type: integer
          description: Unique identifier for the application
        app_code:
          type: string
          description: Application code
        app_name:
          type: string
          description: Name of the application
        app_description:
          type: string
          description: Description of the application
    IterationWithRole:
      allOf:
        - $ref: "#/components/schemas/IterationSummary"
        - type: object
          properties:
            role:
              $ref: "#/components/schemas/EnvironmentRole"
    EnvironmentRole:
      type: object
      properties:
        enr_id:
          type: integer
          description: Unique identifier for the environment role
        enr_code:
          type: string
          description: Role code (e.g., SOURCE, TARGET)
        enr_name:
          type: string
          description: Role name
        enr_description:
          type: string
          description: Role description
    PaginatedEnvironments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentWithCounts"
        total:
          type: integer
          description: Total number of environments
        page:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages
    RoleIterations:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/EnvironmentRole"
        iterations:
          type: array
          items:
            $ref: "#/components/schemas/IterationSummary"
    BlockingRelationshipsError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        blocking_relationships:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          description: Object containing arrays of blocking relationships by type
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message
    EmailTemplate:
      type: object
      properties:
        emt_id:
          type: string
          format: uuid
          description: Unique identifier for the email template
        emt_type:
          type: string
          enum:
            - STEP_OPENED
            - INSTRUCTION_COMPLETED
            - STEP_STATUS_CHANGED
            - CUSTOM
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active
        emt_created_date:
          type: string
          format: date-time
          description: Creation timestamp
        emt_updated_date:
          type: string
          format: date-time
          description: Last update timestamp
        emt_created_by:
          type: string
          description: Username who created the template
        emt_updated_by:
          type: string
          description: Username who last updated the template
    EmailTemplateCreate:
      type: object
      required:
        - emt_type
        - emt_name
        - emt_subject
        - emt_body_html
      properties:
        emt_type:
          type: string
          enum:
            - STEP_OPENED
            - INSTRUCTION_COMPLETED
            - STEP_STATUS_CHANGED
            - CUSTOM
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          default: true
          description: Whether the template is active
    EmailTemplateUpdate:
      type: object
      properties:
        emt_type:
          type: string
          enum:
            - STEP_OPENED
            - INSTRUCTION_COMPLETED
            - STEP_STATUS_CHANGED
            - CUSTOM
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    EnhancedError:
      type: object
      description: Enhanced error response with usage guidance (introduced in US-024)
      properties:
        error:
          type: string
          description: Error description
          example: Invalid comments endpoint usage
        message:
          type: string
          description: Helpful guidance message
          example: "To access comments, use: /rest/scriptrunner/latest/custom/steps/{stepInstanceId}/comments"
        example:
          type: string
          description: Concrete usage example
          example: /rest/scriptrunner/latest/custom/steps/f9aa535d-4d8b-447c-9d89-16494f678702/comments
    MasterPhase:
      type: object
      properties:
        phm_id:
          type: string
          format: uuid
          description: Unique identifier for the master phase
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor master phase
        step_count:
          type: integer
          description: Number of steps associated with this master phase
          readOnly: true
        instance_count:
          type: integer
          description: Number of phase instances created from this master phase
          readOnly: true
        phm_status:
          type: string
          description: Status of the master phase (typically 'ACTIVE')
          readOnly: true
        statusMetadata:
          type: object
          readOnly: true
          properties:
            sts_id:
              type: integer
              description: Status ID
            sts_name:
              type: string
              description: Status name
            sts_color:
              type: string
              description: Status display color for UI
            sts_type:
              type: string
              description: Status type ('Phase')
        sqm_name:
          type: string
          description: Name of the parent sequence
          readOnly: true
        plm_name:
          type: string
          description: Name of the parent plan
          readOnly: true
        tms_name:
          type: string
          description: Name of the associated team
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this phase
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this phase
    PhaseInstance:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Unique identifier for the phase instance
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase this instance is based on
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          type: integer
          description: Status ID (foreign key to status_sts table)
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          nullable: true
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          nullable: true
          description: Actual end time of the phase
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this instance
    ControlPoint:
      type: object
      properties:
        cti_id:
          type: string
          format: uuid
          description: Unique identifier for the control point instance
        phi_id:
          type: string
          format: uuid
          description: ID of the phase instance this control point belongs to
        cti_name:
          type: string
          description: Name of the control point
        cti_description:
          type: string
          description: Description of the control point
        cti_status:
          type: string
          description: Current status of the control point
        cti_type:
          type: string
          description: Type of control point (validation, checkpoint, etc.)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: ID of the business validator user
        is_overridden:
          type: boolean
          description: Whether the control point has been overridden
        override_reason:
          type: string
          nullable: true
          description: Reason for override if applicable
        override_by:
          type: string
          nullable: true
          description: User who performed the override
        override_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the override
    ControlPointValidation:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        validation_status:
          type: string
          description: Overall validation status (passed, failed, warning)
        total_controls:
          type: integer
          description: Total number of control points
        validated_controls:
          type: integer
          description: Number of validated control points
        failed_controls:
          type: integer
          description: Number of failed control points
        control_details:
          type: array
          items:
            type: object
            properties:
              cti_id:
                type: string
                format: uuid
                description: Control point instance ID
              cti_name:
                type: string
                description: Control point name
              status:
                type: string
                description: Individual control point status
              validation_result:
                type: string
                description: Validation result details
    PhaseProgress:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        progress_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Progress percentage (0-100)
    CreateMasterPhaseRequest:
      type: object
      required:
        - sqm_id
        - phm_name
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase
    UpdateMasterPhaseRequest:
      type: object
      properties:
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase
    CreatePhaseInstanceRequest:
      type: object
      required:
        - phm_id
        - sqi_id
      properties:
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase to instantiate
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name override for the phase instance
        phi_description:
          type: string
          description: Description override for the phase instance
        phi_status:
          oneOf:
            - type: string
              description: Status name (e.g., 'PLANNING', 'IN_PROGRESS', 'COMPLETED')
            - type: integer
              description: Status ID (numeric identifier)
          description:
            "Initial status of the phase instance. Supports flexible input:

            - String names: 'PLANNING', 'IN_PROGRESS', 'COMPLETED', 'ON_HOLD', 'CANCELLED'

            - Integer IDs: Numeric status identifiers from status_sts table

            Repository automatically resolves string names to appropriate IDs.

            "
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance
    UpdatePhaseInstanceRequest:
      type: object
      properties:
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          oneOf:
            - type: string
              description: Status name (e.g., 'PLANNING', 'IN_PROGRESS', 'COMPLETED')
            - type: integer
              description: Status ID (numeric identifier)
          description: "Status of the phase instance. Supports flexible input:

            - String names: 'PLANNING', 'IN_PROGRESS', 'COMPLETED', 'ON_HOLD', 'CANCELLED'

            - Integer IDs: Numeric status identifiers from status_sts table

            Repository automatically resolves string names to appropriate IDs.

            "
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          description: Actual end time of the phase
    UpdateControlPointRequest:
      type: object
      properties:
        cti_status:
          type: string
          description: New status for the control point
        usr_id_it_validator:
          type: integer
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          description: ID of the business validator user
    OverrideControlPointRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for the override
          default: Override requested
        overrideBy:
          type: string
          description: User performing the override
          default: system
    ReorderMasterPhasesRequest:
      type: object
      required:
        - sequenceId
        - phaseOrderMap
      properties:
        sequenceId:
          type: string
          format: uuid
          description: ID of the master sequence containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase UUID to new order position
          example:
            123e4567-e89b-12d3-a456-426614174000: 1
            456e7890-e89b-12d3-a456-426614174001: 2
    ReorderPhaseInstancesRequest:
      type: object
      required:
        - sequenceInstanceId
        - phaseOrderMap
      properties:
        sequenceInstanceId:
          type: string
          format: uuid
          description: ID of the sequence instance containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase instance UUID to new order position
          example:
            789e0123-e89b-12d3-a456-426614174002: 1
            012e3456-e89b-12d3-a456-426614174003: 2
    MovePhaseRequest:
      type: object
      required:
        - newOrder
      properties:
        newOrder:
          type: integer
          description: New order position for the phase
          minimum: 1
    PaginatedIterations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Iteration"
        pagination:
          $ref: "#/components/schemas/PaginationMetadata"
        filters:
          type: object
          description: Applied filters for the request
          properties:
            search:
              type: string
            migrationId:
              type: string
              format: uuid
    Iteration:
      type: object
      properties:
        ite_id:
          type: string
          format: uuid
          description: Unique identifier for the iteration
        ite_name:
          type: string
          description: Name of the iteration
        ite_description:
          type: string
          description: Description of the iteration
        mig_id:
          type: string
          format: uuid
          description: Migration ID this iteration belongs to
        migration_name:
          type: string
          description: Name of the parent migration
        master_plan_name:
          type: string
          description: Name of the master plan associated with this iteration
        itt_code:
          type: string
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          format: date-time
          description: Static cutover date
        ite_dynamic_cutover_date:
          type: string
          format: date-time
          description: Dynamic cutover date
        ite_status:
          type: integer
          description: Status ID of the iteration
        status_metadata:
          $ref: "#/components/schemas/StatusMetadata"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        created_by:
          type: string
          description: Username who created the iteration
        updated_by:
          type: string
          description: Username who last updated the iteration
    CreateIterationRequest:
      type: object
      description:
        "Request to create a new iteration. Supports flexible field naming:

        - Name: Use either 'ite_name' or 'name'

        - Migration ID: Use either 'mig_id' or 'migrationId'

        At least one name field and one migration ID field must be provided.

        "
      anyOf:
        - required:
            - ite_name
            - mig_id
        - required:
            - ite_name
            - migrationId
        - required:
            - name
            - mig_id
        - required:
            - name
            - migrationId
      properties:
        ite_name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the iteration (required if 'name' not provided, unique within migration)
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Alternative field name for iteration name (required if 'ite_name' not provided)
        ite_description:
          type: string
          maxLength: 1000
          description: Description of the iteration
        mig_id:
          type: string
          format: uuid
          description: Migration ID this iteration belongs to (required if 'migrationId' not provided)
        migrationId:
          type: string
          format: uuid
          description: Alternative field name for migration ID (required if 'mig_id' not provided)
        itt_code:
          type: string
          maxLength: 50
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          description: Static cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
        ite_dynamic_cutover_date:
          type: string
          description: Dynamic cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
    UpdateIterationRequest:
      type: object
      description:
        "Request to update an iteration. Supports flexible field naming:

        - Name: Use either 'ite_name' or 'name'

        Only provided fields are updated (partial updates supported).

        "
      properties:
        ite_name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the iteration (alternative to 'name')
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Alternative field name for iteration name (alternative to 'ite_name')
        ite_description:
          type: string
          maxLength: 1000
          description: Description of the iteration
        itt_code:
          type: string
          maxLength: 50
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          description: Static cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
        ite_dynamic_cutover_date:
          type: string
          description: Dynamic cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
    StatusInfo:
      type: object
      properties:
        id:
          type: integer
          description: Unique status ID
        name:
          type: string
          description: Status name (e.g., PLANNING, IN_PROGRESS, COMPLETED)
        color:
          type: string
          description: Hex color code for UI display
        type:
          type: string
          description: Entity type this status applies to
      example:
        id: 1
        name: PLANNING
        color: "#FFA500"
        type: Migration
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Main error message
        message:
          type: string
          description: Additional error details or context
        details:
          type: string
          description: Technical details about the error
        sqlState:
          type: string
          description: SQL state code for database errors
      example:
        error: Iteration name is required
        message: Validation failed
        sqlState: "23000"
    PaginatedMasterSteps:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/EnhancedMasterStep"
        totalElements:
          type: integer
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        pageNumber:
          type: integer
          description: Current page number (1-based)
        pageSize:
          type: integer
          description: Number of items per page
        hasNext:
          type: boolean
          description: Whether there are more pages available
        hasPrevious:
          type: boolean
          description: Whether there are previous pages
        sortField:
          type: string
          description: Field used for sorting
        sortDirection:
          type: string
          enum:
            - asc
            - desc
          description: Sort direction applied
    EnhancedMasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Master step ID
        stm_name:
          type: string
          description: Step name
        stm_description:
          type: string
          description: Step description
        stm_order:
          type: integer
          description: Step order within phase
        instruction_count:
          type: integer
          description: Number of associated instructions
        instance_count:
          type: integer
          description: Number of step instances
        plm_name:
          type: string
          description: Plan master name
        sqm_name:
          type: string
          description: Sequence master name
        phm_name:
          type: string
          description: Phase master name
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
    CreateMasterStepRequest:
      type: object
      required:
        - phm_id
        - tms_id_owner
        - stt_code
        - stm_number
        - stm_name
        - enr_id_target
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID (required)
          example: f9aa535d-4d8b-447c-9d89-16494f678702
        tms_id_owner:
          type: integer
          description: Owning team ID (required)
          example: 15
        stt_code:
          type: string
          description: Step type code (required)
          example: APP
        stm_number:
          type: integer
          description: Step number within phase (required)
          example: 101
        stm_name:
          type: string
          description: Step name/title (required)
          example: Deploy Application Components
        stm_description:
          type: string
          description: Detailed step description (optional)
          example: Deploy all application components to target environment
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes (optional)
          example: 45
        enr_id_target:
          type: integer
          description: Target environment role ID (required)
          example: 3
        enr_id:
          type: integer
          description: Source environment role ID (optional)
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID for dependencies (optional)
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    UpdateMasterStepRequest:
      type: object
      description: All fields are optional for partial updates
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
          example: f9aa535d-4d8b-447c-9d89-16494f678702
        tms_id_owner:
          type: integer
          description: Owning team ID
          example: 18
        stt_code:
          type: string
          description: Step type code
          example: APP
        stm_number:
          type: integer
          description: Step number within phase
          example: 102
        stm_name:
          type: string
          description: Step name/title
          example: Deploy Application Components - Updated
        stm_description:
          type: string
          description: Detailed step description
          example: Deploy and validate all application components to target environment
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes
          example: 60
        enr_id_target:
          type: integer
          description: Target environment role ID
          example: 4
        enr_id:
          type: integer
          description: Source environment role ID
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID for dependencies
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    MasterStepResponse:
      type: object
      description: Complete master step details with computed fields and hierarchical context
      properties:
        stm_id:
          type: string
          format: uuid
          description: Master step ID
          example: f9aa535d-4d8b-447c-9d89-16494f678702
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        tms_id_owner:
          type: integer
          description: Owning team ID
          example: 15
        stt_code:
          type: string
          description: Step type code
          example: APP
        stm_number:
          type: integer
          description: Step number within phase
          example: 101
        stm_name:
          type: string
          description: Step name/title
          example: Deploy Application Components
        stm_description:
          type: string
          description: Detailed step description
          example: Deploy all application components to target environment
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes
          example: 45
        enr_id_target:
          type: integer
          description: Target environment role ID
          example: 3
        enr_id:
          type: integer
          description: Source environment role ID
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID
          example: null
        created_by:
          type: string
          description: User who created the step
          example: admin
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-08-27T10:30:00.000Z"
        updated_by:
          type: string
          description: User who last updated the step
          example: admin
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-27T11:15:00.000Z"
        phm_name:
          type: string
          description: Phase master name
          example: Pre-Migration Preparation
        sqm_name:
          type: string
          description: Sequence master name
          example: Infrastructure Preparation
        plm_name:
          type: string
          description: Plan master name
          example: Data Center Migration Plan
        owner_team_name:
          type: string
          description: Owning team name
          example: Infrastructure Team
        instruction_count:
          type: integer
          description: Number of associated instructions
          example: 5
        instance_count:
          type: integer
          description: Number of step instances
          example: 12
    StepsSummary:
      type: object
      properties:
        totalSteps:
          type: integer
          description: Total number of steps
        completedSteps:
          type: integer
          description: Number of completed steps
        inProgressSteps:
          type: integer
          description: Number of steps in progress
        pendingSteps:
          type: integer
          description: Number of pending steps
        completionPercentage:
          type: number
          format: float
          description: Overall completion percentage
        estimatedRemainingTime:
          type: integer
          description: Estimated remaining time in minutes
        byTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamStepSummary"
        byStatus:
          type: array
          items:
            $ref: "#/components/schemas/StatusStepSummary"
    TeamStepSummary:
      type: object
      properties:
        teamId:
          type: integer
          description: Team ID
        teamName:
          type: string
          description: Team name
        totalSteps:
          type: integer
          description: Total steps assigned to team
        completedSteps:
          type: integer
          description: Completed steps by team
        completionPercentage:
          type: number
          format: float
          description: Team completion percentage
    StatusStepSummary:
      type: object
      properties:
        statusId:
          type: integer
          description: Status ID
        statusName:
          type: string
          description: Status name
        count:
          type: integer
          description: Number of steps with this status
        percentage:
          type: number
          format: float
          description: Percentage of steps with this status
    StepsProgress:
      type: object
      properties:
        migrationId:
          type: string
          format: uuid
          description: Migration ID
        migrationName:
          type: string
          description: Migration name
        overallProgress:
          type: number
          format: float
          description: Overall progress percentage
        sequences:
          type: array
          items:
            $ref: "#/components/schemas/SequenceProgress"
        lastUpdated:
          type: string
          format: date-time
          description: Last update timestamp
    SequenceProgress:
      type: object
      properties:
        sequenceId:
          type: string
          format: uuid
          description: Sequence ID
        sequenceName:
          type: string
          description: Sequence name
        progress:
          type: number
          format: float
          description: Sequence progress percentage
        phases:
          type: array
          items:
            $ref: "#/components/schemas/StepPhaseProgress"
    StepPhaseProgress:
      type: object
      properties:
        phaseId:
          type: string
          format: uuid
          description: Phase ID
        phaseName:
          type: string
          description: Phase name
        progress:
          type: number
          format: float
          description: Phase progress percentage
        stepCount:
          type: integer
          description: Total number of steps in phase
        completedCount:
          type: integer
          description: Number of completed steps in phase
    StepsExportData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ExportedStepData"
        totalCount:
          type: integer
          description: Total number of exported steps
        exportedAt:
          type: string
          format: date-time
          description: Export timestamp
    ExportedStepData:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Step instance ID
        code:
          type: string
          description: Step code
        name:
          type: string
          description: Step name
        status:
          type: string
          description: Step status
        teamName:
          type: string
          description: Assigned team name
        sequenceName:
          type: string
          description: Sequence name
        phaseName:
          type: string
          description: Phase name
        durationMinutes:
          type: integer
          description: Duration in minutes
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    BulkStatusUpdate:
      type: object
      required:
        - stepIds
        - statusId
        - userId
      properties:
        stepIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of step instance IDs to update
        statusId:
          type: integer
          description: New status ID to apply
        userId:
          type: integer
          description: User ID for audit logging
    BulkTeamAssignment:
      type: object
      required:
        - stepIds
        - teamId
        - userId
      properties:
        stepIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of step instance IDs to assign
        teamId:
          type: integer
          description: Team ID to assign steps to
        userId:
          type: integer
          description: User ID for audit logging
    BulkStepReordering:
      type: object
      required:
        - steps
      properties:
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepReorderItem"
          description: Array of steps with new order positions
    StepReorderItem:
      type: object
      required:
        - id
        - newOrder
      properties:
        id:
          type: string
          format: uuid
          description: Step instance ID
        newOrder:
          type: integer
          description: New order position within phase
    BulkUpdateResponse:
      type: object
      properties:
        updated:
          type: array
          items:
            type: string
            format: uuid
          description: List of successfully updated item IDs
        failed:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: ID of the item that failed to update
              error:
                type: string
                description: Error message for this item
          description: List of items that failed to update
        summary:
          type: object
          properties:
            total:
              type: integer
              description: Total number of items processed
            updated:
              type: integer
              description: Number of successfully updated items
            failed:
              type: integer
              description: Number of failed updates
            message:
              type: string
              description: Summary message
          description: Summary statistics of the bulk operation
    JsonImportRequest:
      type: object
      required:
        - source
        - content
      properties:
        source:
          type: string
          description: Source filename or identifier
          example: migration-data-2025.json
          minLength: 1
          maxLength: 255
        content:
          type: string
          description: JSON content as string
          example:
            '{"steps": [{"title": "Configure Database", "instructions": [{"text": "Connect to production database",
            "order": 1}]}]}'
          minLength: 1
    BatchImportRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          description: Array of files to import as a batch
          minItems: 1
          maxItems: 50
          items:
            type: object
            required:
              - filename
              - content
            properties:
              filename:
                type: string
                description: Filename for this file
                example: migration-phase-1.json
                minLength: 1
                maxLength: 255
              content:
                type: string
                description: JSON content as string
                example: '{"steps": [{"title": "Phase 1 Setup"}]}'
                minLength: 1
    AllEntitiesCsvRequest:
      type: object
      required:
        - teams
        - users
        - applications
        - environments
      properties:
        teams:
          type: string
          description: CSV content for teams import
          example: 'team_name,team_description,team_lead

            "Infrastructure Team","Manages servers","john.doe"

            '
        users:
          type: string
          description: CSV content for users import
          example: 'username,display_name,email,role

            "john.doe","John Doe","john@company.com","admin"

            '
        applications:
          type: string
          description: CSV content for applications import
          example: 'app_name,app_description,app_owner

            "Web Portal","Main application","dev-team"

            '
        environments:
          type: string
          description: CSV content for environments import
          example: 'env_name,env_description,env_type

            "Production","Live environment","PROD"

            '
    MasterPlanRequest:
      type: object
      required:
        - planName
      properties:
        planName:
          type: string
          description: Name of the master plan (must be unique)
          example: Migration Plan Alpha
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: Optional description of the master plan
          example: High-level description of the migration plan
          maxLength: 500
        userId:
          type: string
          description: Optional user ID (defaults to current user)
          example: admin
          maxLength: 50
    RollbackRequest:
      type: object
      properties:
        reason:
          type: string
          description: Optional reason for the rollback
          example: Data validation failed after import completion
          maxLength: 1000
    BatchStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: New status for the batch
          enum:
            - COMPLETED
            - FAILED
            - IN_PROGRESS
          example: COMPLETED
        statistics:
          type: object
          description: Optional statistics for the batch
          properties:
            recordsProcessed:
              type: integer
              description: Number of records processed
              example: 150
              minimum: 0
            successCount:
              type: integer
              description: Number of successful records
              example: 148
              minimum: 0
            errorCount:
              type: integer
              description: Number of failed records
              example: 2
              minimum: 0
    JsonImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the import was successful
          example: true
        source:
          type: string
          description: Source filename that was imported
          example: migration-data-2025.json
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier for tracking
          example: 550e8400-e29b-41d4-a716-446655440000
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"
        errors:
          type: array
          description: Array of error messages (if any)
          items:
            type: string
          example: []
        warnings:
          type: array
          description: Array of warning messages (if any)
          items:
            type: string
          example: []
    BatchImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the batch import was successful
          example: true
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier for tracking
          example: 550e8400-e29b-41d4-a716-446655440001
        filesProcessed:
          type: integer
          description: Number of files processed in the batch
          example: 2
          minimum: 0
        overallStatistics:
          type: object
          description: Aggregated statistics for the entire batch
          properties:
            totalRecords:
              type: integer
              description: Total records across all files
              example: 50
              minimum: 0
            successCount:
              type: integer
              description: Total successful records
              example: 48
              minimum: 0
            errorCount:
              type: integer
              description: Total failed records
              example: 2
              minimum: 0
        fileResults:
          type: array
          description: Individual results for each file in the batch
          items:
            type: object
            properties:
              filename:
                type: string
                description: Name of the file
                example: migration-phase-1.json
              success:
                type: boolean
                description: Whether this file was processed successfully
                example: true
              statistics:
                $ref: "#/components/schemas/ImportStatisticsData"
              errors:
                type: array
                description: Errors specific to this file
                items:
                  type: string
                example: []
    CsvImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the CSV import was successful
          example: true
        source:
          type: string
          description: Source identifier for the import
          example: teams_import.csv
        recordsProcessed:
          type: integer
          description: Number of records processed from CSV
          example: 15
          minimum: 0
        recordsImported:
          type: integer
          description: Number of records successfully imported
          example: 13
          minimum: 0
        recordsSkipped:
          type: integer
          description: Number of records skipped due to validation
          example: 2
          minimum: 0
        errors:
          type: array
          description: Array of error messages (if any)
          items:
            type: string
          example: []
    MasterPlanResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the master plan creation was successful
          example: true
        planId:
          type: string
          format: uuid
          description: Unique identifier for the created plan
          example: 550e8400-e29b-41d4-a716-446655440012
        message:
          type: string
          description: Success message
          example: Master Plan configuration created successfully
        batchId:
          type: string
          format: uuid
          description: Associated batch identifier for audit trail
          example: 550e8400-e29b-41d4-a716-446655440013
        planName:
          type: string
          description: Name of the created plan
          example: Migration Plan Alpha
        description:
          type: string
          description: Plan description (if provided)
          example: High-level description of the migration plan
        createdBy:
          type: string
          description: User who created the plan
          example: admin
    RollbackResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the rollback was successful
          example: true
        message:
          type: string
          description: Rollback completion message
          example: Import batch successfully rolled back
        batchId:
          type: string
          format: uuid
          description: Batch identifier that was rolled back
          example: 550e8400-e29b-41d4-a716-446655440000
        rollbackActions:
          type: array
          description: List of rollback actions performed
          items:
            type: string
          example:
            - Deleted 25 staging steps
            - Deleted 75 staging instructions
        reason:
          type: string
          description: Reason for rollback (if provided)
          example: Data validation failed after import completion
        rolledBackBy:
          type: string
          description: User who performed the rollback
          example: admin
        rollbackDate:
          type: string
          format: date-time
          description: Timestamp when rollback was performed
          example: "2025-09-03T14:30:15.123Z"
    BatchStatusUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the status update was successful
          example: true
        message:
          type: string
          description: Status update confirmation message
          example: Batch status updated successfully
        batchId:
          type: string
          format: uuid
          description: Batch identifier that was updated
          example: 550e8400-e29b-41d4-a716-446655440000
        newStatus:
          type: string
          description: The new status that was set
          example: COMPLETED
        updatedBy:
          type: string
          description: User who performed the update
          example: admin
        updateDate:
          type: string
          format: date-time
          description: Timestamp when update was performed
          example: "2025-09-03T14:30:15.123Z"
    ImportHistoryResponse:
      type: object
      properties:
        history:
          type: array
          description: Array of import batch history records
          items:
            $ref: "#/components/schemas/ImportHistoryRecord"
    ImportHistoryRecord:
      type: object
      properties:
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        source:
          type: string
          description: Source identifier for the import
          example: migration-data-2025.json
        importType:
          type: string
          description: Type of import operation
          enum:
            - JSON_IMPORT
            - CSV_IMPORT
            - BATCH_IMPORT
            - MASTER_PLAN
          example: JSON_IMPORT
        status:
          type: string
          description: Current status of the import batch
          enum:
            - COMPLETED
            - FAILED
            - IN_PROGRESS
            - ROLLED_BACK
          example: COMPLETED
        userId:
          type: string
          description: User who initiated the import
          example: admin
        startTime:
          type: string
          format: date-time
          description: When the import started
          example: "2025-01-15T10:30:00Z"
        endTime:
          type: string
          format: date-time
          description: When the import completed (if finished)
          example: "2025-01-15T10:32:15Z"
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"
    ImportBatchDetails:
      type: object
      properties:
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        source:
          type: string
          description: Source identifier for the import
          example: migration-data-2025.json
        importType:
          type: string
          description: Type of import operation
          example: JSON_IMPORT
        status:
          type: string
          description: Current status of the import batch
          example: COMPLETED
        userId:
          type: string
          description: User who initiated the import
          example: admin
        startTime:
          type: string
          format: date-time
          description: When the import started
          example: "2025-01-15T10:30:00Z"
        endTime:
          type: string
          format: date-time
          description: When the import completed
          example: "2025-01-15T10:32:15Z"
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"
        metadata:
          type: object
          description: Additional metadata about the batch
          additionalProperties: true
    ImportStatistics:
      type: object
      properties:
        totalBatches:
          type: integer
          description: Total number of import batches
          example: 25
          minimum: 0
        successfulBatches:
          type: integer
          description: Number of successful batches
          example: 23
          minimum: 0
        failedBatches:
          type: integer
          description: Number of failed batches
          example: 2
          minimum: 0
        rolledBackBatches:
          type: integer
          description: Number of rolled back batches
          example: 1
          minimum: 0
        totalRecordsProcessed:
          type: integer
          description: Total records processed across all batches
          example: 1250
          minimum: 0
        totalRecordsImported:
          type: integer
          description: Total records successfully imported
          example: 1200
          minimum: 0
        averageProcessingTime:
          type: number
          format: float
          description: Average processing time per batch in seconds
          example: 45.2
          minimum: 0
        successRate:
          type: number
          format: float
          description: Overall success rate as percentage (0-100)
          example: 92.0
          minimum: 0
          maximum: 100
        lastImportDate:
          type: string
          format: date-time
          description: Timestamp of the most recent import
          example: "2025-09-03T14:30:15.123Z"
        byImportType:
          type: array
          description: Statistics broken down by import type
          items:
            type: object
            properties:
              importType:
                type: string
                description: Type of import
                example: JSON_IMPORT
              count:
                type: integer
                description: Number of batches of this type
                example: 15
                minimum: 0
              successRate:
                type: number
                format: float
                description: Success rate for this type
                example: 95.0
                minimum: 0
                maximum: 100
    ImportStatisticsData:
      type: object
      properties:
        recordsProcessed:
          type: integer
          description: Number of records processed
          example: 25
          minimum: 0
        successCount:
          type: integer
          description: Number of successful records
          example: 25
          minimum: 0
        errorCount:
          type: integer
          description: Number of failed records
          example: 0
          minimum: 0
    ImportQueueRequest:
      type: object
      required:
        - configuration
      properties:
        importType:
          type: string
          default: COMPLETE_IMPORT
          enum:
            - COMPLETE_IMPORT
            - PARTIAL_IMPORT
            - CSV_IMPORT
            - JSON_IMPORT
          description: Type of import operation
          example: COMPLETE_IMPORT
        priority:
          type: integer
          default: 5
          minimum: 1
          maximum: 10
          description: Import priority (1=highest, 10=lowest)
          example: 5
        configuration:
          type: object
          description: Import configuration settings
          properties:
            source:
              type: string
              description: Data source identifier
              example: migration-data-batch.json
            content:
              type: string
              description: Import content or file path
              example: '{"steps": [{"title": "Database Setup"}]}'
            entities:
              type: array
              items:
                type: string
              description: Entity types to import
              example:
                - teams
                - users
                - applications
            batchSize:
              type: integer
              default: 1000
              description: Processing batch size
              example: 1000
        userId:
          type: string
          default: system
          description: User initiating the import
          example: admin
    ImportQueueSubmissionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the request was successfully queued
          example: true
        requestId:
          type: string
          format: uuid
          description: Unique import request identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        queuePosition:
          type: integer
          description: Current position in queue
          example: 3
        estimatedWaitTime:
          type: integer
          description: Estimated wait time in seconds
          example: 180
        estimatedDuration:
          type: integer
          description: Estimated import duration in seconds
          example: 300
        priority:
          type: integer
          description: Assigned priority level
          example: 5
    ImportQueueStatusResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Status retrieval timestamp
          example: "2025-09-04T14:30:00.000Z"
        queue:
          type: object
          description: Queue status information
          properties:
            totalRequests:
              type: integer
              description: Total requests in queue
              example: 5
            activeImports:
              type: integer
              description: Currently executing imports
              example: 2
            queuedRequests:
              type: integer
              description: Pending requests
              example: 3
            completedToday:
              type: integer
              description: Imports completed today
              example: 15
        resources:
          type: object
          description: Resource utilization
          properties:
            activeLocks:
              type: array
              items:
                type: object
                properties:
                  resourceId:
                    type: string
                    example: db_connection_1
                  lockedBy:
                    type: string
                    format: uuid
                    example: 550e8400-e29b-41d4-a716-446655440000
                  lockedAt:
                    type: string
                    format: date-time
                    example: "2025-09-04T14:25:00.000Z"
            memoryUtilization:
              type: number
              description: Memory utilization percentage
              example: 65.5
            cpuUtilization:
              type: number
              description: CPU utilization percentage
              example: 42.8
        system:
          type: object
          description: System status
          properties:
            healthy:
              type: boolean
              description: Overall system health
              example: true
            throughput:
              type: number
              description: Recent throughput (requests/minute)
              example: 12.5
            averageWaitTime:
              type: integer
              description: Average wait time in seconds
              example: 120
        recommendations:
          type: array
          items:
            type: string
          description: System optimization recommendations
          example:
            - System operating within normal parameters
    ImportRequestStatusResponse:
      type: object
      properties:
        requestId:
          type: string
          format: uuid
          description: Import request identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        status:
          type: string
          enum:
            - QUEUED
            - IN_PROGRESS
            - COMPLETED
            - FAILED
            - CANCELLED
          description: Current request status
          example: IN_PROGRESS
        priority:
          type: integer
          description: Request priority
          example: 5
        queuePosition:
          type: integer
          description: Current position in queue (null if not queued)
          example: null
        progress:
          type: object
          description: Import progress details
          properties:
            percentage:
              type: number
              description: Completion percentage
              example: 75.5
            recordsProcessed:
              type: integer
              description: Records processed so far
              example: 755
            totalRecords:
              type: integer
              description: Total records to process
              example: 1000
            startedAt:
              type: string
              format: date-time
              example: "2025-09-04T14:20:00.000Z"
            estimatedCompletion:
              type: string
              format: date-time
              example: "2025-09-04T14:35:00.000Z"
    CancelRequestBody:
      type: object
      properties:
        reason:
          type: string
          default: User requested cancellation
          description: Cancellation reason
          example: Resource constraints detected
    CancelRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether cancellation was successful
          example: true
        requestId:
          type: string
          format: uuid
          description: Cancelled request identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        message:
          type: string
          description: Cancellation confirmation message
          example: Import request cancelled successfully
        cancelledAt:
          type: string
          format: date-time
          description: Cancellation timestamp
          example: "2025-09-04T14:30:00.000Z"
        reason:
          type: string
          description: Cancellation reason
          example: Resource constraints detected
    CreateScheduleRequest:
      type: object
      required:
        - scheduleName
        - scheduledTime
        - importConfiguration
      properties:
        scheduleName:
          type: string
          description: Name for the scheduled import
          example: Daily Team Data Sync
        description:
          type: string
          description: Optional description
          example: Automated daily synchronization of team data
        scheduledTime:
          type: integer
          format: int64
          description: Scheduled execution time (Unix timestamp in milliseconds)
          example: 1725465600000
        recurring:
          type: boolean
          default: false
          description: Whether this is a recurring schedule
          example: true
        recurringPattern:
          type: string
          description: Cron-like recurring pattern (required if recurring=true)
          example: 0 2 * * *
        priority:
          type: integer
          default: 5
          minimum: 1
          maximum: 10
          description: Schedule priority
          example: 3
        importConfiguration:
          type: object
          description: Import configuration for scheduled execution
          properties:
            importType:
              type: string
              example: CSV_IMPORT
            source:
              type: string
              example: scheduled-teams-export.csv
            entities:
              type: array
              items:
                type: string
              example:
                - teams
                - users
        userId:
          type: string
          default: system
          description: User creating the schedule
          example: admin
    CreateScheduleResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether schedule was created successfully
          example: true
        scheduleId:
          type: string
          format: uuid
          description: Created schedule identifier
          example: 550e8400-e29b-41d4-a716-446655440001
        scheduleName:
          type: string
          description: Name of created schedule
          example: Daily Team Data Sync
        scheduledTime:
          type: string
          format: date-time
          description: Next scheduled execution time
          example: "2025-09-05T02:00:00.000Z"
        nextExecution:
          type: string
          format: date-time
          description: Next execution time (for recurring schedules)
          example: "2025-09-06T02:00:00.000Z"
        message:
          type: string
          description: Success message
          example: Schedule created successfully
    ImportSchedulesResponse:
      type: object
      properties:
        schedules:
          type: array
          items:
            type: object
            properties:
              scheduleId:
                type: string
                format: uuid
                example: 550e8400-e29b-41d4-a716-446655440001
              scheduleName:
                type: string
                example: Daily Team Data Sync
              description:
                type: string
                example: Automated daily synchronization
              scheduledTime:
                type: string
                format: date-time
                example: "2025-09-05T02:00:00.000Z"
              recurring:
                type: boolean
                example: true
              recurringPattern:
                type: string
                example: 0 2 * * *
              status:
                type: string
                enum:
                  - ACTIVE
                  - INACTIVE
                  - COMPLETED
                  - FAILED
                example: ACTIVE
              lastExecution:
                type: string
                format: date-time
                example: "2025-09-04T02:00:00.000Z"
              nextExecution:
                type: string
                format: date-time
                example: "2025-09-05T02:00:00.000Z"
              createdBy:
                type: string
                example: admin
        statistics:
          type: object
          properties:
            totalSchedules:
              type: integer
              example: 5
            activeSchedules:
              type: integer
              example: 3
            recurringSchedules:
              type: integer
              example: 2
            schedulesExecutedToday:
              type: integer
              example: 4
    ImportResourcesResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Resource status retrieval time
          example: "2025-09-04T14:30:00.000Z"
        resourceLocks:
          type: array
          items:
            type: object
            properties:
              lockId:
                type: string
                format: uuid
                example: 550e8400-e29b-41d4-a716-446655440002
              resourceType:
                type: string
                example: DATABASE_CONNECTION
              resourceId:
                type: string
                example: db_connection_pool_1
              lockedBy:
                type: string
                format: uuid
                example: 550e8400-e29b-41d4-a716-446655440000
              lockedAt:
                type: string
                format: date-time
                example: "2025-09-04T14:25:00.000Z"
              expiresAt:
                type: string
                format: date-time
                example: "2025-09-04T14:55:00.000Z"
        systemStatus:
          type: object
          properties:
            memoryUtilizationPercent:
              type: number
              description: Current memory utilization
              example: 68.5
            cpuUtilizationPercent:
              type: number
              description: Current CPU utilization
              example: 45.2
            activeConnections:
              type: integer
              description: Active database connections
              example: 12
            maxConnections:
              type: integer
              description: Maximum allowed connections
              example: 50
            diskSpaceUsedPercent:
              type: number
              description: Disk space utilization
              example: 34.7
        queueStatistics:
          type: object
          properties:
            totalQueued:
              type: integer
              description: Total requests in queue
              example: 5
            highPriorityQueued:
              type: integer
              description: High priority requests queued
              example: 1
            averageWaitTime:
              type: integer
              description: Average wait time in seconds
              example: 120
            throughputLastHour:
              type: number
              description: Requests processed in last hour
              example: 25.5
        recommendations:
          type: array
          items:
            type: string
          description: Resource optimization recommendations
          example:
            - Resource utilization is within acceptable limits
    ImportError:
      type: object
      properties:
        error:
          type: string
          description: Main error message
          example: "Missing required fields: 'source' and 'content'"
        details:
          type: string
          description: Additional error details (optional)
          example: The 'source' field is required for audit trail tracking
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2025-09-03T14:30:15.123Z"
        batchId:
          type: string
          format: uuid
          description: Associated batch ID (if applicable)
          example: 550e8400-e29b-41d4-a716-446655440000
    RateLimitError:
      type: object
      description: Rate limit exceeded error with retry information
      properties:
        error:
          type: string
          example: Rate limit exceeded
        message:
          type: string
          example: Too many requests. Please try again later.
        retryAfter:
          type: string
          example: 60 seconds
        code:
          type: string
          example: RATE_LIMIT_EXCEEDED
      required:
        - error
        - message
        - retryAfter
        - code
    ValidationError:
      type: object
      description: Comprehensive validation error with SQL state mapping
      properties:
        error:
          type: string
          example: Validation failed
        details:
          type: string
          example: Required field 'env_code' is missing
        sqlState:
          type: string
          example: "23505"
          description: SQL state code for database constraint violations
        field:
          type: string
          example: env_code
          description: Field that caused the validation error
        code:
          type: string
          enum:
            - VALIDATION_ERROR
            - DUPLICATE_KEY
            - FOREIGN_KEY_VIOLATION
            - CONSTRAINT_VIOLATION
      required:
        - error
    ConflictError:
      type: object
      description: Conflict error with detailed relationship information
      properties:
        error:
          type: string
          example: Resource conflict
        message:
          type: string
          example: An environment with this code already exists
        sqlState:
          type: string
          example: "23505"
        blocking_relationships:
          type: object
          description: Detailed information about blocking relationships
          additionalProperties: true
      required:
        - error
        - message
    SecurityHeaders:
      type: object
      description: Enterprise security headers included in all responses
      properties:
        X-Content-Type-Options:
          type: string
          example: nosniff
        X-Frame-Options:
          type: string
          example: DENY
        X-XSS-Protection:
          type: string
          example: 1; mode=block
        Content-Security-Policy:
          type: string
          example: default-src 'self'
        Strict-Transport-Security:
          type: string
          example: max-age=31536000; includeSubDomains
    RateLimitHeaders:
      type: object
      description: Rate limiting information included in response headers
      properties:
        X-RateLimit-Limit:
          type: integer
          example: 60
          description: Request limit per window
        X-RateLimit-Remaining:
          type: integer
          example: 45
          description: Remaining requests in current window
        X-RateLimit-Reset:
          type: integer
          format: int64
          example: 1640995200000
          description: Unix timestamp when rate limit resets
        Retry-After:
          type: integer
          example: 60
          description: Seconds to wait before retrying (when rate limited)
    PerformanceMetrics:
      type: object
      description: Performance characteristics for API operations
      properties:
        response_time_target:
          type: string
          example: <150ms
        throughput_limit:
          type: string
          example: 60 requests/minute
        sla_tier:
          type: string
          enum:
            - standard
            - enterprise
            - premium
          example: enterprise
    AuthContext:
      type: object
      description: Authentication context information per ADR-042
      properties:
        userId:
          type: string
          example: user123
        username:
          type: string
          example: john.doe
        groups:
          type: array
          items:
            type: string
          example:
            - confluence-users
            - confluence-administrators
        roles:
          type: array
          items:
            type: string
          example:
            - ADMIN
            - USER
        sessionId:
          type: string
          example: session-abc123
      required:
        - userId
        - username
        - groups
  responses:
    Unauthorized:
      description: Authentication required - Confluence Basic Auth
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authentication required
              message:
                type: string
                example: Please provide valid Confluence credentials
    Forbidden:
      description: Access denied - insufficient privileges
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Access denied
              message:
                type: string
                example: Insufficient privileges for this operation
              requiredGroups:
                type: array
                items:
                  type: string
                example:
                  - confluence-administrators
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Resource not found
              message:
                type: string
                example: The requested resource does not exist
              resourceType:
                type: string
                example: Environment
              resourceId:
                type: string
                example: "123"
      headers:
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
    BadRequest:
      description: Bad request - validation error or malformed input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
      headers:
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
        X-Frame-Options:
          schema:
            type: string
            example: DENY
    Conflict:
      description: Resource conflict - duplicate or blocking relationships
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConflictError"
      headers:
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
    InternalServerError:
      description: Internal server error - database or system failure
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal server error
              message:
                type: string
                example: An unexpected error occurred
              timestamp:
                type: string
                format: date-time
                example: "2025-01-13T10:30:00Z"
              requestId:
                type: string
                example: req-abc123
      headers:
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
    RateLimit:
      description: Rate limit exceeded - too many requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RateLimitError"
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
            example: 60
        X-RateLimit-Remaining:
          schema:
            type: integer
            example: 0
        X-RateLimit-Reset:
          schema:
            type: integer
            format: int64
            example: 1640995200000
        Retry-After:
          schema:
            type: integer
            example: 60
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
        X-Frame-Options:
          schema:
            type: string
            example: DENY
  securitySchemes:
    ConfluenceUsers:
      type: http
      scheme: basic
      description:
        'HTTP Basic Authentication using Confluence username and password.

        All endpoints require membership in either the "confluence-users" or "confluence-administrators" group for access
        control.

        '
    ConfluenceAdministrators:
      type: http
      scheme: basic
      description:
        'HTTP Basic Authentication using Confluence username and password.

        Administrative endpoints require membership in the "confluence-administrators" group for enhanced access control.

        '
    ConfluenceBasicAuth:
      type: http
      scheme: basic
      description:
        'HTTP Basic Authentication using Confluence username and password.

        All endpoints require membership in the "confluence-users" group.

        Administrative endpoints require "confluence-administrators" group membership.


        Security Features:

        - Enterprise-grade rate limiting (60/min read, 30/min write)

        - Advanced client IP tracking with automatic blocking

        - Comprehensive audit logging for all operations

        - Security headers injection (CSP, HSTS, X-Frame-Options)

        - Input validation with XSS/CSRF protection


        Performance SLA:

        - Authentication: <50ms typical

        - Authorization: <30ms typical

        - Rate limit checking: <5ms overhead'
