openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.7.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.

    **Version 2.7.0 - September 3, 2025:**
    **Import API v2.0.0:** Added comprehensive data import operations with 14 endpoints for JSON and CSV imports.
    Supports single JSON file imports, batch JSON imports, CSV base entity imports (teams, users, applications, environments),
    and master plan configuration. Features include batch processing with audit trails, rollback capabilities with detailed
    action tracking, import history with filtering, comprehensive statistics, and CSV template downloads.
    Enhanced error handling with SQL state mappings (23505→409 Conflict, 23503→400 Bad Request).
    **Note:** CSV master-plan import (POST /import/csv/master-plan) returns HTTP 501 NOT_IMPLEMENTED pending development.
    All other endpoints fully operational with comprehensive validation and type safety (ADR-031).

    **Version 2.6.0 - August 27, 2025:**
    **URL Configuration API v1.0.0:** Added complete URL Configuration API with 4 endpoints for client-side URL construction.
    GET /api/v2/urlConfiguration for retrieving configuration with optional environment parameter support.
    GET /api/v2/urlConfiguration/health for service health monitoring with status reporting.
    POST /api/v2/urlConfiguration/clearCache for cache management and immediate configuration updates.
    GET /api/v2/urlConfiguration/debug for comprehensive troubleshooting with service diagnostics.
    Enhanced with comprehensive input validation, error handling, and security integration.
    Full environment-specific configuration support with defensive type checking patterns.

    **Version 2.5.0 - August 27, 2025:**
    **Steps API v2.3.0 Master Steps Management:** Added POST /steps/master endpoint for creating new master step templates.
    Added PUT /steps/master/{id} endpoint for updating existing master step templates. Enhanced Admin GUI with full CREATE 
    and EDIT functionality for Master Steps. Comprehensive validation with specific error messages for foreign key violations.
    Automatic audit field handling (created_by, updated_by, timestamps). SQL state error mapping with enhanced error responses.
    Complete master step details with computed fields (instruction_count, instance_count) and hierarchical context.

    **Version 2.4.1 - August 25, 2025:**
    **Controls API v2.1.0 Admin GUI Enhancement:** Enhanced GET /controls/master with comprehensive pagination, filtering, and sorting support.
    Added hierarchy fields (plm_name, sqm_name, phm_name, tms_name) to sort options for improved Admin GUI integration.
    Updated PUT /controls/master/{id} to support phm_id parameter for Phase Master association updates enabling EDIT mode functionality.
    Added 16 total sort fields including computed fields (instance_count, validation_count) for comprehensive control management.

    **Version 2.4.0 - August 25, 2025:**
    **Steps API v2.2.0 Integration:** Added 6 new Steps API endpoints - /steps/summary, /steps/progress, /steps/export,
    /steps/bulk/status, /steps/bulk/assign, /steps/bulk/reorder. Enhanced GET /steps/master with pagination, filtering, and sorting.
    Updated PUT /steps/{id}/status to support both statusId and status fields for modern and legacy compatibility.
    **Users API v2.1.0 Integration:** Enhanced /user/context endpoint with role mapping (ADMIN=1, NORMAL=2, PILOT=3).
    Added userCode query parameter support with debugging information. Improved error responses with SQL state codes.
    **New Bulk Operations:** Complete bulk management for step status updates, team assignments, and reordering.
    **Enhanced Admin GUI Support:** All APIs now provide comprehensive pagination, filtering, and sorting for admin interfaces.

    **Version 2.3.0 - August 25, 2025:**
    **Migration API Specification Sync:** Updated OpenAPI spec to reflect Migration API v2.3 documentation.
    **Sort Fields Enhanced:** Added mig_id, mig_type, iteration_count, plan_count to migration sort options.
    **Error Examples Expanded:** Comprehensive validation error examples for all Migration API endpoints.
    **Dashboard Validation:** Enhanced period validation for dashboard metrics endpoint.
    **Hierarchical Path Support:** Complete error handling for nested migration endpoints.

    **Version 2.2.0 - August 22, 2025:**
    **Migration API Enhanced:** POST /migrations now supports flexible status handling (string names OR integer IDs),
    automatic owner assignment with intelligent fallback, and enhanced date parsing (YYYY-MM-DD or ISO datetime).
    **Error Handling:** Comprehensive validation with specific error messages for all failure scenarios.
    **Backward Compatibility:** All existing API usage continues to work unchanged.
    **Implementation Status:** All documented features are fully implemented and tested.

    **Previous Updates:**
    **US-024 Complete:** Enhanced StepsAPI with improved comments endpoint error handling.
    **Features:** RESTful sub-resource pattern for comments with clear documentation and practical examples.
    **Validation:** HTTP Basic Auth, SQL state mappings (23503→400, 23505→409) confirmed.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Migrations
    description: Operations about migrations, iterations, sequences and phases.
  - name: Iterations
    description: Operations about iterations with full CRUD functionality and pagination.
  - name: Teams
    description: Operations about teams.
  - name: Environments
    description: Operations about environments and their associations.
  - name: Applications
    description: Operations about applications.
  - name: Labels
    description: Operations about labels and hierarchical filtering.
  - name: Plans
    description: Operations about plans, both master templates and instances.
  - name: Sequences
    description: Operations about sequences, both master templates and instances.
  - name: Phases
    description: Operations about phases, control points, ordering, and progress tracking.
  - name: Users
    description: Operations about users.
  - name: EmailTemplates
    description: Operations about email templates for notifications.
  - name: Steps
    description: Operations about steps, step instances, and status management.
  - name: Instructions
    description: Operations about instructions, completion tracking, and analytics.
  - name: Controls
    description: Operations about controls, validation checkpoints, and progress tracking.
  - name: Comments
    description: Operations about step comments and collaboration.
  - name: Statuses
    description: Operations about status management for different entity types.
  - name: WebApp
    description: Serves static web assets.
  - name: UrlConfiguration
    description: Operations about URL configuration management and client-side URL construction.
  - name: Import
    description: Operations for importing JSON data and CSV base entities with batch processing, rollback capabilities, and audit trails.

paths:
  # ==================== NEW V2 ITERATIONS API ====================
  /iterationsList:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all iterations with pagination
      description: |
        Retrieve all iterations with comprehensive filtering, pagination, and search capabilities.
        Supports sorting by multiple fields and migration-based filtering.
      tags: [Iterations]
      operationId: listIterations
      parameters:
        - name: page
          in: query
          description: Page number (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size (1-100, default 50)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: search
          in: query
          description: Search term for iteration names and descriptions (min 3 chars, max 100 chars)
          schema:
            type: string
            minLength: 3
            maxLength: 100
        - name: sort
          in: query
          description: Field to sort by
          schema:
            type: string
            enum:
              [
                ite_id,
                ite_name,
                itt_code,
                ite_static_cutover_date,
                ite_dynamic_cutover_date,
                ite_status,
                migration_name,
                master_plan_name,
                created_at,
                updated_at,
              ]
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: migrationId
          in: query
          description: Filter by migration ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Paginated list of iterations with metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedIterations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create new iteration
      security:
        - ConfluenceUsers: []
      description: |
        Create a new iteration with validation and automatic field assignment.
        Migration ID is required and must exist. Name uniqueness is enforced.
      tags: [Iterations]
      operationId: createIteration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIterationRequest"
            example:
              ite_name: "Phase 1 Iteration"
              mig_id: "123e4567-e89b-12d3-a456-426614174000"
              ite_static_cutover_date: "2025-08-15"
      responses:
        "201":
          description: Iteration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400":
          description: Validation error or invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Iteration name is required"
        "409":
          description: Conflict - iteration name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "An iteration with this name already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /iterationsList/{id}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get single iteration by ID
      description: Retrieve a specific iteration with full metadata and relationships
      tags: [Iterations]
      operationId: getIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Single iteration with metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400":
          description: Invalid iteration UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Invalid iteration UUID"
        "404":
          description: Iteration not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Iteration not found"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      summary: Update iteration
      description: |
        Update an existing iteration with validation.
        Only provided fields are updated, others remain unchanged.
      tags: [Iterations]
      operationId: updateIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIterationRequest"
            example:
              ite_name: "Updated Iteration Name"
              ite_description: "Updated description"
              ite_static_cutover_date: "2025-08-20"
      responses:
        "200":
          description: Iteration updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400":
          description: Invalid request data or UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Iteration not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Iteration not found"
        "409":
          description: Conflict - name already exists or constraint violation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      summary: Delete iteration
      description: |
        Delete an iteration. Will fail if the iteration has associated plans or is referenced by other resources.
      tags: [Iterations]
      operationId: deleteIteration
      parameters:
        - name: id
          in: path
          required: true
          description: Iteration UUID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Iteration deleted successfully
        "400":
          description: Invalid iteration UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Invalid iteration UUID"
        "404":
          description: Iteration not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Iteration not found"
        "409":
          description: Conflict - iteration has associated resources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Cannot delete iteration - it has associated plans or is referenced by other resources"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== NEW V2 STATUS API ====================
  /status:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get statuses by entity type
      description: |
        Retrieve status information for different entity types.
        Entity type is case-insensitive but normalized to proper case internally.
      tags: [Statuses]
      operationId: getStatuses
      parameters:
        - name: entityType
          in: query
          required: true
          description: Entity type to get statuses for
          schema:
            type: string
            enum:
              [
                Migration,
                Iteration,
                Plan,
                Sequence,
                Phase,
                Step,
                Control,
                Label,
                Environment,
                Team,
                Application,
                User,
              ]
          example: "Migration"
      responses:
        "200":
          description: Array of status objects with metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusInfo"
              example:
                - id: 1
                  name: "PLANNING"
                  color: "#FFA500"
                  type: "Migration"
                - id: 2
                  name: "IN_PROGRESS"
                  color: "#007BFF"
                  type: "Migration"
        "400":
          description: Missing or invalid entity type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Missing required parameter 'entityType'"
                message: "Valid entity types: Migration, Iteration, Plan, Sequence, Phase, Step, Control, Instruction"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations/{iteId}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get a specific iteration
      tags: [Migrations]
      operationId: getIterationById
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single iteration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Iteration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations/{iteId}/plan-instances:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all plan instances for an iteration
      tags: [Migrations]
      operationId: listPlanInstancesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All plan instances for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlanInstanceSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations/{iteId}/sequences:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all sequences for an iteration
      tags: [Migrations]
      operationId: listSequencesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All sequences for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations/{iteId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for an iteration
      tags: [Migrations]
      operationId: listPhasesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all sequences for a plan instance
      tags: [Migrations]
      operationId: listSequencesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All sequences for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceSummary"

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for a plan instance
      tags: [Migrations]
      operationId: listPhasesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences/{seqId}/phases:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all phases for a sequence
      tags: [Migrations]
      operationId: listPhasesForSequence
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seqId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All phases for the given sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseSummary"

  /migrations:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all migrations with advanced filtering and pagination
      tags: [Migrations]
      operationId: listMigrations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: search
          in: query
          description: Search term for name/description
          schema:
            type: string
            maxLength: 100
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              [
                mig_id,
                mig_name,
                mig_status,
                mig_type,
                created_at,
                updated_at,
                mig_start_date,
                mig_end_date,
                iteration_count,
                plan_count,
              ]
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: status
          in: query
          description: Filter by status (comma-separated)
          schema:
            type: string
        - name: dateFrom
          in: query
          description: Start date filter
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: End date filter
          schema:
            type: string
            format: date
        - name: teamId
          in: query
          description: Filter by team ID
          schema:
            type: integer
        - name: ownerId
          in: query
          description: Filter by owner user ID
          schema:
            type: integer
      responses:
        "200":
          description: Paginated list of migrations with filters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMigrations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      summary: Create a new migration
      tags: [Migrations]
      operationId: createMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMigrationRequest"
            examples:
              minimal:
                summary: Minimal request (required fields only)
                value:
                  mig_name: "Data Center Migration Q3 2025"
              stringStatus:
                summary: Full request with string status
                value:
                  mig_name: "Data Center Migration Q3 2025"
                  mig_description: "Migration of all core services to new data center."
                  mig_status: "IN_PROGRESS"
                  mig_start_date: "2025-07-01"
                  mig_end_date: "2025-09-30"
                  mig_business_cutover_date: "2025-08-15T14:30:00"
                  mig_type: "Infrastructure"
                  usr_id_owner: 123
              integerStatus:
                summary: Request with integer status
                value:
                  mig_name: "Application Modernization"
                  mig_description: "Modernizing legacy applications."
                  mig_status: 2
                  mig_start_date: "2025-08-01T08:00:00"
                  mig_type: "Application"
      responses:
        "201":
          description: Migration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400":
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalidStatus:
                  summary: Invalid status name
                  value:
                    error: "Invalid status name: INVALID_STATUS"
                missingName:
                  summary: Missing required field
                  value:
                    error: "Migration name is required"
                invalidDate:
                  summary: Invalid date format
                  value:
                    error: "Invalid date format. Use YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss"
                invalidJson:
                  summary: Invalid JSON
                  value:
                    error: "Invalid JSON format in request body"
        "409":
          description: Conflict - Constraint violations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                duplicateName:
                  summary: Duplicate migration name
                  value:
                    error: "A migration with this name already exists"
                invalidOwner:
                  summary: Invalid owner ID
                  value:
                    error: "Invalid owner user ID - user does not exist"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                noUsers:
                  summary: No users in system
                  value:
                    error: "No users exist in the system. Cannot create migration without owner."
                defaultStatus:
                  summary: Missing default status
                  value:
                    error: "Default PLANNING status for Migration not found in database"

  /migrations/{id}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get a single migration by ID with status metadata
      tags: [Migrations]
      operationId: getMigrationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The migration object with status metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      summary: Update a migration
      tags: [Migrations]
      operationId: updateMigration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMigrationRequest"
      responses:
        "200":
          description: Migration updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Migration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      summary: Delete a migration
      tags: [Migrations]
      operationId: deleteMigration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Migration deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Cannot delete migration - has associated resources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/dashboard/summary:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get dashboard summary data
      tags: [Migrations, Dashboard]
      operationId: getDashboardSummary
      responses:
        "200":
          description: Dashboard summary with totals and status distribution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSummary"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/dashboard/progress:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get progress aggregation data
      tags: [Migrations, Dashboard]
      operationId: getDashboardProgress
      parameters:
        - name: migrationId
          in: query
          description: Specific migration filter
          schema:
            type: string
            format: uuid
        - name: dateFrom
          in: query
          description: Start date filter
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: End date filter
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Progress aggregation data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardProgress"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/dashboard/metrics:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get performance metrics (placeholder)
      tags: [Migrations, Dashboard]
      operationId: getDashboardMetrics
      parameters:
        - name: period
          in: query
          description: Metrics period
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: month
        - name: migrationId
          in: query
          description: Specific migration filter
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Performance metrics (placeholder implementation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardMetrics"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/bulk/status:
    put:
      security:
        - ConfluenceUsers: []
      summary: Bulk update migration status (placeholder)
      tags: [Migrations, Bulk Operations]
      operationId: bulkUpdateMigrationStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStatusUpdateRequest"
      responses:
        "200":
          description: Bulk status update result (placeholder implementation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/bulk/export:
    post:
      security:
        - ConfluenceUsers: []
      summary: Bulk export migrations to JSON/CSV
      tags: [Migrations, Bulk Operations]
      operationId: bulkExportMigrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkExportRequest"
      responses:
        "200":
          description: Export result with download information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkExportResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /migrations/{migId}/iterations:
    get:
      security:
        - ConfluenceUsers: []
      summary: List all iterations for a migration
      tags: [Migrations]
      operationId: listIterationsForMigration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All iterations for the given migration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IterationSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /step-view:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - StepView
      summary: Get all step view data
      description: Retrieves all data for the step view component.
      operationId: getStepViewData
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StepView"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /stepViewApi/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - StepView
      summary: Get step instance details by migration, iteration, and step code
      description: |
        Retrieves detailed information about a specific step instance in a given migration and iteration,
        including instructions, comments, labels, and impacted teams. This endpoint is used
        by the standalone step view macro to display a single step's details.
      operationId: getStepInstanceByCode
      parameters:
        - name: migrationName
          in: query
          required: true
          schema:
            type: string
          description: Migration name
          example: migrationa
        - name: iterationName
          in: query
          required: true
          schema:
            type: string
          description: Iteration name
          example: run1
        - name: stepCode
          in: query
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}-\d{3}$'
          description: Step code in format XXX-nnn (e.g., APP-001, DBM-042)
          example: APP-001
      responses:
        "200":
          description: Step instance details including instructions and metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepInstanceDetails"
        "400":
          description: Bad request - invalid step code format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Missing required parameters. Expected: migrationName, iterationName, stepCode"
        "404":
          description: No step instance found for the given parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "No step instance found for step code: APP-001 in migration: migrationa, iteration: run1"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /teams:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Get teams with optional hierarchical filtering
      description: |
        Retrieves a list of teams. Can be filtered by hierarchical entities to show only teams 
        involved in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllTeams
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by phase instance ID
      responses:
        "200":
          description: A list of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the provided details.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
      responses:
        "201":
          description: Team created successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /teams/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Get a team by ID
      description: Retrieves a single team by its unique ID.
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: The requested team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Update a team
      description: Updates an existing team's details.
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
      responses:
        "204":
          description: Team updated successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Delete a team
      description: Deletes a team by its unique ID.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Team deleted successfully.
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"

  /teams/{teamId}/users/{userId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Add a user to a team
      description: Adds a user to a team, creating the membership link.
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User added to team successfully.
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Remove a user from a team
      description: Removes a user from a team, deleting the membership link.
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User removed from team successfully.
        "404":
          $ref: "#/components/responses/NotFound"

  /teams/{id}/applications:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Get applications associated with a team
      description: Retrieves a list of applications that are associated with the specified team.
      operationId: getTeamApplications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A list of applications associated with the team
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /teams/{teamId}/applications/{applicationId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Add an application to a team
      description: Creates an association between a team and an application.
      operationId: addApplicationToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application added to team successfully.
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Application is already associated with this team.
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Teams
      summary: Remove an application from a team
      description: Removes the association between a team and an application.
      operationId: removeApplicationFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application removed from team successfully.
        "404":
          $ref: "#/components/responses/NotFound"

  /environments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get all environments with counts
      description: |
        Retrieves a list of all environments with their associated application and iteration counts.
        Supports pagination, sorting, and search for admin GUI.
      operationId: getAllEnvironments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          description: Page size for pagination
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter environments
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort direction
      responses:
        "200":
          description: A list of environments with counts
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/EnvironmentWithCounts"
                  - $ref: "#/components/schemas/PaginatedEnvironments"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Create a new environment
      description: Creates a new environment with the provided details.
      operationId: createEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreateRequest"
      responses:
        "201":
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/roles:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get all environment roles
      description: Retrieves a list of all available environment roles.
      operationId: getEnvironmentRoles
      responses:
        "200":
          description: A list of environment roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnvironmentRole"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get an environment by ID
      description: Retrieves a single environment with full details including applications and iterations.
      operationId: getEnvironmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Environment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Update an environment
      description: Updates an existing environment's details.
      operationId: updateEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreateRequest"
      responses:
        "200":
          description: Environment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Delete an environment
      description: Deletes an environment by its unique ID.
      operationId: deleteEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Environment deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Cannot delete environment due to existing relationships
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockingRelationshipsError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/{id}/iterations:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Get iterations grouped by role
      description: Retrieves iterations associated with an environment, grouped by their environment role.
      operationId: getEnvironmentIterationsByRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Iterations grouped by role
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/RoleIterations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/{id}/applications/{appId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Associate an application with an environment
      description: Creates an association between an environment and an application.
      operationId: associateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Remove application association
      description: Removes the association between an environment and an application.
      operationId: disassociateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Application disassociated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/{id}/iterations/{iteId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Associate an iteration with an environment
      description: Creates an association between an environment and an iteration with a specific role.
      operationId: associateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enr_id
              properties:
                enr_id:
                  type: integer
                  description: Environment role ID
      responses:
        "200":
          description: Iteration associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Environments
      summary: Remove iteration association
      description: Removes the association between an environment and an iteration.
      operationId: disassociateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Iteration disassociated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get steps with hierarchical filtering for runsheet
      description: |
        Retrieves step instances grouped by sequence and phase for runsheet display.
        Supports comprehensive hierarchical filtering to show only steps matching the specified criteria.
        Multiple filters can be combined for progressive refinement.
        Results are ordered by sequence number, phase number, and step number.
      operationId: getStepsForRunsheet
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by label ID (steps that have this label)
      responses:
        "200":
          description: Steps grouped by sequence and phase for runsheet display
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceWithSteps"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get master steps with pagination and Admin GUI support
      description: |
        Retrieves master step templates with comprehensive filtering, pagination, and sorting support 
        for both dropdown selections and Admin GUI management. Supports all standard filtering parameters.
      operationId: getMasterSteps
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination (default 1)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
          description: Number of items per page (default 50)
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              [
                stm_id,
                stm_name,
                stm_order,
                created_at,
                updated_at,
                instruction_count,
                instance_count,
                plm_name,
                sqm_name,
                phm_name,
              ]
            default: stm_order
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
      responses:
        "200":
          description: Paginated list of master steps
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMasterSteps"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Create new master step
      description: |
        Creates a new master step template with comprehensive validation.
        Supports full CREATE functionality for Master Steps in the Admin GUI.
        Validates required fields and foreign key relationships.
      operationId: createMasterStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterStepRequest"
            example:
              phm_id: "f9aa535d-4d8b-447c-9d89-16494f678702"
              tms_id_owner: 15
              stt_code: "APP"
              stm_number: 101
              stm_name: "Deploy Application Components"
              stm_description: "Deploy all application components to target environment"
              stm_duration_minutes: 45
              enr_id_target: 3
              enr_id: 2
      responses:
        "201":
          description: Master step created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStepResponse"
        "400":
          description: Invalid request data or missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                missing_required:
                  summary: Missing required fields
                  value:
                    error: "Missing required fields: phm_id, tms_id_owner, stt_code, stm_number, stm_name, enr_id_target are required"
                invalid_phase:
                  summary: Invalid phase ID
                  value:
                    error: "Invalid phase ID"
                invalid_team:
                  summary: Invalid team ID
                  value:
                    error: "Invalid team ID"
        "409":
          description: Unique constraint violation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "A step with the same phase, type, and number already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get single master step by ID
      description: |
        Retrieves detailed information about a specific master step template by its UUID.
        Returns comprehensive step information including metadata and related entity details.
      operationId: getMasterStepById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master step UUID
      responses:
        "200":
          description: Master step details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStep"
        "400":
          description: Invalid step ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Master step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Update existing master step
      description: |
        Updates an existing master step template with partial data support.
        Supports full EDIT functionality for Master Steps in the Admin GUI.
        Only provided fields will be updated, others remain unchanged.
      operationId: updateMasterStep
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master step UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterStepRequest"
            example:
              stm_name: "Deploy Application Components - Updated"
              stm_description: "Deploy and validate all application components to target environment"
              stm_duration_minutes: 60
              tms_id_owner: 18
      responses:
        "200":
          description: Master step updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterStepResponse"
        "400":
          description: Invalid request data or step ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalid_id:
                  summary: Invalid step ID
                  value:
                    error: "Invalid step ID format"
                invalid_phase:
                  summary: Invalid phase ID
                  value:
                    error: "Invalid phase ID"
                invalid_team:
                  summary: Invalid team ID
                  value:
                    error: "Invalid team ID"
        "404":
          description: Master step not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Step not found with ID: f9aa535d-4d8b-447c-9d89-16494f678702"
        "409":
          description: Unique constraint violation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "A step with the same phase, type, and number already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/instance/{stepInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get step instance details with instructions
      description: |
        Retrieves detailed information about a specific step instance including all associated instructions.
        Supports both UUID and step code lookup for backward compatibility.
      operationId: getStepInstanceDetails
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
          description: Step instance ID (UUID) or step code for backward compatibility
      responses:
        "200":
          description: Step instance details with instructions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepInstanceDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/{stepInstanceId}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Update step instance status
      description: |
        Updates the status of a step instance and sends email notifications to relevant users.
        Valid statuses are: OPEN, IN_PROGRESS, COMPLETED, BLOCKED, ON_HOLD.
      operationId: updateStepInstanceStatus
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StepStatusUpdate"
      responses:
        "200":
          description: Step status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepStatusUpdateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/{stepInstanceId}/open:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark step as opened by PILOT
      description: |
        Marks a step instance as opened by the PILOT and sends email notifications to the owning team.
      operationId: openStepInstance
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Step opened successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/{stepInstanceId}/instructions/{instructionId}/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark instruction as completed
      description: |
        Marks a specific instruction within a step instance as completed and sends email notifications.
      operationId: completeInstruction
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Instruction completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/{stepInstanceId}/instructions/{instructionId}/incomplete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Mark instruction as incomplete
      description: |
        Marks a specific instruction within a step instance as incomplete and sends email notifications.
        This is the reverse operation of completing an instruction.
      operationId: markInstructionIncomplete
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        "200":
          description: Instruction marked as incomplete successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/{stepInstanceId}/comments:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Get comments for a step instance
      description: |
        Retrieves all comments associated with a specific step instance using the RESTful sub-resource pattern.
        This endpoint follows the pattern `/steps/{stepInstanceId}/comments` for accessing comments as a sub-resource of steps.
        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance.
      operationId: getStepInstanceComments
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        "200":
          description: List of comments for the step instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Comments endpoint not found - enhanced error response with usage guidance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedError"
              examples:
                incorrectEndpoint:
                  summary: Incorrect comments endpoint usage
                  value:
                    error: "Invalid comments endpoint usage"
                    message: "To access comments, use: /rest/scriptrunner/latest/custom/steps/{stepInstanceId}/comments"
                    example: "/rest/scriptrunner/latest/custom/steps/f9aa535d-4d8b-447c-9d89-16494f678702/comments"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Create a new comment for a step instance
      description: |
        Creates a new comment for the specified step instance using the RESTful sub-resource pattern.
        This endpoint follows the pattern `POST /steps/{stepInstanceId}/comments` for creating comments as a sub-resource of steps.
        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.
      operationId: createStepInstanceComment
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "200":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentCreateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Comments endpoint not found - enhanced error response with usage guidance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedError"
              examples:
                incorrectEndpoint:
                  summary: Incorrect comments endpoint for creating comments
                  value:
                    error: "Invalid comments endpoint usage"
                    message: "To create a comment, use: POST /rest/scriptrunner/latest/custom/steps/{stepInstanceId}/comments"
                    example: "POST /rest/scriptrunner/latest/custom/steps/f9aa535d-4d8b-447c-9d89-16494f678702/comments with comment data in the request body"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /comments/{commentId}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Update a comment
      description: |
        Updates the body of an existing comment using direct comment access for efficiency.
        This endpoint follows the pattern `PUT /comments/{commentId}` for direct comment operations.
        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentUpdateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Comment not found or incorrect endpoint - enhanced error response with usage guidance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedError"
              examples:
                incorrectEndpoint:
                  summary: Incorrect comments endpoint for updating comments
                  value:
                    error: "Invalid comments endpoint usage"
                    message: "To update a comment, use: PUT /rest/scriptrunner/latest/custom/comments/{commentId}"
                    example: "PUT /rest/scriptrunner/latest/custom/comments/123 with updated comment data in the request body"
                commentNotFound:
                  summary: Comment not found
                  value:
                    error: "Comment not found"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Comments
      summary: Delete a comment
      description: |
        Deletes an existing comment using direct comment access for efficiency.
        This endpoint follows the pattern `DELETE /comments/{commentId}` for direct comment operations.
        If you use an incorrect endpoint pattern, the API will provide helpful error messages with usage guidance and examples.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentDeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Comment not found or incorrect endpoint - enhanced error response with usage guidance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedError"
              examples:
                incorrectEndpoint:
                  summary: Incorrect comments endpoint for deleting comments
                  value:
                    error: "Invalid comments endpoint usage"
                    message: "To delete a comment, use: DELETE /rest/scriptrunner/latest/custom/comments/{commentId}"
                    example: "DELETE /rest/scriptrunner/latest/custom/comments/123"
                commentNotFound:
                  summary: Comment not found
                  value:
                    error: "Comment not found"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== NEW STEPS API V2.2.0 ENDPOINTS ====================

  /steps/summary:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get dashboard summary metrics for steps
      description: |
        Retrieves summary metrics for steps within a migration, used for dashboard displays.
        Provides counts by status, team breakdown, and completion percentages.
      operationId: getStepsSummary
      parameters:
        - name: migrationId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Migration UUID to get summary for
      responses:
        "200":
          description: Step summary metrics for dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Get detailed progress tracking data
      description: |
        Retrieves detailed progress tracking information for steps within a migration.
        Provides sequence-by-sequence and phase-by-phase breakdown with completion percentages.
      operationId: getStepsProgress
      parameters:
        - name: migrationId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Migration UUID to track progress for
      responses:
        "200":
          description: Detailed progress tracking data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsProgress"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/export:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Export steps data in JSON or CSV format
      description: |
        Exports step data with filtering support in JSON or CSV format.
        All standard hierarchical filtering parameters are supported.
      operationId: exportStepsData
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by label ID
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
          description: Export format (json or csv)
      responses:
        "200":
          description: Exported steps data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepsExportData"
            text/csv:
              schema:
                type: string
                description: CSV formatted steps data
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/bulk/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk update step status
      description: |
        Updates the status of multiple step instances in a single operation with notifications.
        Provides detailed feedback on successful and failed updates.
      operationId: bulkUpdateStepsStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStatusUpdate"
      responses:
        "200":
          description: Bulk status update completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/bulk/assign:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk assign steps to team
      description: |
        Assigns multiple step instances to a team in a single operation.
        Provides detailed feedback on successful and failed assignments.
      operationId: bulkAssignStepsToTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkTeamAssignment"
      responses:
        "200":
          description: Bulk team assignment completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /steps/bulk/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Steps
      summary: Bulk reorder steps within phases
      description: |
        Reorders multiple step instances within their respective phases.
        Provides detailed feedback on successful and failed reordering operations.
      operationId: bulkReorderSteps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkStepReordering"
      responses:
        "200":
          description: Bulk reordering completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== IMPORT API ====================
  # US-034: Data Import Strategy - JSON Import from Confluence

  /import/json:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Import JSON data from Confluence extraction
      description: |
        Imports step and instruction data from JSON format extracted from Confluence HTML.
        The data is first loaded into staging tables for validation, then automatically 
        promoted to master tables if validation passes.
        
        **Workflow:**
        1. Validates JSON structure and required fields
        2. Creates import batch for tracking
        3. Inserts data into staging tables (stg_steps, stg_step_instructions)
        4. Validates staging data for consistency
        5. Automatically promotes to master tables if validation passes
        
        **Step Type Codes:** Must be exactly 3 characters (e.g., IGO, CHK, DUM, TRT)
      operationId: importJsonData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonImportRequest"
      responses:
        "200":
          description: Import completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/batch:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Import multiple JSON files in batch
      description: |
        Processes multiple JSON files in a single batch operation.
        Each file is processed independently, with comprehensive result tracking.
        
        **Features:**
        - Processes files sequentially to maintain order
        - Tracks success/failure for each file
        - Provides aggregate statistics
        - Continues processing even if individual files fail
      operationId: importBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchImportRequest"
      responses:
        "200":
          description: Batch import completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchImportResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/staging:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Get current staging data
      description: |
        Retrieves all data currently in staging tables before promotion to master.
        Useful for reviewing imported data before it's promoted.
      operationId: getStagingData
      responses:
        "200":
          description: Staging data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StagingStep"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/staging/validate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Validate staging data
      description: |
        Validates data in staging tables before promotion to master.
        Checks for data consistency, required fields, and business rules.
        
        **Validation Checks:**
        - Steps without instructions (warning)
        - Invalid step type codes (error)
        - Duplicate instruction IDs within same step (error)
        - Missing required fields (error)
      operationId: validateStagingData
      responses:
        "200":
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/staging/promote:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Promote staging data to master tables
      description: |
        Manually promotes validated staging data to master tables.
        Creates master step and instruction records, handling team creation as needed.
        
        **Note:** This is typically done automatically after successful import,
        but this endpoint allows manual control when needed.
      operationId: promoteToMaster
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromotionRequest"
      responses:
        "200":
          description: Promotion completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/staging/clear:
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Clear all staging data
      description: |
        Removes all data from staging tables.
        Use with caution - this operation cannot be undone.
      operationId: clearStagingData
      responses:
        "204":
          description: Staging data cleared successfully
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/batches/{batchId}/rollback:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Rollback an import batch
      description: |
        Rolls back a specific import batch, removing imported data from staging.
        Useful for undoing problematic imports before promotion.
      operationId: rollbackImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Import batch ID to rollback
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for rollback
      responses:
        "200":
          description: Rollback completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/history:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Import
      summary: Get import history
      description: |
        Retrieves history of import batches with their status and statistics.
        Results are ordered by import date descending.
      operationId: getImportHistory
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Maximum number of batches to return
      responses:
        "200":
          description: Import history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImportBatch"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== INSTRUCTIONS API ====================

  /instructions:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get master instructions with hierarchical filtering
      description: |
        Retrieves master instructions with optional hierarchical filtering by step, plan, sequence, or phase.
        Results are ordered by instruction order within each step.
      operationId: getMasterInstructions
      parameters:
        - name: stepId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by step master ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID
      responses:
        "200":
          description: List of master instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterInstruction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/master:
    post:
      tags:
        - Instructions
      summary: Create a new master instruction
      description: Creates a new master instruction template for a step.
      operationId: createMasterInstruction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterInstructionCreate"
      responses:
        "201":
          description: Master instruction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - ConfluenceUsers: []

  /instructions/master/{instructionId}:
    get:
      tags:
        - Instructions
      summary: Get master instruction by ID
      description: Retrieves a specific master instruction by its ID.
      operationId: getMasterInstructionById
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      responses:
        "200":
          description: Master instruction details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - ConfluenceUsers: []
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Update master instruction
      description: Updates an existing master instruction template.
      operationId: updateMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterInstructionUpdate"
      responses:
        "200":
          description: Master instruction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterInstruction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Delete master instruction
      description: |
        Deletes a master instruction and all its instances (cascade deletion).
        This operation cannot be undone.
      operationId: deleteMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID to delete
      responses:
        "204":
          description: Master instruction deleted successfully (no content)
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/master/{stepId}/reorder:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Reorder master instructions within a step
      description: Updates the order of master instructions within a specific step.
      operationId: reorderMasterInstructions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step master ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionReorderRequest"
      responses:
        "200":
          description: Instructions reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReorderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/instance/by-step/{stepInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction instances for a step instance
      description: Retrieves all instruction instances for a specific step instance, ordered by sequence.
      operationId: getInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        "200":
          description: List of instruction instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InstructionInstance"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Create instruction instances for a step
      description: Creates instruction instances from master templates for a specific step instance.
      operationId: createInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionInstanceCreate"
      responses:
        "201":
          description: Instruction instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InstructionInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/instance/{instructionInstanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction instance by ID
      description: Retrieves a specific instruction instance by its ID.
      operationId: getInstructionInstanceById
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        "200":
          description: Instruction instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionInstance"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Delete instruction instance
      description: |
        Deletes a specific instruction instance.
        This operation cannot be undone.
      operationId: deleteInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID to delete
      responses:
        "204":
          description: Instruction instance deleted successfully (no content)
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/instance/{instructionInstanceId}/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Mark instruction instance as completed
      description: Marks an instruction instance as completed by a specific user with timestamp.
      operationId: completeInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstructionCompleteRequest"
      responses:
        "200":
          description: Instruction instance completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/instance/{instructionInstanceId}/uncomplete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Mark instruction instance as not completed
      description: Reverts an instruction instance completion status (sets ini_is_completed to false).
      operationId: uncompleteInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        "200":
          description: Instruction instance uncompleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionUncompleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/bulk/complete:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Bulk complete instruction instances
      description: Marks multiple instruction instances as completed by a specific user.
      operationId: bulkCompleteInstructions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkInstructionCompleteRequest"
      responses:
        "200":
          description: Instructions completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkInstructionCompleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/analytics/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction progress analytics
      description: |
        Retrieves instruction completion progress statistics with hierarchical filtering.
        Returns progress metrics for migrations, iterations, or teams.
      operationId: getInstructionProgressAnalytics
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        "200":
          description: Instruction progress analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionProgressAnalytics"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/analytics/completion:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Get instruction completion timeline
      description: |
        Retrieves instruction completion timeline data for progress tracking and reporting.
        Shows completion trends over time.
      operationId: getInstructionCompletionAnalytics
      parameters:
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        "200":
          description: Instruction completion timeline
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionCompletionAnalytics"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /instructions/bulk:
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Instructions
      summary: Bulk delete instruction instances
      description: |
        Deletes multiple instruction instances in a single operation.
        Returns summary of successful and failed deletions.
      operationId: bulkDeleteInstructions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - instructionInstanceIds
              properties:
                instructionInstanceIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: List of instruction instance IDs to delete
      responses:
        "200":
          description: Bulk deletion result
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    description: Number of successfully deleted instances
                  failed:
                    type: integer
                    description: Number of failed deletions
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Instance ID that failed to delete
                        reason:
                          type: string
                          description: Reason for deletion failure
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== CONTROLS API ====================

  /controls/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get all master control templates with pagination and sorting
      description: |
        Retrieves all master control templates with optional filtering by phase, pagination, and sorting.
        Results include phase hierarchy information. Supports Admin GUI integration with comprehensive sorting options.
      operationId: getAllMasterControls
      parameters:
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter controls by master phase ID
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
          description: Number of items per page
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              [
                ctm_id,
                ctm_code,
                ctm_name,
                ctm_description,
                ctm_type,
                ctm_is_critical,
                ctm_order,
                created_at,
                updated_at,
                instance_count,
                validation_count,
                plm_name,
                sqm_name,
                phm_name,
                tms_name,
              ]
            default: ctm_code
          description: Field to sort by (default is ctm_code - primary display field for Admin GUI)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
      responses:
        "200":
          description: List of master control templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterControl"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create a new master control template
      description: Creates a new master control template for a phase.
      operationId: createMasterControl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterControlRequest"
      responses:
        "201":
          description: Master control created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/master/{controlId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get master control by ID
      description: Retrieves a specific master control template by its ID.
      operationId: getMasterControlById
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      responses:
        "200":
          description: Master control details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update master control
      description: Updates an existing master control template.
      operationId: updateMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterControlRequest"
      responses:
        "200":
          description: Master control updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterControl"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Delete master control
      description: Deletes a master control template if no instances exist.
      operationId: deleteMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      responses:
        "204":
          description: Master control deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Cannot delete - control has existing instances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/master/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Reorder master controls within phase
      description: Updates the display order of master controls within a phase.
      operationId: reorderMasterControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderControlsRequest"
      responses:
        "204":
          description: Controls reordered successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/master/bulk:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create multiple master controls
      description: Creates multiple master control templates in a single operation.
      operationId: bulkCreateMasterControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateMasterControlRequest"
                  description: Array of master controls to create
      responses:
        "201":
          description: Bulk creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkControlResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/master/{controlId}/instantiate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create instance from master control
      description: Creates a control instance from a specific master control template.
      operationId: instantiateMasterControl
      parameters:
        - name: controlId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master control ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstantiateControlRequest"
      responses:
        "201":
          description: Control instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get control instances with hierarchical filtering
      description: |
        Retrieves control instances with optional hierarchical filtering.
        Supports filtering by migration, iteration, plan, sequence, phase, team, and status.
      operationId: getControlInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID (hierarchical)
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID (hierarchical)
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID (hierarchical)
        - name: sequenceInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID (hierarchical)
        - name: phaseInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID (hierarchical)
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: List of control instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create a new control instance
      description: Creates a new control instance from a master control template.
      operationId: createControlInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateControlInstanceRequest"
      responses:
        "201":
          description: Control instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/{instanceId}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Get control instance by ID
      description: Retrieves a specific control instance by its ID.
      operationId: getControlInstanceById
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      responses:
        "200":
          description: Control instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update control instance
      description: Updates an existing control instance.
      operationId: updateControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateControlInstanceRequest"
      responses:
        "200":
          description: Control instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Delete control instance
      description: Deletes a control instance.
      operationId: deleteControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      responses:
        "204":
          description: Control instance deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/{instanceId}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Update control instance status
      description: Updates the status of a control instance.
      operationId: updateControlInstanceStatus
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cti_status
              properties:
                cti_status:
                  type: string
                  description: New status value
                  enum: [PENDING, IN_PROGRESS, VALIDATED, FAILED, OVERRIDDEN]
      responses:
        "204":
          description: Status updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/{instanceId}/validate:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Validate control with IT/Business approval
      description: Validates a control instance with IT and business validator assignments.
      operationId: validateControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateControlRequest"
      responses:
        "200":
          description: Control validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/{instanceId}/override:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Override control with justification
      description: Overrides a control instance with a documented reason and approval.
      operationId: overrideControlInstance
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverrideControlRequest"
      responses:
        "200":
          description: Control overridden successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/bulk:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Create multiple control instances
      description: Creates multiple control instances in a single operation.
      operationId: bulkCreateControlInstances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instances:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateControlInstanceRequest"
                  description: Array of control instances to create
      responses:
        "201":
          description: Bulk creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkControlResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/instance/bulk/validate:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Validate all controls in a phase
      description: Validates all control instances within a phase instance simultaneously.
      operationId: bulkValidateControls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkValidateControlsRequest"
      responses:
        "200":
          description: Bulk validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  validated:
                    type: integer
                    description: Number of controls validated
                  failed:
                    type: integer
                    description: Number of validation failures
                  total:
                    type: integer
                    description: Total controls processed
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /controls/{phaseId}/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Controls
      summary: Calculate control progress for phase
      description: |
        Calculates control validation progress for a phase instance.
        Returns metrics including total controls, validated controls, and progress percentages.
      operationId: getPhaseControlProgress
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase instance ID
      responses:
        "200":
          description: Phase control progress metrics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlProgress"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /statuses:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Statuses
      summary: Get all statuses
      description: Retrieves all available statuses across all entity types.
      operationId: getAllStatuses
      responses:
        "200":
          description: List of all statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /statuses/{type}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Statuses
      summary: Get statuses by entity type
      description: |
        Retrieves all statuses for a specific entity type.
        Common types include: Step, Migration, Iteration, Plan, Sequence, Phase.
      operationId: getStatusesByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Entity type (capitalized, e.g., "Step", "Migration")
      responses:
        "200":
          description: List of statuses for the specified type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /iterationTypes:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Iterations
      summary: Get all iteration types
      description: |
        Retrieves all available iteration types for reference data.
        Used primarily for populating dropdowns in the Admin GUI.
        Returns a simple list of iteration type codes and names.
      operationId: getAllIterationTypes
      responses:
        "200":
          description: List of all iteration types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IterationType"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/context:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get user context with role information (v2.1.0)
      description: |
        Retrieves context information for a user including role and permissions.
        Used for authentication and authorization purposes. Enhanced in v2.1.0 with
        clear role mapping (ADMIN=1, NORMAL=2, PILOT=3) and improved error handling.
      operationId: getUserContext
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: Username to get context for
      responses:
        "200":
          description: User context information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContext"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get labels with optional hierarchical filtering
      description: |
        Retrieves a list of labels. Can be filtered by hierarchical entities to show only labels 
        associated with step instances in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllLabels
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by phase instance ID
      responses:
        "200":
          description: A list of labels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Create a new label
      description: Creates a new label within a migration scope.
      operationId: createLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelCreate"
      responses:
        "201":
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get a specific label by ID
      description: Retrieves detailed information about a specific label including associated applications and step count.
      operationId: getLabelById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "200":
          description: Label details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Update an existing label
      description: Updates label properties including migration assignment.
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelUpdate"
      responses:
        "200":
          description: Label updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Delete a label
      description: Deletes a label and all its associations.
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "204":
          description: Label deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{id}/steps:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Get steps associated with a label
      description: Retrieves all master steps that are associated with the specified label.
      operationId: getLabelSteps
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        "200":
          description: List of associated steps
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      $ref: "#/components/schemas/LabelStep"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{labelId}/applications/{applicationId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Add application association to label
      description: Associates an application with a label.
      operationId: addLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        "200":
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Remove application association from label
      description: Removes the association between an application and a label.
      operationId: removeLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        "200":
          description: Application association removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{labelId}/steps/{stepId}:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Add step association to label
      description: Associates a master step with a label.
      operationId: addLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        "200":
          description: Step associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Labels
      summary: Remove step association from label
      description: Removes the association between a master step and a label.
      operationId: removeLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        "200":
          description: Step association removed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get all master plans
      description: Retrieves a list of all master plan templates.
      operationId: getAllMasterPlans
      responses:
        "200":
          description: A list of master plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterPlan"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Create a new master plan
      description: Creates a new master plan template.
      operationId: createMasterPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanInput"
      responses:
        "201":
          description: Master plan created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Conflict - Plan with this name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get master plan by ID
      description: Retrieves a specific master plan template by its ID.
      operationId: getMasterPlanById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        "200":
          description: Master plan details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update master plan
      description: Updates an existing master plan template.
      operationId: updateMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanUpdate"
      responses:
        "200":
          description: Master plan updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlan"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict - Plan with this name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Delete master plan
      description: Soft deletes a master plan template. Only allowed if no instances exist.
      operationId: deleteMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        "204":
          description: Master plan deleted successfully
        "400":
          description: Cannot delete - plan has active instances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get plan instances
      description: Retrieves a list of plan instances with optional filtering.
      operationId: getPlanInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of plan instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlanInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans/instance:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Create plan instance
      description: Creates a new plan instance from a master plan template.
      operationId: createPlanInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanInstanceInput"
      responses:
        "201":
          description: Plan instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Master plan not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans/instance/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Get plan instance by ID
      description: Retrieves a specific plan instance by its ID.
      operationId: getPlanInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        "200":
          description: Plan instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstanceDetail"
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update plan instance
      description: Updates an existing plan instance.
      operationId: updatePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanInstanceUpdate"
      responses:
        "200":
          description: Plan instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInstanceDetail"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Delete plan instance
      description: Deletes a plan instance.
      operationId: deletePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        "204":
          description: Plan instance deleted successfully
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /plans/{id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Plans
      summary: Update plan instance status
      description: Updates the status of a plan instance. Supports flexible status input - accepts either status names (strings) or status IDs (integers) for enhanced usability and PostgreSQL compatibility.
      operationId: updatePlanInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  oneOf:
                    - type: string
                      description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
                    - type: integer
                      description: Status ID (references status_sts table)
                  description: New status - accepts either status name (string) or status ID (integer) for flexible input handling
                  example: "PLANNING"
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get all master sequences
      description: Retrieves a list of all master sequence templates.
      operationId: getAllMasterSequences
      responses:
        "200":
          description: A list of master sequences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MasterSequence"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Create a new master sequence
      description: Creates a new master sequence template.
      operationId: createMasterSequence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceRequest"
      responses:
        "201":
          description: Master sequence created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Conflict - Sequence with this name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/master/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get master sequence by ID
      description: Retrieves a specific master sequence template by its ID.
      operationId: getMasterSequenceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        "200":
          description: Master sequence details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update master sequence
      description: Updates an existing master sequence template.
      operationId: updateMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceRequest"
      responses:
        "200":
          description: Master sequence updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict - Sequence with this name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Delete master sequence
      description: Soft deletes a master sequence template. Only allowed if no instances exist.
      operationId: deleteMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        "204":
          description: Master sequence deleted successfully
        "400":
          description: Cannot delete - sequence has active instances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/master/{id}/order:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update master sequence order
      description: Updates the display order of a master sequence template.
      operationId: updateMasterSequenceOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSequenceOrderRequest"
      responses:
        "200":
          description: Master sequence order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterSequence"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get sequence instances
      description: Retrieves a list of sequence instances with optional filtering.
      operationId: getSequenceInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of sequence instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SequenceInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/instance:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Create sequence instance
      description: Creates a new sequence instance from a master sequence template.
      operationId: createSequenceInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceInstanceRequest"
      responses:
        "201":
          description: Sequence instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Master sequence not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/instance/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Get sequence instance by ID
      description: Retrieves a specific sequence instance by its ID.
      operationId: getSequenceInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        "200":
          description: Sequence instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update sequence instance
      description: Updates an existing sequence instance.
      operationId: updateSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSequenceInstanceRequest"
      responses:
        "200":
          description: Sequence instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SequenceInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Delete sequence instance
      description: Deletes a sequence instance.
      operationId: deleteSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        "204":
          description: Sequence instance deleted successfully
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /sequences/instance/{id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Sequences
      summary: Update sequence instance status
      description: Updates the status of a sequence instance.
      operationId: updateSequenceInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  type: integer
                  description: New status ID
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # === PHASES API ENDPOINTS ===
  /phases/master:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get all master phases with advanced filtering and pagination
      description: |
        Retrieves all master phase templates with comprehensive filtering, pagination, sorting, and computed fields.
        Supports Admin GUI with enhanced status metadata, relationship data, and performance optimization.

        **Enhanced Features:**
        - Computed fields (step_count, instance_count)
        - Status metadata with colors and descriptions
        - Flexible pagination and sorting
        - Advanced filtering by status, owner, date range, and search
        - PostgreSQL-optimized queries with proper type casting
      operationId: getMasterPhases
      parameters:
        # Legacy parameter for backward compatibility
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence master ID (legacy parameter)
        # Admin GUI pagination parameters
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of items per page
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              [
                phm_id,
                phm_name,
                phm_status,
                created_at,
                updated_at,
                step_count,
                instance_count,
              ]
            default: phm_name
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
        # Advanced filtering parameters
        - name: status
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: Filter by status name(s). Can be single value or array
          example: ["ACTIVE", "PLANNING"]
        - name: ownerId
          in: query
          required: false
          schema:
            type: string
          description: Filter by owner team ID (through plan master relationship)
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search in phase name and description
        - name: startDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by creation date from (YYYY-MM-DD)
        - name: startDateTo
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by creation date to (YYYY-MM-DD)
      responses:
        "200":
          description: Master phases with pagination and metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MasterPhase"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: Current page number
                      size:
                        type: integer
                        description: Items per page
                      total:
                        type: integer
                        description: Total number of items
                      totalPages:
                        type: integer
                        description: Total number of pages
                  filters:
                    type: object
                    description: Applied filters for reference
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Create master phase
      description: Creates a new master phase template.
      operationId: createMasterPhase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMasterPhaseRequest"
      responses:
        "201":
          description: Master phase created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/master/{phm_id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get master phase by ID
      description: Retrieves a specific master phase template.
      operationId: getMasterPhaseById
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        "200":
          description: Master phase details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update master phase
      description: Updates a master phase template.
      operationId: updateMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMasterPhaseRequest"
      responses:
        "200":
          description: Master phase updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPhase"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Delete master phase
      description: Deletes a master phase template if no dependencies exist.
      operationId: deleteMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        "200":
          description: Master phase deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/master/{phm_id}/instantiate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Instantiate phases from master
      description: Creates phase instances from a master phase template for a specific sequence instance.
      parameters:
        - name: phm_id
          in: path
          required: true
          description: Master phase ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sqi_id
              properties:
                sqi_id:
                  type: string
                  format: uuid
                  description: Sequence instance ID to create phases for
      responses:
        "201":
          description: Phase instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/instance:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase instances
      description: Retrieves phase instances with hierarchical filtering.
      operationId: getPhaseInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        "200":
          description: A list of phase instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhaseInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Create phase instance
      description: Creates a phase instance from a master phase template.
      operationId: createPhaseInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePhaseInstanceRequest"
      responses:
        "201":
          description: Phase instance created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/instance/{phi_id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase instance by ID
      description: Retrieves a specific phase instance.
      operationId: getPhaseInstanceById
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase instance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update phase instance
      description: Updates a phase instance.
      operationId: updatePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePhaseInstanceRequest"
      responses:
        "200":
          description: Phase instance updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Delete phase instance
      description: Deletes a phase instance if no dependencies exist.
      operationId: deletePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase instance deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/instance/{phi_id}/status:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update phase instance status
      description: Updates the status of a specific phase instance.
      parameters:
        - name: phi_id
          in: path
          required: true
          description: Phase instance ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sts_id
              properties:
                sts_id:
                  type: integer
                  description: New status ID (foreign key to status_sts table)
      responses:
        "204":
          description: Status updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/{phi_id}/controls:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase control points
      description: Retrieves all control points for a phase instance.
      operationId: getPhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: List of control points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ControlPoint"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/{phi_id}/controls/validate:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Validate phase control points
      description: Validates all control points for a phase instance.
      operationId: validatePhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Validation results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlPointValidation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/{phi_id}/controls/{cti_id}:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Update control point
      description: Updates a control point status and validators.
      operationId: updateControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateControlPointRequest"
      responses:
        "200":
          description: Control point updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/{phi_id}/controls/{cti_id}/override:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Override control point
      description: Overrides a control point with reason and audit trail.
      operationId: overrideControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverrideControlPointRequest"
      responses:
        "200":
          description: Control point overridden successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/{phi_id}/progress:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Get phase progress
      description: Calculates and returns progress percentage for a phase instance.
      operationId: getPhaseProgress
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        "200":
          description: Phase progress information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseProgress"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/master/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Bulk reorder master phases
      description: Reorders multiple master phases within a sequence.
      operationId: reorderMasterPhases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderMasterPhasesRequest"
      responses:
        "200":
          description: Master phases reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/instance/reorder:
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Bulk reorder phase instances
      description: Reorders multiple phase instances within a sequence.
      operationId: reorderPhaseInstances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderPhaseInstancesRequest"
      responses:
        "200":
          description: Phase instances reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/master/{phm_id}/move:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Move master phase
      description: Moves a master phase to a new position within its sequence.
      operationId: moveMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovePhaseRequest"
      responses:
        "200":
          description: Master phase moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /phases/instance/{phi_id}/move:
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Phases
      summary: Move phase instance
      description: Moves a phase instance to a new position within its sequence.
      operationId: movePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovePhaseRequest"
      responses:
        "200":
          description: Phase instance moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /applications:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Applications
      summary: Get all applications
      description: Retrieves a list of all applications.
      operationId: getAllApplications
      responses:
        "200":
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get all users
      description: Retrieves a paginated list of all users with optional filtering and sorting.
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
          description: Number of items per page
        - name: search
          in: query
          required: false
          schema:
            type: string
            minLength: 2
          description: Search term to filter users by name, email, or code (min 2 chars)
        - name: userCode
          in: query
          required: false
          schema:
            type: string
          description: Find user by exact code match (for authentication, returns debug info if not found)
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter users by team membership
        - name: active
          in: query
          required: false
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., usr_first_name, usr_last_name, usr_email)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
      responses:
        "200":
          description: A paginated list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  totalElements:
                    type: integer
                    description: Total number of users
                  totalPages:
                    type: integer
                    description: Total number of pages
                  pageNumber:
                    type: integer
                    description: Current page number (1-based)
                  pageSize:
                    type: integer
                    description: Number of items per page
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict - user with same email or code already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Update user
      description: Updates an existing user's information.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict - email or code already exists for another user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - Users
      summary: Delete user
      description: Deletes a user from the system.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "204":
          description: User deleted successfully.
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Cannot delete - user is referenced by other resources.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /emailTemplates:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Get all email templates
      description: |
        Retrieves a list of all email templates used for notifications.
        Can be filtered to show only active templates.
      operationId: getAllEmailTemplates
      parameters:
        - name: activeOnly
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Filter to show only active templates
      responses:
        "200":
          description: List of email templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmailTemplate"
                  total:
                    type: integer
                    description: Total number of templates
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Create a new email template
      description: Creates a new email template for notifications.
      operationId: createEmailTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplateCreate"
      responses:
        "201":
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /emailTemplates/{id}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Get an email template by ID
      description: Retrieves a specific email template by its unique ID.
      operationId: getEmailTemplateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        "200":
          description: Email template details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Update an email template
      description: Updates an existing email template. Supports partial updates.
      operationId: updateEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplateUpdate"
      responses:
        "200":
          description: Email template updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      tags:
        - EmailTemplates
      summary: Delete an email template
      description: Deletes an email template by its unique ID.
      operationId: deleteEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        "204":
          description: Email template deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /webapp/{path}:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - WebApp
      summary: Serve a static asset
      description: Serves a static asset from the webapp resources.
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The requested asset.
          content:
            application/javascript: {}
            text/css: {}
            image/png: {}
            image/jpeg: {}
            image/svg+xml: {}
        "404":
          $ref: "#/components/responses/NotFound"

  # ==================== URL CONFIGURATION API ====================
  /api/v2/urlConfiguration:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Get URL configuration for client-side construction
      description: |
        Retrieves URL configuration settings that clients can use to construct proper URLs
        for navigation and links within the UMIG application. Supports environment-specific
        configuration retrieval for multi-environment deployments.
      operationId: getUrlConfiguration
      parameters:
        - name: environment
          in: query
          required: false
          description: Environment identifier (2-5 alphanumeric characters)
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{2,5}$"
            example: "DEV"
      responses:
        "200":
          description: URL configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfiguration"
              example:
                baseUrl: "http://localhost:8090"
                spaceKey: "UMIG"
                pageId: "123456789"
                pageTitle: "UMIG Application"
                environment: "DEV"
                isActive: true
                urlTemplate: "{{baseUrl}}/spaces/{{spaceKey}}/pages/{{pageId}}"
        "400":
          description: Invalid environment parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "VALIDATION_ERROR"
                message: "Environment parameter must be 2-5 alphanumeric characters"
                timestamp: "2025-08-27T14:30:00Z"
        "404":
          description: Configuration not found for specified environment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "NOT_FOUND"
                message: "URL configuration not found for environment: PROD"
                timestamp: "2025-08-27T14:30:00Z"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v2/urlConfiguration/health:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Health check for URL configuration service
      description: |
        Performs a health check on the URL configuration service, verifying that
        the service is operational and can retrieve configuration data.
      operationId: getUrlConfigurationHealth
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationHealth"
              example:
                status: "healthy"
                timestamp: "2025-08-27T14:30:00Z"
                details: "All configuration services operational"
        "503":
          description: Service is degraded or unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationHealth"
              example:
                status: "degraded"
                timestamp: "2025-08-27T14:30:00Z"
                details: "Database connection slow"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v2/urlConfiguration/clearCache:
    post:
      tags:
        - UrlConfiguration
      summary: Clear URL configuration cache
      description: |
        Clears the URL configuration cache, forcing the service to reload
        configuration from the database on the next request. Useful for
        applying configuration changes immediately.
      operationId: clearUrlConfigurationCache
      responses:
        "200":
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheClearResponse"
              example:
                message: "URL configuration cache cleared successfully"
                timestamp: "2025-08-27T14:30:00Z"
                nextCacheRefresh: "2025-08-27T14:35:00Z"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - ConfluenceUsers: []

  /api/v2/urlConfiguration/debug:
    get:
      security:
        - ConfluenceUsers: []
      tags:
        - UrlConfiguration
      summary: Debug information for URL configuration troubleshooting
      description: |
        Provides comprehensive debug information about the URL configuration service,
        including service health, cached configurations, environment detection status,
        and system diagnostics. Intended for troubleshooting and system monitoring.
      operationId: getUrlConfigurationDebug
      responses:
        "200":
          description: Debug information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlConfigurationDebug"
              example:
                serviceHealth:
                  status: "healthy"
                  databaseConnected: true
                  cacheEnabled: true
                cachedConfigurations:
                  - environment: "DEV"
                    lastRefresh: "2025-08-27T14:25:00Z"
                    entryCount: 1
                  - environment: "TEST"
                    lastRefresh: "2025-08-27T14:20:00Z"
                    entryCount: 1
                environmentDetection:
                  currentEnvironment: "DEV"
                  detectionMethod: "CONFLUENCE_BASE_URL"
                  fallbackUsed: false
                timestamp: "2025-08-27T14:30:00Z"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ==================== IMPORT API V2 ====================
  /import/json:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import single JSON file
      description: |
        Import a single JSON file containing migration data. The JSON content is validated and stored in staging tables before promotion to master tables.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importJson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonImportRequest"
      responses:
        "200":
          description: Import completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonImportResponse"
        "400":
          description: Bad request - invalid JSON format or missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Missing required fields: 'source' and 'content'"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Insufficient permissions for import operations"
        "409":
          description: Data conflict - duplicate data detected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Duplicate data detected"
                details: "Step already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/batch:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import multiple JSON files as a batch
      description: |
        Import multiple JSON files as a single batch operation. Files are processed sequentially with comprehensive statistics tracking.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchImportRequest"
      responses:
        "200":
          description: Batch import completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchImportResponse"
        "400":
          description: Bad request - invalid format or empty files array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/teams:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import teams from CSV
      description: |
        Import team data from CSV format. Supports team_name, team_description, and team_lead fields.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importTeamsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                team_name,team_description,team_lead
                "Infrastructure Team","Manages servers and infrastructure","john.doe"
                "Development Team","Application development","jane.smith"
      responses:
        "200":
          description: Teams imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400":
          description: Bad request - invalid CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/users:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import users from CSV
      description: |
        Import user data from CSV format. Supports username, display_name, email, and role fields.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importUsersCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                username,display_name,email,role
                "john.doe","John Doe","john@company.com","admin"
                "jane.smith","Jane Smith","jane@company.com","user"
      responses:
        "200":
          description: Users imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400":
          description: Bad request - invalid CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/applications:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import applications from CSV
      description: |
        Import application data from CSV format. Supports app_name, app_description, and app_owner fields.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importApplicationsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                app_name,app_description,app_owner
                "Web Portal","Main application","dev-team"
                "API Gateway","Authentication service","platform-team"
      responses:
        "200":
          description: Applications imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400":
          description: Bad request - invalid CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/environments:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import environments from CSV
      description: |
        Import environment data from CSV format. Supports env_name, env_description, and env_type fields.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importEnvironmentsCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                env_name,env_description,env_type
                "Production","Live environment","PROD"
                "Staging","Pre-production testing","STAGING"
      responses:
        "200":
          description: Environments imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400":
          description: Bad request - invalid CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/all:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import all base entities in proper dependency order
      description: |
        Import all base entities (teams, users, applications, environments) in a single operation.
        Processes entities in proper dependency order to maintain referential integrity.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: importAllCsv
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllEntitiesCsvRequest"
      responses:
        "200":
          description: All entities imported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsvImportResponse"
        "400":
          description: Bad request - invalid JSON or CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/csv/master-plan:
    post:
      security:
        - ConfluenceUsers: []
      summary: Import master plan CSV (Not Implemented)
      description: |
        Import master plan configuration from CSV format.
        **This endpoint returns HTTP 501 NOT_IMPLEMENTED** until the importMasterPlans method is implemented in CsvImportService.
      tags: [Import]
      operationId: importMasterPlanCsv
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                plan_name,plan_description,plan_owner
                "Migration Plan Alpha","High-level migration plan","admin"
      responses:
        "501":
          description: Not Implemented - Feature pending implementation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Master plan CSV import is not yet implemented"
                details: "The importMasterPlans method needs to be added to CsvImportService"
        "400":
          description: Bad request - invalid CSV format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"

  /import/master-plan:
    post:
      security:
        - ConfluenceUsers: []
      summary: Create master plan configuration
      description: |
        Create a master plan configuration entry. Plan names must be unique.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: createMasterPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MasterPlanRequest"
      responses:
        "200":
          description: Master plan created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MasterPlanResponse"
        "400":
          description: Bad request - invalid format or validation failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "409":
          description: Conflict - plan name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Duplicate plan name"
                details: "Plan name 'Migration Plan Alpha' already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/rollback/{batchId}:
    post:
      security:
        - ConfluenceUsers: []
      summary: Rollback import batch with audit trail
      description: |
        Rollback a specific import batch with comprehensive audit trail.
        Removes imported data and updates batch status to ROLLED_BACK.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: rollbackImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          description: Batch rolled back successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackResponse"
        "400":
          description: Bad request - invalid batch ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "404":
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Import batch not found: 550e8400-e29b-41d4-a716-446655440000"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/history:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get import history with optional filtering
      description: |
        Retrieve import history with optional filtering by user and pagination support.
        Returns comprehensive import batch information with statistics.
      tags: [Import]
      operationId: getImportHistory
      parameters:
        - name: userId
          in: query
          required: false
          description: Filter by username
          schema:
            type: string
            example: "admin"
        - name: limit
          in: query
          required: false
          description: Limit number of history records (1-1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
            example: 10
      responses:
        "200":
          description: Import history retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportHistoryResponse"
        "400":
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/batch/{batchId}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get details of a specific import batch
      description: |
        Retrieve comprehensive details of a specific import batch including statistics and status.
      tags: [Import]
      operationId: getImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Batch details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportBatchDetails"
        "400":
          description: Bad request - invalid batch ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      security:
        - ConfluenceUsers: []
      summary: Rollback a specific import batch
      description: |
        Rollback (delete) a specific import batch. Alternative endpoint to POST /import/rollback/{batchId}.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: deleteImportBatch
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          description: Batch rolled back successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackResponse"
        "400":
          description: Bad request - invalid batch ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "404":
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      security:
        - ConfluenceUsers: []
      summary: Update import batch status
      description: |
        Update the status and statistics of a specific import batch.
        Requires administrator privileges for execution.
      tags: [Import]
      operationId: updateImportBatchStatus
      parameters:
        - name: batchId
          in: path
          required: true
          description: Import batch identifier (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchStatusUpdateRequest"
      responses:
        "200":
          description: Batch status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchStatusUpdateResponse"
        "400":
          description: Bad request - invalid format or status value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden - administrator privileges required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "404":
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/statistics:
    get:
      security:
        - ConfluenceUsers: []
      summary: Get overall import statistics
      description: |
        Retrieve overall import system statistics including total batches, success rates, and performance metrics.
      tags: [Import]
      operationId: getImportStatistics
      responses:
        "200":
          description: Import statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportStatistics"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /import/templates/{entity}:
    get:
      security:
        - ConfluenceUsers: []
      summary: Download CSV templates for base entities
      description: |
        Download CSV template files for importing base entities (teams, users, applications, environments).
        Templates include proper headers and example data.
      tags: [Import]
      operationId: downloadCsvTemplate
      parameters:
        - name: entity
          in: path
          required: true
          description: Entity type for template download
          schema:
            type: string
            enum: [teams, users, applications, environments]
            example: "teams"
      responses:
        "200":
          description: CSV template downloaded successfully
          content:
            text/csv:
              schema:
                type: string
                example: |
                  team_name,team_description,team_lead
                  "Infrastructure Team","Manages servers and infrastructure","john.doe"
                  "Development Team","Application development","jane.smith"
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename="teams_template.csv"'
            Cache-Control:
              schema:
                type: string
                example: "no-cache, no-store, must-revalidate"
        "400":
          description: Bad request - invalid entity type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
              example:
                error: "Invalid entity type. Must be one of: teams, users, applications, environments"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Template not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    # --- View Models ---
    StepView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string

    # --- URL Configuration Models ---
    UrlConfiguration:
      type: object
      description: URL configuration settings for client-side URL construction
      properties:
        baseUrl:
          type: string
          description: Base URL of the Confluence instance
          example: "http://localhost:8090"
        spaceKey:
          type: string
          description: Confluence space key where UMIG is deployed
          example: "UMIG"
        pageId:
          type: string
          description: Page ID where the UMIG application is hosted
          example: "123456789"
        pageTitle:
          type: string
          description: Title of the page hosting UMIG
          example: "UMIG Application"
        environment:
          type: string
          description: Current environment identifier
          example: "DEV"
        isActive:
          type: boolean
          description: Whether this configuration is currently active
          example: true
        urlTemplate:
          type: string
          description: Template for constructing URLs using configuration values
          example: "{{baseUrl}}/spaces/{{spaceKey}}/pages/{{pageId}}"
      required:
        - baseUrl
        - spaceKey
        - pageId
        - pageTitle
        - environment
        - isActive
        - urlTemplate

    UrlConfigurationHealth:
      type: object
      description: Health status of the URL configuration service
      properties:
        status:
          type: string
          enum: ["healthy", "degraded", "error"]
          description: Current health status of the service
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when health check was performed
          example: "2025-08-27T14:30:00Z"
        details:
          type: string
          description: Additional details about the health status
          example: "All configuration services operational"
      required:
        - status
        - timestamp

    CacheClearResponse:
      type: object
      description: Response after clearing URL configuration cache
      properties:
        message:
          type: string
          description: Confirmation message
          example: "URL configuration cache cleared successfully"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when cache was cleared
          example: "2025-08-27T14:30:00Z"
        nextCacheRefresh:
          type: string
          format: date-time
          description: Estimated time for next cache refresh
          example: "2025-08-27T14:35:00Z"
      required:
        - message
        - timestamp

    UrlConfigurationDebug:
      type: object
      description: Debug information for URL configuration troubleshooting
      properties:
        serviceHealth:
          type: object
          description: Service health information
          properties:
            status:
              type: string
              description: Service status
              example: "healthy"
            databaseConnected:
              type: boolean
              description: Database connection status
              example: true
            cacheEnabled:
              type: boolean
              description: Whether caching is enabled
              example: true
          required:
            - status
            - databaseConnected
            - cacheEnabled
        cachedConfigurations:
          type: array
          description: Information about cached configurations
          items:
            type: object
            properties:
              environment:
                type: string
                description: Environment identifier
                example: "DEV"
              lastRefresh:
                type: string
                format: date-time
                description: When this cache entry was last refreshed
                example: "2025-08-27T14:25:00Z"
              entryCount:
                type: integer
                description: Number of cached entries for this environment
                example: 1
            required:
              - environment
              - lastRefresh
              - entryCount
        environmentDetection:
          type: object
          description: Environment detection information
          properties:
            currentEnvironment:
              type: string
              description: Currently detected environment
              example: "DEV"
            detectionMethod:
              type: string
              description: Method used to detect environment
              example: "CONFLUENCE_BASE_URL"
            fallbackUsed:
              type: boolean
              description: Whether fallback detection was used
              example: false
          required:
            - currentEnvironment
            - detectionMethod
            - fallbackUsed
        timestamp:
          type: string
          format: date-time
          description: Timestamp when debug information was generated
          example: "2025-08-27T14:30:00Z"
      required:
        - serviceHealth
        - cachedConfigurations
        - environmentDetection
        - timestamp

    MigrationSummary:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
        mig_name:
          type: string
        mig_status:
          type: integer
        statusMetadata:
          $ref: "#/components/schemas/StatusMetadata"

    Migration:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: integer
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date
        mig_business_cutover_date:
          type: string
          format: date
        usr_id_owner:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          type: string
          description: Username of the user who created the migration
        updated_by:
          type: string
          description: Username of the user who last updated the migration
        iteration_count:
          type: integer
          description: Count of iterations associated with the migration
          readOnly: true
        plan_count:
          type: integer
          description: Count of distinct plans associated with the migration via iterations
          readOnly: true
        statusMetadata:
          $ref: "#/components/schemas/StatusMetadata"

    CreateMigrationRequest:
      type: object
      required:
        - mig_name
      properties:
        mig_name:
          type: string
          minLength: 1
          description: Name of the migration (required)
          example: "Data Center Migration Q3 2025"
        mig_description:
          type: string
          description: Detailed description of the migration
          example: "Migration of all core services to new data center."
        mig_status:
          oneOf:
            - type: string
              enum:
                ["PLANNING", "IN_PROGRESS", "COMPLETED", "ON_HOLD", "CANCELLED"]
              description: Status as string name
              example: "PLANNING"
            - type: integer
              enum: [1, 2, 3, 4, 5]
              description: Status as integer ID (1=PLANNING, 2=IN_PROGRESS, 3=COMPLETED, 4=ON_HOLD, 5=CANCELLED)
              example: 1
          description: Migration status - accepts either string name or integer ID. Defaults to PLANNING if not provided.
        mig_start_date:
          type: string
          description: Start date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-07-01"
        mig_end_date:
          type: string
          description: End date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-09-30"
        mig_business_cutover_date:
          type: string
          description: Business cutover date - supports both YYYY-MM-DD and YYYY-MM-DDTHH:mm:ss formats
          example: "2025-08-15T14:30:00"
        mig_type:
          type: string
          description: Type of migration (defaults to 'MIGRATION')
          example: "Infrastructure"
        usr_id_owner:
          type: integer
          description: Owner user ID (optional - auto-assigned using admin → active → any user fallback if not provided)
          example: 123
        created_by:
          type: string
          description: Username of the user creating the migration (auto-populated if not provided)
          example: "admin"
        updated_by:
          type: string
          description: Username of the user creating the migration (auto-populated if not provided)
          example: "admin"

    UpdateMigrationRequest:
      type: object
      properties:
        mig_name:
          type: string
          minLength: 1
        mig_description:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date
        mig_business_cutover_date:
          type: string
          format: date
        mig_type:
          type: string
        usr_id_owner:
          type: integer
        mig_status:
          type: integer
        updated_by:
          type: string
          description: Username of the user updating the migration (auto-populated if not provided)

    StatusMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        type:
          type: string

    PaginatedMigrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Migration"
        pagination:
          $ref: "#/components/schemas/PaginationMetadata"
        filters:
          $ref: "#/components/schemas/FilterMetadata"

    PaginationMetadata:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    FilterMetadata:
      type: object
      properties:
        search:
          type: string
        status:
          type: array
          items:
            type: string
        sort:
          type: string
        direction:
          type: string

    DashboardSummary:
      type: object
      properties:
        data:
          type: object
          properties:
            totalMigrations:
              type: integer
            byStatus:
              type: object
              additionalProperties:
                type: integer
            upcomingDeadlines:
              type: array
              items:
                type: object
                properties:
                  mig_id:
                    type: string
                    format: uuid
                  mig_name:
                    type: string
                  mig_end_date:
                    type: string
                    format: date
                  daysRemaining:
                    type: integer
            recentUpdates:
              type: array
              items:
                type: object
                properties:
                  mig_id:
                    type: string
                    format: uuid
                  mig_name:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
                  action:
                    type: string

    DashboardProgress:
      type: object
      properties:
        data:
          type: object
          properties:
            migrationId:
              type: string
              format: uuid
            name:
              type: string
            overallProgress:
              type: number
              minimum: 0
              maximum: 100
            iterationsProgress:
              type: array
              items:
                type: object
                properties:
                  ite_id:
                    type: string
                    format: uuid
                  ite_name:
                    type: string
                  progress:
                    type: number
                  status:
                    type: string
            milestones:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                  completed:
                    type: boolean
            timeline:
              type: object
              properties:
                start:
                  type: string
                  format: date
                end:
                  type: string
                  format: date
                current:
                  type: string
                  format: date

    DashboardMetrics:
      type: object
      properties:
        data:
          type: object
          properties:
            period:
              type: string
            migrationId:
              type: string
              format: uuid
            message:
              type: string
            completionRate:
              type: number
            avgDuration:
              type: number
            statusDistribution:
              type: object
            trends:
              type: array
              items:
                type: object

    BulkStatusUpdateRequest:
      type: object
      required:
        - migrationIds
        - newStatus
      properties:
        migrationIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        newStatus:
          type: string
          minLength: 1
        reason:
          type: string

    BulkExportRequest:
      type: object
      required:
        - migrationIds
      properties:
        migrationIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        format:
          type: string
          enum: [json, csv]
          default: json
        includeIterations:
          type: boolean
          default: false

    BulkOperationResult:
      type: object
      properties:
        updated:
          type: array
          items:
            type: string
            format: uuid
        failed:
          type: array
          items:
            type: object
            properties:
              migrationId:
                type: string
                format: uuid
              error:
                type: string
        summary:
          type: object
          properties:
            total:
              type: integer
            updated:
              type: integer
            failed:
              type: integer
            message:
              type: string

    BulkExportResult:
      type: object
      properties:
        exportId:
          type: string
          format: uuid
        format:
          type: string
        totalRecords:
          type: integer
        includeIterations:
          type: boolean
        generatedAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
        expiresAt:
          type: string
          format: date-time

    IterationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    Team:
      type: object
      properties:
        tms_id:
          type: integer
          description: Unique identifier for the team
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    Label:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the label
        name:
          type: string
          description: Name of the label
        description:
          type: string
          description: Description of the label
        color:
          type: string
          pattern: "^#[0-9a-fA-F]{6}$"
          description: Hex color code for the label

    LabelDetail:
      type: object
      properties:
        lbl_id:
          type: integer
          description: Unique identifier for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: "^#[0-9a-fA-F]{6}$"
          description: Hex color code for the label
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: User ID who created the label
        applications:
          type: array
          items:
            type: object
            properties:
              app_id:
                type: integer
              app_code:
                type: string
              app_name:
                type: string
        step_count:
          type: integer
          description: Number of associated steps

    LabelCreate:
      type: object
      required:
        - lbl_name
        - lbl_color
        - mig_id
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: "^#[0-9a-fA-F]{6}$"
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to

    LabelUpdate:
      type: object
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: "^#[0-9a-fA-F]{6}$"
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to

    LabelStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        step_type:
          type: string
          description: Step type code
        step_number:
          type: integer
          description: Step number
        step_title:
          type: string
          description: Step title/name

    MasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        stt_code:
          type: string
          description: Step type code
        stm_step_number:
          type: integer
          description: Step number
        stm_title:
          type: string
          description: Step title/name
        stm_description:
          type: string
          description: Step description
        stt_name:
          type: string
          description: Step type name
        step_code:
          type: string
          description: Composed step code (type-number)
        display_name:
          type: string
          description: Display name for dropdowns

    StepInstanceDetails:
      type: object
      description: Complete details for a step instance, including instructions, comments, and metadata
      properties:
        stepSummary:
          type: object
          description: Summary information about the step
          properties:
            ID:
              type: string
              format: uuid
              description: Step instance ID
            StepCode:
              type: string
              pattern: '^[A-Z]{3}-\d{3}$'
              description: Step code (e.g., APP-001)
            Name:
              type: string
              description: Step name
            Status:
              type: string
              description: Current status of the step
            Duration:
              type: integer
              nullable: true
              description: Duration in minutes
            AssignedTeam:
              type: string
              description: Name of the team assigned to this step
            PredecessorCode:
              type: string
              nullable: true
              description: Code of the predecessor step if any
            PredecessorName:
              type: string
              nullable: true
              description: Name of the predecessor step if any
            TargetEnvironment:
              type: string
              nullable: true
              description: Target environment for this step
            Description:
              type: string
              nullable: true
              description: Step description
            MigrationName:
              type: string
              description: Name of the migration
            IterationName:
              type: string
              description: Name of the iteration
            PlanName:
              type: string
              description: Name of the plan
            SequenceName:
              type: string
              description: Name of the sequence
            PhaseName:
              type: string
              description: Name of the phase
            Labels:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Label name
                  color:
                    type: string
                    description: Label color in hex format
        instructions:
          type: array
          description: List of instructions for this step
          items:
            type: object
            properties:
              Id:
                type: string
                format: uuid
                description: Instruction instance ID
              Order:
                type: integer
                description: Display order of the instruction
              Description:
                type: string
                description: Instruction text
              Duration:
                type: integer
                nullable: true
                description: Duration in minutes
              IsCompleted:
                type: boolean
                description: Whether the instruction is completed
        impactedTeams:
          type: array
          description: Teams impacted by this step
          items:
            type: object
            properties:
              name:
                type: string
                description: Team name
        comments:
          type: array
          description: Comments on this step instance
          items:
            type: object
            properties:
              id:
                type: integer
                description: Comment ID
              body:
                type: string
                description: Comment text
              createdAt:
                type: string
                format: date-time
                description: When the comment was created
              author:
                type: object
                properties:
                  name:
                    type: string
                    description: Author's display name
                  team:
                    type: string
                    nullable: true
                    description: Author's team name

    InstructionInstance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Instruction instance ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          description: Instruction description
        content:
          type: string
          description: Instruction content/details
        status:
          type: string
          description: Instruction status
        number:
          type: integer
          description: Instruction number within the step
        isCompleted:
          type: boolean
          description: Whether the instruction is completed

    StepStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            [PENDING, TODO, IN_PROGRESS, COMPLETED, FAILED, BLOCKED, CANCELLED]
          description: New status for the step (legacy string support)
        statusId:
          type: integer
          description: New status ID for the step (modern database-validated approach)
        userId:
          type: integer
          description: User ID for audit logging
      description: |
        Update step status using either statusId (preferred) or status (legacy).
        Only one of statusId or status should be provided.

    StepStatusUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        newStatus:
          type: string
          description: The new status that was set
        emailsSent:
          type: integer
          description: Number of notification emails sent

    StepActionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the action was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent

    InstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the completion was successful
        message:
          type: string
          description: Success message
        instructionId:
          type: string
          format: uuid
          description: Instruction ID
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent

    # ==================== INSTRUCTION SCHEMAS ====================

    MasterInstruction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Master instruction ID
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        teamName:
          type: string
          nullable: true
          description: Responsible team name
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        controlName:
          type: string
          nullable: true
          description: Associated control name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User who created the instruction
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          nullable: true
          description: User who last updated the instruction

    MasterInstructionCreate:
      type: object
      required:
        - stepMasterId
        - name
        - content
        - instructionOrder
      properties:
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        createdBy:
          type: integer
          description: User creating the instruction

    MasterInstructionUpdate:
      type: object
      properties:
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        updatedBy:
          type: integer
          description: User updating the instruction

    InstructionInstanceCreate:
      type: object
      required:
        - masterInstructionIds
      properties:
        masterInstructionIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of master instruction IDs to create instances from

    InstructionCompleteRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          description: User ID marking the instruction as complete

    InstructionUncompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the uncomplete action was successful
        message:
          type: string
          description: Success message
        instructionInstanceId:
          type: string
          format: uuid
          description: Instruction instance ID

    BulkInstructionCompleteRequest:
      type: object
      required:
        - instructionInstanceIds
        - userId
      properties:
        instructionInstanceIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of instruction instance IDs to complete
        userId:
          type: integer
          description: User ID marking the instructions as complete

    BulkInstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the bulk completion was successful
        message:
          type: string
          description: Success message
        completedCount:
          type: integer
          description: Number of instructions successfully completed
        failedCount:
          type: integer
          description: Number of instructions that failed to complete
        emailsSent:
          type: integer
          description: Number of notification emails sent

    InstructionReorderRequest:
      type: object
      required:
        - orderData
      properties:
        orderData:
          type: array
          items:
            type: object
            required:
              - instructionId
              - order
            properties:
              instructionId:
                type: string
                format: uuid
                description: Instruction ID
              order:
                type: integer
                description: New order position
          description: List of instruction ID and order pairs

    ReorderResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the reorder was successful
        message:
          type: string
          description: Success message
        updatedCount:
          type: integer
          description: Number of instructions reordered

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message
        deletedId:
          type: string
          format: uuid
          description: ID of the deleted entity

    InstructionProgressAnalytics:
      type: object
      properties:
        totalInstructions:
          type: integer
          description: Total number of instruction instances
        completedInstructions:
          type: integer
          description: Number of completed instruction instances
        completionPercentage:
          type: number
          format: double
          description: Completion percentage (0-100)
        teamBreakdown:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              totalInstructions:
                type: integer
                description: Total instructions for this team
              completedInstructions:
                type: integer
                description: Completed instructions for this team
              completionPercentage:
                type: number
                format: double
                description: Team completion percentage
          description: Progress breakdown by team
        phaseBreakdown:
          type: array
          items:
            type: object
            properties:
              phaseId:
                type: string
                format: uuid
                description: Phase instance ID
              phaseName:
                type: string
                description: Phase name
              totalInstructions:
                type: integer
                description: Total instructions in this phase
              completedInstructions:
                type: integer
                description: Completed instructions in this phase
              completionPercentage:
                type: number
                format: double
                description: Phase completion percentage
          description: Progress breakdown by phase

    InstructionCompletionAnalytics:
      type: object
      properties:
        timelineData:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: Date of completion
              count:
                type: integer
                description: Number of instructions completed on this date
              cumulativeCount:
                type: integer
                description: Cumulative count of completed instructions
          description: Daily completion timeline
        averageCompletionTime:
          type: number
          format: double
          description: Average time to complete instructions (in hours)
        peakCompletionDays:
          type: array
          items:
            type: string
            format: date
          description: Days with highest completion activity
        teamPerformance:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              averageCompletionTime:
                type: number
                format: double
                description: Average completion time for this team (in hours)
              totalCompleted:
                type: integer
                description: Total instructions completed by this team
          description: Team performance metrics

    # --- Control Schemas ---
    MasterControl:
      type: object
      properties:
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phm_id:
          type: string
          format: uuid
          description: Associated phase master ID
        ctm_order:
          type: integer
          description: Display order within phase
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type (VALIDATION, CHECK, APPROVAL)
        ctm_is_critical:
          type: boolean
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        created_by:
          type: string
          description: User who created the control
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          nullable: true
          description: User who last updated the control
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
        phm_name:
          type: string
          description: Phase master name
        phase_description:
          type: string
          nullable: true
          description: Phase description
        sqm_id:
          type: string
          format: uuid
          description: Sequence master ID
        sqm_name:
          type: string
          description: Sequence master name
        sequence_description:
          type: string
          nullable: true
          description: Sequence description
        plm_id:
          type: string
          format: uuid
          description: Plan master ID
        plm_name:
          type: string
          description: Plan master name
        plan_description:
          type: string
          nullable: true
          description: Plan description
        tms_id:
          type: integer
          description: Team ID
        tms_name:
          type: string
          description: Team name

    ControlInstance:
      type: object
      properties:
        cti_id:
          type: string
          format: uuid
          description: Control instance ID
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phi_id:
          type: string
          format: uuid
          description: Associated phase instance ID
        cti_order:
          type: integer
          description: Display order within phase
        cti_name:
          type: string
          description: Control instance name
        cti_description:
          type: string
          nullable: true
          description: Control instance description
        cti_type:
          type: string
          nullable: true
          description: Control type
        cti_is_critical:
          type: boolean
          description: Whether this is a critical control
        cti_code:
          type: string
          nullable: true
          description: Control code identifier
        cti_status:
          type: string
          description: Control status (PENDING, IN_PROGRESS, VALIDATED, FAILED, OVERRIDDEN)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID
        created_by:
          type: string
          description: User who created the instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          nullable: true
          description: User who last updated the instance
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
        ctm_name:
          type: string
          description: Master control name
        master_description:
          type: string
          nullable: true
          description: Master control description
        phi_name:
          type: string
          description: Phase instance name
        phase_description:
          type: string
          nullable: true
          description: Phase instance description
        sqi_id:
          type: string
          format: uuid
          description: Sequence instance ID
        sequence_name:
          type: string
          description: Sequence instance name
        pli_id:
          type: string
          format: uuid
          description: Plan instance ID
        plan_name:
          type: string
          description: Plan instance name
        ite_id:
          type: string
          format: uuid
          description: Iteration ID
        iteration_name:
          type: string
          description: Iteration name
        mig_id:
          type: string
          format: uuid
          description: Migration ID
        migration_name:
          type: string
          description: Migration name
        it_validator_name:
          type: string
          nullable: true
          description: IT validator name
        biz_validator_name:
          type: string
          nullable: true
          description: Business validator name

    CreateMasterControlRequest:
      type: object
      required:
        - phm_id
        - ctm_name
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type
        ctm_is_critical:
          type: boolean
          nullable: true
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        ctm_order:
          type: integer
          nullable: true
          description: Display order within phase

    UpdateMasterControlRequest:
      type: object
      properties:
        ctm_name:
          type: string
          description: Control name
        ctm_description:
          type: string
          nullable: true
          description: Control description
        ctm_type:
          type: string
          nullable: true
          description: Control type
        ctm_is_critical:
          type: boolean
          nullable: true
          description: Whether this is a critical control
        ctm_code:
          type: string
          nullable: true
          description: Control code identifier
        ctm_order:
          type: integer
          nullable: true
          description: Display order within phase
        phm_id:
          type: string
          format: uuid
          nullable: true
          description: Associated Phase Master ID for Admin GUI EDIT mode support

    CreateControlInstanceRequest:
      type: object
      required:
        - ctm_id
        - phi_id
      properties:
        ctm_id:
          type: string
          format: uuid
          description: Master control ID
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_name:
          type: string
          nullable: true
          description: Override control name
        cti_description:
          type: string
          nullable: true
          description: Override control description
        cti_status:
          type: string
          nullable: true
          description: Initial status (defaults to PENDING)
        cti_order:
          type: integer
          nullable: true
          description: Override display order
        cti_type:
          type: string
          nullable: true
          description: Override control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Override critical flag
        cti_code:
          type: string
          nullable: true
          description: Override control code
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID

    UpdateControlInstanceRequest:
      type: object
      properties:
        cti_name:
          type: string
          description: Control instance name
        cti_description:
          type: string
          nullable: true
          description: Control instance description
        cti_status:
          type: string
          nullable: true
          description: Control status
        cti_order:
          type: integer
          nullable: true
          description: Display order
        cti_type:
          type: string
          nullable: true
          description: Control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Critical flag
        cti_code:
          type: string
          nullable: true
          description: Control code
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID

    InstantiateControlRequest:
      type: object
      required:
        - phi_id
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_name:
          type: string
          nullable: true
          description: Override control name
        cti_description:
          type: string
          nullable: true
          description: Override control description
        cti_status:
          type: string
          nullable: true
          description: Initial status (defaults to PENDING)
        cti_order:
          type: integer
          nullable: true
          description: Override display order
        cti_type:
          type: string
          nullable: true
          description: Override control type
        cti_is_critical:
          type: boolean
          nullable: true
          description: Override critical flag
        cti_code:
          type: string
          nullable: true
          description: Override control code

    ReorderControlsRequest:
      type: object
      required:
        - phm_id
        - control_order
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
        control_order:
          type: array
          items:
            type: string
            format: uuid
          description: Ordered array of control IDs

    ValidateControlRequest:
      type: object
      properties:
        cti_status:
          type: string
          description: New status (typically VALIDATED)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID

    OverrideControlRequest:
      type: object
      required:
        - reason
        - overrideBy
      properties:
        reason:
          type: string
          description: Justification for overriding the control
        overrideBy:
          type: string
          description: Email or identifier of person overriding

    BulkValidateControlsRequest:
      type: object
      required:
        - phi_id
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        cti_status:
          type: string
          description: New status for all controls
        usr_id_it_validator:
          type: integer
          nullable: true
          description: IT validator user ID
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: Business validator user ID

    BulkControlResult:
      type: object
      properties:
        created:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/MasterControl"
              - $ref: "#/components/schemas/ControlInstance"
          description: Successfully created controls
        failures:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
                description: Index in request array
              error:
                type: string
                description: Error message
          description: Failed control creations
        summary:
          type: object
          properties:
            total_requested:
              type: integer
              description: Total controls requested
            created_count:
              type: integer
              description: Number successfully created
            failed_count:
              type: integer
              description: Number of failures

    ControlProgress:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        phase_name:
          type: string
          description: Phase name
        total_controls:
          type: integer
          description: Total number of controls
        validated_controls:
          type: integer
          description: Number of validated controls
        pending_controls:
          type: integer
          description: Number of pending controls
        overridden_controls:
          type: integer
          description: Number of overridden controls
        critical_controls:
          type: integer
          description: Total critical controls
        critical_validated:
          type: integer
          description: Number of validated critical controls
        progress_percentage:
          type: number
          format: double
          description: Overall progress percentage
        critical_progress_percentage:
          type: number
          format: double
          description: Critical controls progress percentage
        validation_status:
          type: string
          description: Overall validation status (COMPLETE, IN_PROGRESS, NOT_STARTED)
          enum: [COMPLETE, IN_PROGRESS, NOT_STARTED]

    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment ID
        body:
          type: string
          description: Comment text content
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User ID who created the comment
        createdByName:
          type: string
          description: Name of the user who created the comment
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          description: User ID who last updated the comment
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance this comment belongs to

    CommentCreate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)

    CommentUpdate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Updated comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)

    CommentCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the creation was successful
        commentId:
          type: integer
          description: ID of the created comment
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    CommentUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message

    CommentDeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message

    Status:
      type: object
      properties:
        sts_id:
          type: integer
          description: Status ID
        sts_code:
          type: string
          description: Status code
        sts_name:
          type: string
          description: Status name
        sts_description:
          type: string
          description: Status description
        sts_type:
          type: string
          description: Entity type this status applies to
        sts_color:
          type: string
          pattern: "^#[0-9a-fA-F]{6}$"
          description: Hex color code for the status
        sts_sort_order:
          type: integer
          description: Sort order for display

    IterationType:
      type: object
      properties:
        itt_code:
          type: string
          description: Iteration type code
          example: "PILOT"
        itt_name:
          type: string
          description: Iteration type name
          example: "Pilot Migration"
      required:
        - itt_code
        - itt_name

    UserContext:
      type: object
      properties:
        userId:
          type: integer
          description: User ID
        username:
          type: string
          description: Username/code
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        isAdmin:
          type: boolean
          description: Whether the user has admin privileges
        roleId:
          type: integer
          description: Role ID (1=ADMIN, 2=NORMAL, 3=PILOT)
        role:
          type: string
          enum: [ADMIN, NORMAL, PILOT]
          description: Role code - ADMIN (full system access), NORMAL (standard user), PILOT (execution privileges)
        isActive:
          type: boolean
          description: Whether the user account is active

    TeamCreateRequest:
      type: object
      required:
        - tms_name
        - tms_email
      properties:
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    # --- Plans Models ---
    MasterPlan:
      type: object
      properties:
        plm_id:
          type: string
          format: uuid
          description: Unique identifier for the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        tms_name:
          type: string
          description: Name of the owning team
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          type: string
          description: Current status of the master plan
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the plan
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    MasterPlanInput:
      type: object
      required:
        - tms_id
        - plm_name
        - plm_status
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description: Initial status of the master plan - accepts either status name (string) or status ID (integer) for flexible input handling
          example: "PLANNING"

    MasterPlanUpdate:
      type: object
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description: Status of the master plan - accepts either status name (string) or status ID (integer) for flexible input handling
          example: "PLANNING"

    PlanInstance:
      type: object
      properties:
        pli_id:
          type: string
          format: uuid
          description: Unique identifier for the plan instance
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan template
        plm_name:
          type: string
          description: Name of the master plan
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration this instance belongs to
        itr_name:
          type: string
          description: Name of the iteration
        mig_name:
          type: string
          description: Name of the migration
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description: Current status of the plan instance - accepts either status name (string) or status ID (integer) for flexible input handling
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        created_by:
          type: string
          description: User who created the plan instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    PlanInstanceDetail:
      allOf:
        - $ref: "#/components/schemas/PlanInstance"
        - type: object
          properties:
            plm_description:
              type: string
              description: Description from master plan

    PlanInstanceInput:
      type: object
      required:
        - plm_id
        - ite_id
        - usr_id_owner
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan to instantiate
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration for this instance
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        pli_name:
          type: string
          description: Override name for the instance (optional)
        pli_description:
          type: string
          description: Override description for the instance (optional)

    PlanInstanceUpdate:
      type: object
      properties:
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          oneOf:
            - type: string
              description: Status name (e.g., "PLANNING", "ACTIVE", "COMPLETED")
            - type: integer
              description: Status ID (references status_sts table)
          description: Status of the plan instance - accepts either status name (string) or status ID (integer) for flexible input handling
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance

    # --- Sequences Models ---
    MasterSequence:
      type: object
      properties:
        sqm_id:
          type: string
          format: uuid
          description: Unique identifier for the master sequence
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        plm_name:
          type: string
          description: Name of the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this sequence
        tms_name:
          type: string
          description: Name of the owning team
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan
        sqm_status:
          type: string
          description: Current status of the master sequence
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the sequence
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    CreateSequenceRequest:
      type: object
      required:
        - plm_id
        - sqm_name
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        tms_id:
          type: integer
          description: ID of the team that owns this sequence (auto-assigned from plan if not provided)
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan (auto-assigned as next available if not provided)
        sqm_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "INACTIVE")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: "DRAFT"
          description: Initial status of the master sequence - accepts both string names and integer IDs
        planned_start_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-15"
          description: Planned start date - supports multiple date formats with automatic conversion
        planned_end_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-20"
          description: Planned end date - supports multiple date formats with automatic conversion

    UpdateSequenceOrderRequest:
      type: object
      required:
        - sqm_order
      properties:
        sqm_order:
          type: integer
          description: New display order for the sequence

    SequenceInstance:
      type: object
      properties:
        sqi_id:
          type: string
          format: uuid
          description: Unique identifier for the sequence instance
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence template
        sqm_name:
          type: string
          description: Name of the master sequence
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance this sequence belongs to
        pli_name:
          type: string
          description: Name of the plan instance
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration
        itr_name:
          type: string
          description: Name of the iteration
        mig_id:
          type: string
          format: uuid
          description: ID of the migration
        mig_name:
          type: string
          description: Name of the migration
        sqi_name:
          type: string
          description: Name of the sequence instance
        sqi_description:
          type: string
          description: Description of the sequence instance
        sqi_order:
          type: integer
          description: Display order within the plan instance
        sqi_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "IN_PROGRESS", "COMPLETED")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: "IN_PROGRESS"
          description: Current status - accepts both string names and integer IDs for flexible input
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        tms_name:
          type: string
          description: Name of the team
        created_by:
          type: string
          description: User who created the sequence instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp (PostgreSQL timestamp type)
        phase_count:
          type: integer
          description: Number of phases in this sequence instance (computed field)
        step_count:
          type: integer
          description: Total number of steps across all phases (computed field)
        actual_start_date:
          type: string
          format: date
          description: Actual start date (PostgreSQL date type)
        actual_end_date:
          type: string
          format: date
          description: Actual end date (PostgreSQL date type)
        completion_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Completion percentage based on completed steps (computed field)

    CreateSequenceInstanceRequest:
      type: object
      required:
        - sqm_id
        - pli_id
        - usr_id_owner
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence to instantiate
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance for this sequence
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        sqi_name:
          type: string
          description: Override name for the sequence instance (optional)
        sqi_description:
          type: string
          description: Override description for the sequence instance (optional)
        sqi_status:
          oneOf:
            - type: string
              description: Status name (e.g., "DRAFT", "ACTIVE", "IN_PROGRESS", "COMPLETED")
            - type: integer
              description: Status ID (foreign key to status_sts table)
          example: "DRAFT"
          description: Initial status - accepts both string names and integer IDs for flexible assignment
        actual_start_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-15"
          description: Actual start date - supports multiple date formats with automatic conversion
        actual_end_date:
          oneOf:
            - type: string
              format: date
              description: Date in YYYY-MM-DD format
            - type: string
              format: date-time
              description: ISO 8601 datetime string
            - type: string
              description: Flexible date format (DD/MM/YYYY, MM-DD-YYYY, etc.)
          example: "2025-03-20"
          description: Actual end date - supports multiple date formats with automatic conversion

    User:
      type: object
      properties:
        usr_id:
          type: integer
          description: Unique identifier for the user
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active
        rls_id:
          type: integer
          description: Role ID
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        teams:
          type: array
          items:
            type: object
            properties:
              tms_id:
                type: integer
              tms_name:
                type: string
              tms_description:
                type: string
              tms_email:
                type: string
                format: email
          description: Teams the user belongs to

    UserInput:
      type: object
      required:
        - usr_first_name
        - usr_last_name
        - usr_is_admin
      properties:
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active (defaults to true)
        rls_id:
          type: integer
          description: Role ID

    PlanInstanceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PhaseSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        phases:
          type: array
          items:
            $ref: "#/components/schemas/PhaseWithSteps"

    PhaseWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepWithLabels"

    StepWithLabels:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: Formatted step code (e.g., "BGO-001")
        name:
          type: string
        status:
          type: string
          enum: [NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED]
        durationMinutes:
          type: integer
        ownerTeamId:
          type: integer
        ownerTeamName:
          type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"

    # --- Environment Schemas ---
    Environment:
      type: object
      properties:
        env_id:
          type: integer
          description: Unique identifier for the environment
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentWithCounts:
      allOf:
        - $ref: "#/components/schemas/Environment"
        - type: object
          properties:
            application_count:
              type: integer
              description: Number of applications associated with this environment
            iteration_count:
              type: integer
              description: Number of iterations associated with this environment

    EnvironmentCreateRequest:
      type: object
      required:
        - env_code
        - env_name
      properties:
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentDetails:
      allOf:
        - $ref: "#/components/schemas/EnvironmentWithCounts"
        - type: object
          properties:
            applications:
              type: array
              items:
                $ref: "#/components/schemas/Application"
              description: List of applications associated with this environment
            iterations:
              type: array
              items:
                $ref: "#/components/schemas/IterationWithRole"
              description: List of iterations associated with this environment

    Application:
      type: object
      properties:
        app_id:
          type: integer
          description: Unique identifier for the application
        app_code:
          type: string
          description: Application code
        app_name:
          type: string
          description: Name of the application
        app_description:
          type: string
          description: Description of the application

    IterationWithRole:
      allOf:
        - $ref: "#/components/schemas/IterationSummary"
        - type: object
          properties:
            role:
              $ref: "#/components/schemas/EnvironmentRole"

    EnvironmentRole:
      type: object
      properties:
        enr_id:
          type: integer
          description: Unique identifier for the environment role
        enr_code:
          type: string
          description: Role code (e.g., SOURCE, TARGET)
        enr_name:
          type: string
          description: Role name
        enr_description:
          type: string
          description: Role description

    PaginatedEnvironments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentWithCounts"
        total:
          type: integer
          description: Total number of environments
        page:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages

    RoleIterations:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/EnvironmentRole"
        iterations:
          type: array
          items:
            $ref: "#/components/schemas/IterationSummary"

    BlockingRelationshipsError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        blocking_relationships:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          description: Object containing arrays of blocking relationships by type

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message

    # --- Email Template Schemas ---
    EmailTemplate:
      type: object
      properties:
        emt_id:
          type: string
          format: uuid
          description: Unique identifier for the email template
        emt_type:
          type: string
          enum:
            [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active
        emt_created_date:
          type: string
          format: date-time
          description: Creation timestamp
        emt_updated_date:
          type: string
          format: date-time
          description: Last update timestamp
        emt_created_by:
          type: string
          description: Username who created the template
        emt_updated_by:
          type: string
          description: Username who last updated the template

    EmailTemplateCreate:
      type: object
      required:
        - emt_type
        - emt_name
        - emt_subject
        - emt_body_html
      properties:
        emt_type:
          type: string
          enum:
            [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          default: true
          description: Whether the template is active

    EmailTemplateUpdate:
      type: object
      properties:
        emt_type:
          type: string
          enum:
            [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active

    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    EnhancedError:
      type: object
      description: Enhanced error response with usage guidance (introduced in US-024)
      properties:
        error:
          type: string
          description: Error description
          example: "Invalid comments endpoint usage"
        message:
          type: string
          description: Helpful guidance message
          example: "To access comments, use: /rest/scriptrunner/latest/custom/steps/{stepInstanceId}/comments"
        example:
          type: string
          description: Concrete usage example
          example: "/rest/scriptrunner/latest/custom/steps/f9aa535d-4d8b-447c-9d89-16494f678702/comments"

    # === PHASES API SCHEMAS ===
    MasterPhase:
      type: object
      properties:
        phm_id:
          type: string
          format: uuid
          description: Unique identifier for the master phase
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor master phase
        # Computed fields (available in Admin GUI responses)
        step_count:
          type: integer
          description: Number of steps associated with this master phase
          readOnly: true
        instance_count:
          type: integer
          description: Number of phase instances created from this master phase
          readOnly: true
        # Status information with metadata
        phm_status:
          type: string
          description: Status of the master phase (typically 'ACTIVE')
          readOnly: true
        statusMetadata:
          type: object
          readOnly: true
          properties:
            sts_id:
              type: integer
              description: Status ID
            sts_name:
              type: string
              description: Status name
            sts_color:
              type: string
              description: Status display color for UI
            sts_type:
              type: string
              description: Status type ('Phase')
        # Enriched relationship data (when available)
        sqm_name:
          type: string
          description: Name of the parent sequence
          readOnly: true
        plm_name:
          type: string
          description: Name of the parent plan
          readOnly: true
        tms_name:
          type: string
          description: Name of the associated team
          readOnly: true
        # Audit fields
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this phase
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this phase

    PhaseInstance:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Unique identifier for the phase instance
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase this instance is based on
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          type: integer
          description: Status ID (foreign key to status_sts table)
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          nullable: true
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          nullable: true
          description: Actual end time of the phase
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this instance

    ControlPoint:
      type: object
      properties:
        cti_id:
          type: string
          format: uuid
          description: Unique identifier for the control point instance
        phi_id:
          type: string
          format: uuid
          description: ID of the phase instance this control point belongs to
        cti_name:
          type: string
          description: Name of the control point
        cti_description:
          type: string
          description: Description of the control point
        cti_status:
          type: string
          description: Current status of the control point
        cti_type:
          type: string
          description: Type of control point (validation, checkpoint, etc.)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: ID of the business validator user
        is_overridden:
          type: boolean
          description: Whether the control point has been overridden
        override_reason:
          type: string
          nullable: true
          description: Reason for override if applicable
        override_by:
          type: string
          nullable: true
          description: User who performed the override
        override_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the override

    ControlPointValidation:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        validation_status:
          type: string
          description: Overall validation status (passed, failed, warning)
        total_controls:
          type: integer
          description: Total number of control points
        validated_controls:
          type: integer
          description: Number of validated control points
        failed_controls:
          type: integer
          description: Number of failed control points
        control_details:
          type: array
          items:
            type: object
            properties:
              cti_id:
                type: string
                format: uuid
                description: Control point instance ID
              cti_name:
                type: string
                description: Control point name
              status:
                type: string
                description: Individual control point status
              validation_result:
                type: string
                description: Validation result details

    PhaseProgress:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        progress_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Progress percentage (0-100)

    CreateMasterPhaseRequest:
      type: object
      required:
        - sqm_id
        - phm_name
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase

    UpdateMasterPhaseRequest:
      type: object
      properties:
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase

    CreatePhaseInstanceRequest:
      type: object
      required:
        - phm_id
        - sqi_id
      properties:
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase to instantiate
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name override for the phase instance
        phi_description:
          type: string
          description: Description override for the phase instance
        phi_status:
          oneOf:
            - type: string
              description: Status name (e.g., 'PLANNING', 'IN_PROGRESS', 'COMPLETED')
            - type: integer
              description: Status ID (numeric identifier)
          description: |
            Initial status of the phase instance. Supports flexible input:
            - String names: 'PLANNING', 'IN_PROGRESS', 'COMPLETED', 'ON_HOLD', 'CANCELLED'
            - Integer IDs: Numeric status identifiers from status_sts table
            Repository automatically resolves string names to appropriate IDs.
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance

    UpdatePhaseInstanceRequest:
      type: object
      properties:
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          oneOf:
            - type: string
              description: Status name (e.g., 'PLANNING', 'IN_PROGRESS', 'COMPLETED')
            - type: integer
              description: Status ID (numeric identifier)
          description: |
            Status of the phase instance. Supports flexible input:
            - String names: 'PLANNING', 'IN_PROGRESS', 'COMPLETED', 'ON_HOLD', 'CANCELLED'
            - Integer IDs: Numeric status identifiers from status_sts table
            Repository automatically resolves string names to appropriate IDs.
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          description: Actual end time of the phase

    UpdateControlPointRequest:
      type: object
      properties:
        cti_status:
          type: string
          description: New status for the control point
        usr_id_it_validator:
          type: integer
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          description: ID of the business validator user

    OverrideControlPointRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for the override
          default: "Override requested"
        overrideBy:
          type: string
          description: User performing the override
          default: "system"

    ReorderMasterPhasesRequest:
      type: object
      required:
        - sequenceId
        - phaseOrderMap
      properties:
        sequenceId:
          type: string
          format: uuid
          description: ID of the master sequence containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase UUID to new order position
          example:
            "123e4567-e89b-12d3-a456-426614174000": 1
            "456e7890-e89b-12d3-a456-426614174001": 2

    ReorderPhaseInstancesRequest:
      type: object
      required:
        - sequenceInstanceId
        - phaseOrderMap
      properties:
        sequenceInstanceId:
          type: string
          format: uuid
          description: ID of the sequence instance containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase instance UUID to new order position
          example:
            "789e0123-e89b-12d3-a456-426614174002": 1
            "012e3456-e89b-12d3-a456-426614174003": 2

    MovePhaseRequest:
      type: object
      required:
        - newOrder
      properties:
        newOrder:
          type: integer
          description: New order position for the phase
          minimum: 1

    # ==================== NEW ITERATION SCHEMAS ====================

    PaginatedIterations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Iteration"
        pagination:
          $ref: "#/components/schemas/PaginationMetadata"
        filters:
          type: object
          description: Applied filters for the request
          properties:
            search:
              type: string
            migrationId:
              type: string
              format: uuid

    Iteration:
      type: object
      properties:
        ite_id:
          type: string
          format: uuid
          description: Unique identifier for the iteration
        ite_name:
          type: string
          description: Name of the iteration
        ite_description:
          type: string
          description: Description of the iteration
        mig_id:
          type: string
          format: uuid
          description: Migration ID this iteration belongs to
        migration_name:
          type: string
          description: Name of the parent migration
        master_plan_name:
          type: string
          description: Name of the master plan associated with this iteration
        itt_code:
          type: string
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          format: date-time
          description: Static cutover date
        ite_dynamic_cutover_date:
          type: string
          format: date-time
          description: Dynamic cutover date
        ite_status:
          type: integer
          description: Status ID of the iteration
        status_metadata:
          $ref: "#/components/schemas/StatusMetadata"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        created_by:
          type: string
          description: Username who created the iteration
        updated_by:
          type: string
          description: Username who last updated the iteration

    CreateIterationRequest:
      type: object
      description: |
        Request to create a new iteration. Supports flexible field naming:
        - Name: Use either 'ite_name' or 'name'
        - Migration ID: Use either 'mig_id' or 'migrationId'
        At least one name field and one migration ID field must be provided.
      anyOf:
        - required: [ite_name, mig_id]
        - required: [ite_name, migrationId]
        - required: [name, mig_id]
        - required: [name, migrationId]
      properties:
        ite_name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the iteration (required if 'name' not provided, unique within migration)
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Alternative field name for iteration name (required if 'ite_name' not provided)
        ite_description:
          type: string
          maxLength: 1000
          description: Description of the iteration
        mig_id:
          type: string
          format: uuid
          description: Migration ID this iteration belongs to (required if 'migrationId' not provided)
        migrationId:
          type: string
          format: uuid
          description: Alternative field name for migration ID (required if 'mig_id' not provided)
        itt_code:
          type: string
          maxLength: 50
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          description: Static cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
        ite_dynamic_cutover_date:
          type: string
          description: Dynamic cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)

    UpdateIterationRequest:
      type: object
      description: |
        Request to update an iteration. Supports flexible field naming:
        - Name: Use either 'ite_name' or 'name'
        Only provided fields are updated (partial updates supported).
      properties:
        ite_name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the iteration (alternative to 'name')
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Alternative field name for iteration name (alternative to 'ite_name')
        ite_description:
          type: string
          maxLength: 1000
          description: Description of the iteration
        itt_code:
          type: string
          maxLength: 50
          description: Iteration type code
        ite_static_cutover_date:
          type: string
          description: Static cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)
        ite_dynamic_cutover_date:
          type: string
          description: Dynamic cutover date (supports YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss formats)

    # ==================== NEW STATUS SCHEMAS ====================

    StatusInfo:
      type: object
      properties:
        id:
          type: integer
          description: Unique status ID
        name:
          type: string
          description: Status name (e.g., PLANNING, IN_PROGRESS, COMPLETED)
        color:
          type: string
          description: Hex color code for UI display
        type:
          type: string
          description: Entity type this status applies to
      example:
        id: 1
        name: "PLANNING"
        color: "#FFA500"
        type: "Migration"

    # ==================== ENHANCED ERROR RESPONSE ====================

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Main error message
        message:
          type: string
          description: Additional error details or context
        details:
          type: string
          description: Technical details about the error
        sqlState:
          type: string
          description: SQL state code for database errors
      example:
        error: "Iteration name is required"
        message: "Validation failed"
        sqlState: "23000"



    # ==================== NEW STEPS API V2.2.0 SCHEMAS ====================

    PaginatedMasterSteps:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/EnhancedMasterStep"
        totalElements:
          type: integer
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        pageNumber:
          type: integer
          description: Current page number (1-based)
        pageSize:
          type: integer
          description: Number of items per page
        hasNext:
          type: boolean
          description: Whether there are more pages available
        hasPrevious:
          type: boolean
          description: Whether there are previous pages
        sortField:
          type: string
          description: Field used for sorting
        sortDirection:
          type: string
          enum: [asc, desc]
          description: Sort direction applied

    EnhancedMasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Master step ID
        stm_name:
          type: string
          description: Step name
        stm_description:
          type: string
          description: Step description
        stm_order:
          type: integer
          description: Step order within phase
        instruction_count:
          type: integer
          description: Number of associated instructions
        instance_count:
          type: integer
          description: Number of step instances
        plm_name:
          type: string
          description: Plan master name
        sqm_name:
          type: string
          description: Sequence master name
        phm_name:
          type: string
          description: Phase master name
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    CreateMasterStepRequest:
      type: object
      required:
        - phm_id
        - tms_id_owner
        - stt_code
        - stm_number
        - stm_name
        - enr_id_target
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID (required)
          example: "f9aa535d-4d8b-447c-9d89-16494f678702"
        tms_id_owner:
          type: integer
          description: Owning team ID (required)
          example: 15
        stt_code:
          type: string
          description: Step type code (required)
          example: "APP"
        stm_number:
          type: integer
          description: Step number within phase (required)
          example: 101
        stm_name:
          type: string
          description: Step name/title (required)
          example: "Deploy Application Components"
        stm_description:
          type: string
          description: Detailed step description (optional)
          example: "Deploy all application components to target environment"
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes (optional)
          example: 45
        enr_id_target:
          type: integer
          description: Target environment role ID (required)
          example: 3
        enr_id:
          type: integer
          description: Source environment role ID (optional)
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID for dependencies (optional)
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    UpdateMasterStepRequest:
      type: object
      description: All fields are optional for partial updates
      properties:
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
          example: "f9aa535d-4d8b-447c-9d89-16494f678702"
        tms_id_owner:
          type: integer
          description: Owning team ID
          example: 18
        stt_code:
          type: string
          description: Step type code
          example: "APP"
        stm_number:
          type: integer
          description: Step number within phase
          example: 102
        stm_name:
          type: string
          description: Step name/title
          example: "Deploy Application Components - Updated"
        stm_description:
          type: string
          description: Detailed step description
          example: "Deploy and validate all application components to target environment"
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes
          example: 60
        enr_id_target:
          type: integer
          description: Target environment role ID
          example: 4
        enr_id:
          type: integer
          description: Source environment role ID
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID for dependencies
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    MasterStepResponse:
      type: object
      description: Complete master step details with computed fields and hierarchical context
      properties:
        stm_id:
          type: string
          format: uuid
          description: Master step ID
          example: "f9aa535d-4d8b-447c-9d89-16494f678702"
        phm_id:
          type: string
          format: uuid
          description: Phase master ID
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        tms_id_owner:
          type: integer
          description: Owning team ID
          example: 15
        stt_code:
          type: string
          description: Step type code
          example: "APP"
        stm_number:
          type: integer
          description: Step number within phase
          example: 101
        stm_name:
          type: string
          description: Step name/title
          example: "Deploy Application Components"
        stm_description:
          type: string
          description: Detailed step description
          example: "Deploy all application components to target environment"
        stm_duration_minutes:
          type: integer
          description: Expected duration in minutes
          example: 45
        enr_id_target:
          type: integer
          description: Target environment role ID
          example: 3
        enr_id:
          type: integer
          description: Source environment role ID
          example: 2
        stm_id_predecessor:
          type: string
          format: uuid
          description: Predecessor step ID
          example: null
        created_by:
          type: string
          description: User who created the step
          example: "admin"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-08-27T10:30:00.000Z"
        updated_by:
          type: string
          description: User who last updated the step
          example: "admin"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-27T11:15:00.000Z"
        phm_name:
          type: string
          description: Phase master name
          example: "Pre-Migration Preparation"
        sqm_name:
          type: string
          description: Sequence master name
          example: "Infrastructure Preparation"
        plm_name:
          type: string
          description: Plan master name
          example: "Data Center Migration Plan"
        owner_team_name:
          type: string
          description: Owning team name
          example: "Infrastructure Team"
        instruction_count:
          type: integer
          description: Number of associated instructions
          example: 5
        instance_count:
          type: integer
          description: Number of step instances
          example: 12

    StepsSummary:
      type: object
      properties:
        totalSteps:
          type: integer
          description: Total number of steps
        completedSteps:
          type: integer
          description: Number of completed steps
        inProgressSteps:
          type: integer
          description: Number of steps in progress
        pendingSteps:
          type: integer
          description: Number of pending steps
        completionPercentage:
          type: number
          format: float
          description: Overall completion percentage
        estimatedRemainingTime:
          type: integer
          description: Estimated remaining time in minutes
        byTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamStepSummary"
        byStatus:
          type: array
          items:
            $ref: "#/components/schemas/StatusStepSummary"

    TeamStepSummary:
      type: object
      properties:
        teamId:
          type: integer
          description: Team ID
        teamName:
          type: string
          description: Team name
        totalSteps:
          type: integer
          description: Total steps assigned to team
        completedSteps:
          type: integer
          description: Completed steps by team
        completionPercentage:
          type: number
          format: float
          description: Team completion percentage

    StatusStepSummary:
      type: object
      properties:
        statusId:
          type: integer
          description: Status ID
        statusName:
          type: string
          description: Status name
        count:
          type: integer
          description: Number of steps with this status
        percentage:
          type: number
          format: float
          description: Percentage of steps with this status

    StepsProgress:
      type: object
      properties:
        migrationId:
          type: string
          format: uuid
          description: Migration ID
        migrationName:
          type: string
          description: Migration name
        overallProgress:
          type: number
          format: float
          description: Overall progress percentage
        sequences:
          type: array
          items:
            $ref: "#/components/schemas/SequenceProgress"
        lastUpdated:
          type: string
          format: date-time
          description: Last update timestamp

    SequenceProgress:
      type: object
      properties:
        sequenceId:
          type: string
          format: uuid
          description: Sequence ID
        sequenceName:
          type: string
          description: Sequence name
        progress:
          type: number
          format: float
          description: Sequence progress percentage
        phases:
          type: array
          items:
            $ref: "#/components/schemas/StepPhaseProgress"

    StepPhaseProgress:
      type: object
      properties:
        phaseId:
          type: string
          format: uuid
          description: Phase ID
        phaseName:
          type: string
          description: Phase name
        progress:
          type: number
          format: float
          description: Phase progress percentage
        stepCount:
          type: integer
          description: Total number of steps in phase
        completedCount:
          type: integer
          description: Number of completed steps in phase

    StepsExportData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ExportedStepData"
        totalCount:
          type: integer
          description: Total number of exported steps
        exportedAt:
          type: string
          format: date-time
          description: Export timestamp

    ExportedStepData:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Step instance ID
        code:
          type: string
          description: Step code
        name:
          type: string
          description: Step name
        status:
          type: string
          description: Step status
        teamName:
          type: string
          description: Assigned team name
        sequenceName:
          type: string
          description: Sequence name
        phaseName:
          type: string
          description: Phase name
        durationMinutes:
          type: integer
          description: Duration in minutes
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    BulkStatusUpdate:
      type: object
      required:
        - stepIds
        - statusId
        - userId
      properties:
        stepIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of step instance IDs to update
        statusId:
          type: integer
          description: New status ID to apply
        userId:
          type: integer
          description: User ID for audit logging

    BulkTeamAssignment:
      type: object
      required:
        - stepIds
        - teamId
        - userId
      properties:
        stepIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of step instance IDs to assign
        teamId:
          type: integer
          description: Team ID to assign steps to
        userId:
          type: integer
          description: User ID for audit logging

    BulkStepReordering:
      type: object
      required:
        - steps
      properties:
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepReorderItem"
          description: Array of steps with new order positions

    StepReorderItem:
      type: object
      required:
        - id
        - newOrder
      properties:
        id:
          type: string
          format: uuid
          description: Step instance ID
        newOrder:
          type: integer
          description: New order position within phase

    # --- Import API Schemas (US-034) ---
    JsonImportRequest:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/ImportStepData"
        filename:
          type: string
          description: Source filename for tracking

    ImportStepData:
      type: object
      required:
        - step_type
        - step_number
        - title
      properties:
        step_type:
          type: string
          minLength: 3
          maxLength: 3
          description: Three-character step type code (e.g., IGO, CHK, DUM, TRT)
        step_number:
          type: integer
          description: Step number within type
        title:
          type: string
          description: Step title/name
        predecessor:
          type: string
          description: Predecessor step reference
        successor:
          type: string
          description: Successor step reference
        primary_team:
          type: string
          description: Primary team responsible for step
        impacted_teams:
          type: string
          description: Comma-separated list of impacted teams
        macro_time_sequence:
          type: string
          description: Macro time sequence information
        time_sequence:
          type: string
          description: Time sequence details
        task_list:
          type: array
          items:
            $ref: "#/components/schemas/ImportInstructionData"
          description: List of instructions/tasks for this step

    ImportInstructionData:
      type: object
      required:
        - instruction_id
      properties:
        instruction_id:
          type: string
          description: Unique instruction identifier
        instruction_title:
          type: string
          description: Instruction title/description
        nominated_user:
          type: string
          description: User nominated for this instruction
        instruction_assigned_team:
          type: string
          description: Team assigned to this instruction
        associated_controls:
          type: string
          description: Associated control references
        duration_minutes:
          type: integer
          description: Estimated duration in minutes

    BatchImportRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            type: object
            required:
              - filename
              - content
            properties:
              filename:
                type: string
                description: Name of the file being imported
              content:
                type: string
                description: JSON content as string
          description: Array of files to import

    ImportResult:
      type: object
      properties:
        success:
          type: boolean
        batchId:
          type: string
          format: uuid
          description: Import batch tracking ID
        stepId:
          type: string
          description: Created/updated step ID
        statistics:
          type: object
          properties:
            stepType:
              type: string
            stepNumber:
              type: integer
            instructionsImported:
              type: integer
            primaryTeam:
              type: string
            impactedTeams:
              type: string
        validationPassed:
          type: boolean
          description: Whether staging validation passed
        promotionResult:
          $ref: "#/components/schemas/PromotionResult"
        errors:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string

    BatchImportResult:
      type: object
      properties:
        totalFiles:
          type: integer
        successCount:
          type: integer
        failureCount:
          type: integer
        skippedCount:
          type: integer
        results:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              success:
                type: boolean
              stepId:
                type: string
              statistics:
                type: object
              errors:
                type: array
                items:
                  type: string
              warnings:
                type: array
                items:
                  type: string
        statistics:
          type: object
          properties:
            totalSteps:
              type: integer
            totalInstructions:
              type: integer
            importedByType:
              type: object
              additionalProperties:
                type: integer

    StagingStep:
      type: object
      properties:
        id:
          type: string
          description: Composite step ID (type-number)
        step_type:
          type: string
        step_number:
          type: integer
        title:
          type: string
        predecessor:
          type: string
        successor:
          type: string
        primary_team:
          type: string
        impacted_teams:
          type: string
        macro_time_sequence:
          type: string
        time_sequence:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        instructions:
          type: array
          items:
            type: object
            properties:
              instruction_id:
                type: string
              instruction_text:
                type: string
              instruction_assignee:
                type: string

    ValidationResult:
      type: object
      properties:
        valid:
          type: boolean
        errors:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string

    PromotionRequest:
      type: object
      properties:
        batchId:
          type: string
          format: uuid
          description: Specific batch to promote (optional)
        phaseId:
          type: string
          format: uuid
          description: Phase to link steps to (optional, uses default if not provided)

    PromotionResult:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        stepsPromoted:
          type: integer
        instructionsPromoted:
          type: integer
        errors:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string

    ImportBatch:
      type: object
      properties:
        imb_id:
          type: string
          format: uuid
        imb_source:
          type: string
        imb_type:
          type: string
        imb_status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, FAILED, ROLLED_BACK]
        imb_user_id:
          type: string
        imb_start_time:
          type: string
          format: date-time
        imb_end_time:
          type: string
          format: date-time
        imb_statistics:
          type: object
        imb_error_message:
          type: string

    BulkUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Overall operation success
        message:
          type: string
          description: Success message
        updatedCount:
          type: integer
          description: Number of successfully updated items
        assignedCount:
          type: integer
          description: Number of successfully assigned items (for assignments)
        reorderedCount:
          type: integer
          description: Number of successfully reordered items (for reordering)
        failedCount:
          type: integer
          description: Number of failed operations
        failures:
          type: array
          items:
            $ref: "#/components/schemas/BulkOperationFailure"
          description: Details of failed operations

    BulkOperationFailure:
      type: object
      properties:
        stepId:
          type: string
          format: uuid
          description: Step ID that failed
        error:
          type: string
          description: Error message for this step

    # ==================== IMPORT API SCHEMAS ====================
    
    JsonImportRequest:
      type: object
      required:
        - source
        - content
      properties:
        source:
          type: string
          description: Source filename or identifier
          example: "migration-data-2025.json"
          minLength: 1
          maxLength: 255
        content:
          type: string
          description: JSON content as string
          example: '{"steps": [{"title": "Configure Database", "instructions": [{"text": "Connect to production database", "order": 1}]}]}'
          minLength: 1

    BatchImportRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          description: Array of files to import as a batch
          minItems: 1
          maxItems: 50
          items:
            type: object
            required:
              - filename
              - content
            properties:
              filename:
                type: string
                description: Filename for this file
                example: "migration-phase-1.json"
                minLength: 1
                maxLength: 255
              content:
                type: string
                description: JSON content as string
                example: '{"steps": [{"title": "Phase 1 Setup"}]}'
                minLength: 1

    AllEntitiesCsvRequest:
      type: object
      required:
        - teams
        - users
        - applications
        - environments
      properties:
        teams:
          type: string
          description: CSV content for teams import
          example: |
            team_name,team_description,team_lead
            "Infrastructure Team","Manages servers","john.doe"
        users:
          type: string
          description: CSV content for users import
          example: |
            username,display_name,email,role
            "john.doe","John Doe","john@company.com","admin"
        applications:
          type: string
          description: CSV content for applications import
          example: |
            app_name,app_description,app_owner
            "Web Portal","Main application","dev-team"
        environments:
          type: string
          description: CSV content for environments import
          example: |
            env_name,env_description,env_type
            "Production","Live environment","PROD"

    MasterPlanRequest:
      type: object
      required:
        - planName
      properties:
        planName:
          type: string
          description: Name of the master plan (must be unique)
          example: "Migration Plan Alpha"
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: Optional description of the master plan
          example: "High-level description of the migration plan"
          maxLength: 500
        userId:
          type: string
          description: Optional user ID (defaults to current user)
          example: "admin"
          maxLength: 50

    RollbackRequest:
      type: object
      properties:
        reason:
          type: string
          description: Optional reason for the rollback
          example: "Data validation failed after import completion"
          maxLength: 1000

    BatchStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: New status for the batch
          enum: [COMPLETED, FAILED, IN_PROGRESS]
          example: "COMPLETED"
        statistics:
          type: object
          description: Optional statistics for the batch
          properties:
            recordsProcessed:
              type: integer
              description: Number of records processed
              example: 150
              minimum: 0
            successCount:
              type: integer
              description: Number of successful records
              example: 148
              minimum: 0
            errorCount:
              type: integer
              description: Number of failed records
              example: 2
              minimum: 0

    JsonImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the import was successful
          example: true
        source:
          type: string
          description: Source filename that was imported
          example: "migration-data-2025.json"
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier for tracking
          example: "550e8400-e29b-41d4-a716-446655440000"
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"
        errors:
          type: array
          description: Array of error messages (if any)
          items:
            type: string
          example: []
        warnings:
          type: array
          description: Array of warning messages (if any)
          items:
            type: string
          example: []

    BatchImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the batch import was successful
          example: true
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier for tracking
          example: "550e8400-e29b-41d4-a716-446655440001"
        filesProcessed:
          type: integer
          description: Number of files processed in the batch
          example: 2
          minimum: 0
        overallStatistics:
          type: object
          description: Aggregated statistics for the entire batch
          properties:
            totalRecords:
              type: integer
              description: Total records across all files
              example: 50
              minimum: 0
            successCount:
              type: integer
              description: Total successful records
              example: 48
              minimum: 0
            errorCount:
              type: integer
              description: Total failed records
              example: 2
              minimum: 0
        fileResults:
          type: array
          description: Individual results for each file in the batch
          items:
            type: object
            properties:
              filename:
                type: string
                description: Name of the file
                example: "migration-phase-1.json"
              success:
                type: boolean
                description: Whether this file was processed successfully
                example: true
              statistics:
                $ref: "#/components/schemas/ImportStatisticsData"
              errors:
                type: array
                description: Errors specific to this file
                items:
                  type: string
                example: []

    CsvImportResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the CSV import was successful
          example: true
        source:
          type: string
          description: Source identifier for the import
          example: "teams_import.csv"
        recordsProcessed:
          type: integer
          description: Number of records processed from CSV
          example: 15
          minimum: 0
        recordsImported:
          type: integer
          description: Number of records successfully imported
          example: 13
          minimum: 0
        recordsSkipped:
          type: integer
          description: Number of records skipped due to validation
          example: 2
          minimum: 0
        errors:
          type: array
          description: Array of error messages (if any)
          items:
            type: string
          example: []

    MasterPlanResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the master plan creation was successful
          example: true
        planId:
          type: string
          format: uuid
          description: Unique identifier for the created plan
          example: "550e8400-e29b-41d4-a716-446655440012"
        message:
          type: string
          description: Success message
          example: "Master Plan configuration created successfully"
        batchId:
          type: string
          format: uuid
          description: Associated batch identifier for audit trail
          example: "550e8400-e29b-41d4-a716-446655440013"
        planName:
          type: string
          description: Name of the created plan
          example: "Migration Plan Alpha"
        description:
          type: string
          description: Plan description (if provided)
          example: "High-level description of the migration plan"
        createdBy:
          type: string
          description: User who created the plan
          example: "admin"

    RollbackResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the rollback was successful
          example: true
        message:
          type: string
          description: Rollback completion message
          example: "Import batch successfully rolled back"
        batchId:
          type: string
          format: uuid
          description: Batch identifier that was rolled back
          example: "550e8400-e29b-41d4-a716-446655440000"
        rollbackActions:
          type: array
          description: List of rollback actions performed
          items:
            type: string
          example: ["Deleted 25 staging steps", "Deleted 75 staging instructions"]
        reason:
          type: string
          description: Reason for rollback (if provided)
          example: "Data validation failed after import completion"
        rolledBackBy:
          type: string
          description: User who performed the rollback
          example: "admin"
        rollbackDate:
          type: string
          format: date-time
          description: Timestamp when rollback was performed
          example: "2025-09-03T14:30:15.123Z"

    BatchStatusUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the status update was successful
          example: true
        message:
          type: string
          description: Status update confirmation message
          example: "Batch status updated successfully"
        batchId:
          type: string
          format: uuid
          description: Batch identifier that was updated
          example: "550e8400-e29b-41d4-a716-446655440000"
        newStatus:
          type: string
          description: The new status that was set
          example: "COMPLETED"
        updatedBy:
          type: string
          description: User who performed the update
          example: "admin"
        updateDate:
          type: string
          format: date-time
          description: Timestamp when update was performed
          example: "2025-09-03T14:30:15.123Z"

    ImportHistoryResponse:
      type: object
      properties:
        history:
          type: array
          description: Array of import batch history records
          items:
            $ref: "#/components/schemas/ImportHistoryRecord"

    ImportHistoryRecord:
      type: object
      properties:
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        source:
          type: string
          description: Source identifier for the import
          example: "migration-data-2025.json"
        importType:
          type: string
          description: Type of import operation
          enum: [JSON_IMPORT, CSV_IMPORT, BATCH_IMPORT, MASTER_PLAN]
          example: "JSON_IMPORT"
        status:
          type: string
          description: Current status of the import batch
          enum: [COMPLETED, FAILED, IN_PROGRESS, ROLLED_BACK]
          example: "COMPLETED"
        userId:
          type: string
          description: User who initiated the import
          example: "admin"
        startTime:
          type: string
          format: date-time
          description: When the import started
          example: "2025-01-15T10:30:00Z"
        endTime:
          type: string
          format: date-time
          description: When the import completed (if finished)
          example: "2025-01-15T10:32:15Z"
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"

    ImportBatchDetails:
      type: object
      properties:
        batchId:
          type: string
          format: uuid
          description: Unique batch identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        source:
          type: string
          description: Source identifier for the import
          example: "migration-data-2025.json"
        importType:
          type: string
          description: Type of import operation
          example: "JSON_IMPORT"
        status:
          type: string
          description: Current status of the import batch
          example: "COMPLETED"
        userId:
          type: string
          description: User who initiated the import
          example: "admin"
        startTime:
          type: string
          format: date-time
          description: When the import started
          example: "2025-01-15T10:30:00Z"
        endTime:
          type: string
          format: date-time
          description: When the import completed
          example: "2025-01-15T10:32:15Z"
        statistics:
          $ref: "#/components/schemas/ImportStatisticsData"
        metadata:
          type: object
          description: Additional metadata about the batch
          additionalProperties: true

    ImportStatistics:
      type: object
      properties:
        totalBatches:
          type: integer
          description: Total number of import batches
          example: 25
          minimum: 0
        successfulBatches:
          type: integer
          description: Number of successful batches
          example: 23
          minimum: 0
        failedBatches:
          type: integer
          description: Number of failed batches
          example: 2
          minimum: 0
        rolledBackBatches:
          type: integer
          description: Number of rolled back batches
          example: 1
          minimum: 0
        totalRecordsProcessed:
          type: integer
          description: Total records processed across all batches
          example: 1250
          minimum: 0
        totalRecordsImported:
          type: integer
          description: Total records successfully imported
          example: 1200
          minimum: 0
        averageProcessingTime:
          type: number
          format: float
          description: Average processing time per batch in seconds
          example: 45.2
          minimum: 0
        successRate:
          type: number
          format: float
          description: Overall success rate as percentage (0-100)
          example: 92.0
          minimum: 0
          maximum: 100
        lastImportDate:
          type: string
          format: date-time
          description: Timestamp of the most recent import
          example: "2025-09-03T14:30:15.123Z"
        byImportType:
          type: array
          description: Statistics broken down by import type
          items:
            type: object
            properties:
              importType:
                type: string
                description: Type of import
                example: "JSON_IMPORT"
              count:
                type: integer
                description: Number of batches of this type
                example: 15
                minimum: 0
              successRate:
                type: number
                format: float
                description: Success rate for this type
                example: 95.0
                minimum: 0
                maximum: 100

    ImportStatisticsData:
      type: object
      properties:
        recordsProcessed:
          type: integer
          description: Number of records processed
          example: 25
          minimum: 0
        successCount:
          type: integer
          description: Number of successful records
          example: 25
          minimum: 0
        errorCount:
          type: integer
          description: Number of failed records
          example: 0
          minimum: 0

    ImportError:
      type: object
      properties:
        error:
          type: string
          description: Main error message
          example: "Missing required fields: 'source' and 'content'"
        details:
          type: string
          description: Additional error details (optional)
          example: "The 'source' field is required for audit trail tracking"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2025-09-03T14:30:15.123Z"
        batchId:
          type: string
          format: uuid
          description: Associated batch ID (if applicable)
          example: "550e8400-e29b-41d4-a716-446655440000"

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: |
        Invalid input, object invalid. Common causes include invalid UUID format, invalid pagination parameters, 
        invalid date format, or search term too long. Also includes PostgreSQL constraint violations and data validation errors.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            invalidUuid:
              summary: Invalid UUID format
              value:
                error: "Invalid migration UUID"
            invalidPagination:
              summary: Invalid pagination parameters
              value:
                error: "Invalid page number format"
            invalidDate:
              summary: Invalid date format
              value:
                error: "Invalid dateFrom format. Use YYYY-MM-DD"
            searchTooShort:
              summary: Search term too short
              value:
                error: "Search term too short (min 3 characters)"
            searchTooLong:
              summary: Search term too long
              value:
                error: "Search term too long (max 100 characters)"
            invalidSortField:
              summary: Invalid sort field for iterations
              value:
                error: "Invalid sort field. Allowed: ite_id, ite_name, itt_code, ite_static_cutover_date, ite_dynamic_cutover_date, ite_status, migration_name, master_plan_name, created_at, updated_at"
            invalidMigrationSortField:
              summary: Invalid sort field for migrations
              value:
                error: "Invalid sort field. Allowed: mig_id, mig_name, mig_status, mig_type, created_at, updated_at, mig_start_date, mig_end_date, iteration_count, plan_count"
            invalidStatusName:
              summary: Invalid status name for migration
              value:
                error: "Invalid status name: INVALID_STATUS"
            invalidPeriod:
              summary: Invalid dashboard period
              value:
                error: "Invalid period. Must be: day, week, month, or quarter"
            invalidDateFormat:
              summary: Invalid date format in request body
              value:
                error: "Invalid date format. Use YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss"
            invalidPageSize:
              summary: Invalid page size format
              value:
                error: "Invalid page size format"
            invalidTeamId:
              summary: Invalid team ID format
              value:
                error: "Invalid team ID format"
            invalidOwnerId:
              summary: Invalid owner ID format
              value:
                error: "Invalid owner ID format"
            migrationNameRequired:
              summary: Missing required migration name
              value:
                error: "Migration name is required"
            noUsersExist:
              summary: No users exist for auto-assignment
              value:
                error: "No users exist in the system. Cannot create migration without owner."
            defaultPlanningNotFound:
              summary: Default planning status not found
              value:
                error: "Default PLANNING status for Migration not found in database"
            invalidJsonFormat:
              summary: Invalid JSON in request body
              value:
                error: "Invalid JSON format in request body"
            bulkMigrationIdsRequired:
              summary: Bulk operation missing migration IDs
              value:
                error: "migrationIds is required and must be an array"
            invalidBulkFormat:
              summary: Invalid bulk export format
              value:
                error: "Invalid format. Must be 'json' or 'csv'"
            bulkStatusRequired:
              summary: Bulk update missing new status
              value:
                error: "newStatus is required"
            hierarchicalPathErrors:
              summary: Hierarchical endpoint validation errors
              value:
                error: "Invalid iteration UUID"
            # PostgreSQL-specific error examples
            foreignKeyViolation:
              summary: Foreign key constraint violation (SQL State 23503)
              value:
                error: "Foreign key constraint violation: Referenced sequence does not exist"
                sqlState: "23503"
            checkConstraintViolation:
              summary: Check constraint violation (SQL State 23514)
              value:
                error: "Check constraint violation: Invalid date range - end date must be after start date"
                sqlState: "23514"
            invalidStatusNamePhase:
              summary: Invalid status name resolution for phases
              value:
                error: "Invalid status name 'INVALID_STATUS' for Phase entity type"
            typeCastingError:
              summary: PostgreSQL type casting error
              value:
                error: "Invalid UUID format for parameter phm_id: 'not-a-uuid'"
    Conflict:
      description: |
        The request could not be completed due to a conflict with the current state of the resource. 
        This includes unique constraint violations (SQL State 23505), foreign key violations (SQL State 23503),
        and referential integrity issues.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            uniqueConstraint:
              summary: Unique constraint violation
              value:
                error: "A migration with this name already exists"
            foreignKeyViolation:
              summary: Foreign key violation
              value:
                error: "Invalid owner user ID - user does not exist"
            referentialIntegrity:
              summary: Referential integrity on delete
              value:
                error: "Cannot delete migration - it has associated iterations or is referenced by other resources"
            migrationDuplicateName:
              summary: Duplicate migration name
              value:
                error: "A migration with this name already exists"
            invalidOwnerUser:
              summary: Invalid owner user reference
              value:
                error: "Invalid owner user ID - user does not exist"
    InternalServerError:
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    ConfluenceUsers:
      type: http
      scheme: basic
      description: |
        HTTP Basic Authentication using Confluence username and password.
        All endpoints require membership in either the "confluence-users" or "confluence-administrators" group for access control.
