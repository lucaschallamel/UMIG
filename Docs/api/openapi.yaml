openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Plans
    description: Operations about implementation plans.
  - name: Teams
    description: Operations about teams.
  - name: Users
    description: Operations about users.
  - name: WebApp
    description: Serves static web assets.

paths:
  # --- StepView Endpoint ---
  /stepViewApi:
    get:
      summary: Get STEP View by ID
      tags: [StepView]
      operationId: getStepView
      parameters:
        - name: stepid
          in: query
          required: true
          description: The unique identifier for the STEP (e.g., SYS-1).
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing all data for a specific STEP view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepViewResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Plans Endpoints ---
  /plans:
    get:
      summary: List all Implementation Plans
      tags: [Plans]
      operationId: listPlans
      responses:
        '200':
          description: A list of all implementation plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
    post:
      summary: Create an Implementation Plan
      tags: [Plans]
      operationId: createPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreateRequest'
      responses:
        '201':
          description: Plan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'

  /plans/{planId}:
    get:
      summary: Get an Implementation Plan by ID
      tags: [Plans]
      operationId: getPlanById
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Plan object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an Implementation Plan
      tags: [Plans]
      operationId: updatePlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreateRequest'
      responses:
        '200':
          description: Plan updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an Implementation Plan
      tags: [Plans]
      operationId: deletePlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Plan deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Teams Endpoints ---
  /teams:
    get:
      summary: List all Teams
      tags: [Teams]
      operationId: listTeams
      responses:
        '200':
          description: A list of all teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      summary: Create a Team
      tags: [Teams]
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'

  /teams/{teamId}:
    get:
      summary: Get a Team by ID
      tags: [Teams]
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Team object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a Team
      tags: [Teams]
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '200':
          description: Team updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a Team
      tags: [Teams]
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Users Endpoints ---
  /users:
    get:
      summary: List all Users
      tags: [Users]
      operationId: listUsers
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a User
      tags: [Users]
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{userId}:
    get:
      summary: Get a User by ID
      tags: [Users]
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a User
      tags: [Users]
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a User
      tags: [Users]
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- WebApp Endpoint ---
  /web/{filePath}:
    get:
      summary: Serve a static web asset
      tags: [WebApp]
      operationId: getWebAppFile
      parameters:
        - name: filePath
          in: path
          required: true
          description: The path to the static file (e.g., 'css/style.css').
          schema:
            type: string
      responses:
        '200':
          description: The requested file.
          content:
            text/css: {}
            application/javascript: {}
            image/svg+xml: {}
            text/html: {}
            application/octet-stream: {}
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  schemas:
    # --- StepView Schemas ---
    StepViewResponse:
      type: object
      properties:
        stepSummary:
          $ref: '#/components/schemas/StepSummary'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        impactedTeams:
          type: array
          items:
            type: string
          example: ["Outdoors Team", "Marketing Team"]

    StepSummary:
      type: object
      properties:
        ID:
          type: string
          example: "SYS-1"
        Name:
          type: string
          example: "Step compress"
        Description:
          type: string
          example: "Tutamen cenaculum tristis coadunatio maxime cupiditate."
        Type:
          type: string
          example: "SYSTEM"

    Instruction:
      type: object
      properties:
        Order:
          type: integer
          example: 1
        Description:
          type: string
          example: "Cauda tonsor tamisium cunctatio bene ascisco vestrum."

    # --- Plan Schemas ---
    Plan:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
          readOnly: true
        usr_id_owner:
          type: integer
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: string
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date

    PlanCreateRequest:
      type: object
      required:
        - usr_id_owner
        - mig_name
        - mig_status
        - mig_type
      properties:
        usr_id_owner:
          type: integer
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: string
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date

    # --- Team Schemas ---
    Team:
      type: object
      properties:
        tms_id:
          type: integer
          readOnly: true
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    TeamCreateRequest:
      type: object
      required:
        - tms_name
      properties:
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    # --- User Schemas ---
    User:
      type: object
      properties:
        usr_id:
          type: integer
          readOnly: true
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_confluence_id:
          type: string
        rls_id:
          type: integer

    UserCreateRequest:
      type: object
      required:
        - usr_name
        - usr_email
        - usr_confluence_id
      properties:
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_confluence_id:
          type: string
        rls_id:
          type: integer

    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
