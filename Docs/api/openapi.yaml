---
openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Plans
    description: Operations about implementation plans.
  - name: Teams
    description: Operations about teams.
  - name: Users
    description: Operations about users.
  - name: WebApp
    description: Serves static web assets.

paths:
  # --- StepView Endpoint ---
  /stepViewApi:
    get:
      summary: Get STEP View by ID
      tags: [StepView]
      operationId: getStepView
      parameters:
        - name: stepid
          in: query
          required: true
          description: The unique identifier for the STEP (e.g., SYS-1).
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing all data for a specific STEP view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepViewResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Plans Endpoints ---
  /plans:
    get:
      summary: List all Implementation Plans
      tags: [Plans]
      operationId: listPlans
      responses:
        '200':
          description: A list of all implementation plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
    post:
      summary: Create an Implementation Plan
      tags: [Plans]
      operationId: createPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreateRequest'
      responses:
        '201':
          description: Plan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'

  /plans/{planId}:
    get:
      summary: Get an Implementation Plan by ID
      tags: [Plans]
      operationId: getPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single implementation plan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an Implementation Plan
      tags: [Plans]
      operationId: updatePlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '200':
          description: Plan updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an Implementation Plan
      tags: [Plans]
      operationId: deletePlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Plan deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Teams Endpoints ---
  /teams:
    get:
      summary: List all teams
      tags: [Teams]
      operationId: listTeams
      responses:
        '200':
          description: A list of all teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      summary: Create a team
      tags: [Teams]
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'

  /teams/{teamId}:
    get:
      summary: Get a team by ID
      tags: [Teams]
      operationId: getTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a team
      tags: [Teams]
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a team
      tags: [Teams]
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /teams/{teamId}/members:
    get:
      summary: List all users in a given team, including membership audit fields
      tags: [Teams]
      operationId: listTeamMembers
      parameters:
        - name: teamId
          in: path
          required: true
          description: The team ID
          schema:
            type: integer
      responses:
        '200':
          description: Array of users with membership audit fields
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /teams/{teamId}/users/{userId}:
    put:
      summary: Add a user to a team
      tags: [Teams]
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a user from a team
      tags: [Teams]
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Users Endpoints ---
  /users:
    get:
      summary: List all users
      tags: [Users]
      operationId: listUsers
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      tags: [Users]
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{userId}:
    get:
      summary: Get a user by ID
      tags: [Users]
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a user
      tags: [Users]
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a user
      tags: [Users]
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  # --- WebApp Endpoints ---
  /umig-app/{path}:
    get:
      summary: Serves static assets for the UMIG web application.
      tags: [WebApp]
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          description: The path to the static asset (e.g., index.html, main.js).
          schema:
            type: string
      responses:
        '200':
          description: The requested static asset.
          content:
            text/html: {}
            text/css: {}
            application/javascript: {}
        '404':
          description: Asset not found.

components:
  schemas:
    # --- StepView Schemas ---
    StepViewResponse:
      type: object
      # ... properties for StepViewResponse

    # --- Plan Schemas ---
    Plan:
      type: object
      properties:
        pln_id:
          type: integer
          readOnly: true
        pln_name:
          type: string
        pln_description:
          type: string

    PlanCreateRequest:
      type: object
      required:
        - pln_name
      properties:
        pln_name:
          type: string
        pln_description:
          type: string

    # --- Team Schemas ---
    Team:
      type: object
      properties:
        tms_id:
          type: integer
          readOnly: true
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    TeamCreateRequest:
      type: object
      required:
        - tms_name
      properties:
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    # --- User Schemas ---
    TeamMember:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            created_by:
              type: integer

    User:
      type: object
      properties:
        usr_id:
          type: integer
          readOnly: true
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_code:
          type: string
          description: "The user's unique 3-letter code, mapping to the Confluence user ID."
        rls_id:
          type: integer

    UserCreateRequest:
      type: object
      required:
        - usr_name
        - usr_email
        - usr_code
      properties:
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_confluence_id:
          type: string
        rls_id:
          type: integer

    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
