openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Migrations
    description: Operations about migrations, iterations, sequences and phases.
  - name: Teams
    description: Operations about teams.
  - name: Environments
    description: Operations about environments and their associations.
  - name: Applications
    description: Operations about applications.
  - name: Labels
    description: Operations about labels and hierarchical filtering.
  - name: Users
    description: Operations about users.
  - name: WebApp
    description: Serves static web assets.

paths:
  /migrations/{migId}/iterations/{iteId}:
    get:
      summary: Get a specific iteration
      tags: [Migrations]
      operationId: getIterationById
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances:
    get:
      summary: List all plan instances for an iteration
      tags: [Migrations]
      operationId: listPlanInstancesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All plan instances for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInstanceSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/sequences:
    get:
      summary: List all sequences for an iteration
      tags: [Migrations]
      operationId: listSequencesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All sequences for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/phases:
    get:
      summary: List all phases for an iteration
      tags: [Migrations]
      operationId: listPhasesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences:
    get:
      summary: List all sequences for a plan instance
      tags: [Migrations]
      operationId: listSequencesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All sequences for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/phases:
    get:
      summary: List all phases for a plan instance
      tags: [Migrations]
      operationId: listPhasesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences/{seqId}/phases:
    get:
      summary: List all phases for a sequence
      tags: [Migrations]
      operationId: listPhasesForSequence
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seqId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations:
    get:
      summary: List all migrations
      tags: [Migrations]
      operationId: listMigrations
      responses:
        '200':
          description: A list of migrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MigrationSummary'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{id}:
    get:
      summary: Get a single migration by ID
      tags: [Migrations]
      operationId: getMigrationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The migration object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Migration'
        '404':
          $ref: '#/components/responses/NotFound'

  /migrations/{migId}/iterations:
    get:
      summary: List all iterations for a migration
      tags: [Migrations]
      operationId: listIterationsForMigration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All iterations for the given migration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IterationSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /step-view:
    get:
      tags:
        - StepView
      summary: Get all step view data
      description: Retrieves all data for the step view component.
      operationId: getStepViewData
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepView'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teams:
    get:
      tags:
        - Teams
      summary: Get teams with optional hierarchical filtering
      description: |
        Retrieves a list of teams. Can be filtered by hierarchical entities to show only teams 
        involved in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllTeams
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by phase instance ID
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the provided details.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{id}:
    get:
      tags:
        - Teams
      summary: Get a team by ID
      description: Retrieves a single team by its unique ID.
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The requested team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Teams
      summary: Update a team
      description: Updates an existing team's details.
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '204':
          description: Team updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Delete a team
      description: Deletes a team by its unique ID.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{teamId}/users/{userId}:
    put:
      tags:
        - Teams
      summary: Add a user to a team
      description: Adds a user to a team, creating the membership link.
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Remove a user from a team
      description: Removes a user from a team, deleting the membership link.
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /teams/{id}/applications:
    get:
      tags:
        - Teams
      summary: Get applications associated with a team
      description: Retrieves a list of applications that are associated with the specified team.
      operationId: getTeamApplications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of applications associated with the team
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teams/{teamId}/applications/{applicationId}:
    put:
      tags:
        - Teams
      summary: Add an application to a team
      description: Creates an association between a team and an application.
      operationId: addApplicationToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Application is already associated with this team.
    delete:
      tags:
        - Teams
      summary: Remove an application from a team
      description: Removes the association between a team and an application.
      operationId: removeApplicationFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /environments:
    get:
      tags:
        - Environments
      summary: Get all environments with counts
      description: |
        Retrieves a list of all environments with their associated application and iteration counts.
        Supports pagination, sorting, and search for admin GUI.
      operationId: getAllEnvironments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          description: Page size for pagination
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter environments
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort direction
      responses:
        '200':
          description: A list of environments with counts
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/EnvironmentWithCounts'
                  - $ref: '#/components/schemas/PaginatedEnvironments'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Environments
      summary: Create a new environment
      description: Creates a new environment with the provided details.
      operationId: createEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentCreateRequest'
      responses:
        '201':
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/roles:
    get:
      tags:
        - Environments
      summary: Get all environment roles
      description: Retrieves a list of all available environment roles.
      operationId: getEnvironmentRoles
      responses:
        '200':
          description: A list of environment roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentRole'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}:
    get:
      tags:
        - Environments
      summary: Get an environment by ID
      description: Retrieves a single environment with full details including applications and iterations.
      operationId: getEnvironmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Environment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Environments
      summary: Update an environment
      description: Updates an existing environment's details.
      operationId: updateEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentCreateRequest'
      responses:
        '200':
          description: Environment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Delete an environment
      description: Deletes an environment by its unique ID.
      operationId: deleteEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Environment deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete environment due to existing relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingRelationshipsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/iterations:
    get:
      tags:
        - Environments
      summary: Get iterations grouped by role
      description: Retrieves iterations associated with an environment, grouped by their environment role.
      operationId: getEnvironmentIterationsByRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Iterations grouped by role
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RoleIterations'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/applications/{appId}:
    post:
      tags:
        - Environments
      summary: Associate an application with an environment
      description: Creates an association between an environment and an application.
      operationId: associateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Remove application association
      description: Removes the association between an environment and an application.
      operationId: disassociateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application disassociated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/iterations/{iteId}:
    post:
      tags:
        - Environments
      summary: Associate an iteration with an environment
      description: Creates an association between an environment and an iteration with a specific role.
      operationId: associateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enr_id
              properties:
                enr_id:
                  type: integer
                  description: Environment role ID
      responses:
        '200':
          description: Iteration associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Remove iteration association
      description: Removes the association between an environment and an iteration.
      operationId: disassociateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Iteration disassociated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps:
    get:
      tags:
        - Steps
      summary: Get steps with hierarchical filtering for runsheet
      description: |
        Retrieves step instances grouped by sequence and phase for runsheet display.
        Supports comprehensive hierarchical filtering to show only steps matching the specified criteria.
        Multiple filters can be combined for progressive refinement.
        Results are ordered by sequence number, phase number, and step number.
      operationId: getStepsForRunsheet
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by label ID (steps that have this label)
      responses:
        '200':
          description: Steps grouped by sequence and phase for runsheet display
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceWithSteps'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/master:
    get:
      tags:
        - Steps
      summary: Get master steps for dropdowns
      description: |
        Retrieves all master steps in a format suitable for dropdown menus.
        Can be filtered by migration ID to show only steps belonging to a specific migration.
      operationId: getMasterSteps
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
      responses:
        '200':
          description: List of master steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterStep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels:
    get:
      tags:
        - Labels
      summary: Get labels with optional hierarchical filtering
      description: |
        Retrieves a list of labels. Can be filtered by hierarchical entities to show only labels 
        associated with step instances in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllLabels
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by phase instance ID
      responses:
        '200':
          description: A list of labels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Labels
      summary: Create a new label
      description: Creates a new label within a migration scope.
      operationId: createLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelCreate'
      responses:
        '201':
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{id}:
    get:
      tags:
        - Labels
      summary: Get a specific label by ID
      description: Retrieves detailed information about a specific label including associated applications and step count.
      operationId: getLabelById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '200':
          description: Label details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Labels
      summary: Update an existing label
      description: Updates label properties including migration assignment.
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelUpdate'
      responses:
        '200':
          description: Label updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Delete a label
      description: Deletes a label and all its associations.
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '204':
          description: Label deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{id}/steps:
    get:
      tags:
        - Labels
      summary: Get steps associated with a label
      description: Retrieves all master steps that are associated with the specified label.
      operationId: getLabelSteps
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '200':
          description: List of associated steps
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      $ref: '#/components/schemas/LabelStep'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{labelId}/applications/{applicationId}:
    post:
      tags:
        - Labels
      summary: Add application association to label
      description: Associates an application with a label.
      operationId: addLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        '200':
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Remove application association from label
      description: Removes the association between an application and a label.
      operationId: removeLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        '200':
          description: Application association removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{labelId}/steps/{stepId}:
    post:
      tags:
        - Labels
      summary: Add step association to label
      description: Associates a master step with a label.
      operationId: addLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        '200':
          description: Step associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Remove step association from label
      description: Removes the association between a master step and a label.
      operationId: removeLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        '200':
          description: Step association removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /applications:
    get:
      tags:
        - Applications
      summary: Get all applications
      description: Retrieves a list of all applications.
      operationId: getAllApplications
      responses:
        '200':
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a paginated list of all users with optional filtering and sorting.
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
          description: Number of items per page
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter users by name, email, or code
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., usr_first_name, usr_last_name, usr_email)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter users by team membership
        - name: userCode
          in: query
          required: false
          schema:
            type: string
          description: Find user by exact code match (for authentication)
        - name: active
          in: query
          required: false
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
      responses:
        '200':
          description: A paginated list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalElements:
                    type: integer
                    description: Total number of users
                  totalPages:
                    type: integer
                    description: Total number of pages
                  pageNumber:
                    type: integer
                    description: Current page number (1-based)
                  pageSize:
                    type: integer
                    description: Number of items per page
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - user with same email or code already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Updates an existing user's information.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - email or code already exists for another user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user from the system.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '204':
          description: User deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete - user is referenced by other resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webapp/{path+}:
    get:
      tags:
        - WebApp
      summary: Serve a static asset
      description: Serves a static asset from the webapp resources.
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested asset.
          content:
            application/javascript: {}
            text/css: {}
            image/png: {}
            image/jpeg: {}
            image/svg+xml: {}
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # --- View Models ---
    StepView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string

    MigrationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    Migration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        businessCutoverDate:
          type: string
          format: date

    Iteration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    IterationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    Team:
      type: object
      properties:
        tms_id:
          type: integer
          description: Unique identifier for the team
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    Label:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the label
        name:
          type: string
          description: Name of the label
        description:
          type: string
          description: Description of the label
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
    
    LabelDetail:
      type: object
      properties:
        lbl_id:
          type: integer
          description: Unique identifier for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: User ID who created the label
        applications:
          type: array
          items:
            type: object
            properties:
              app_id:
                type: integer
              app_code:
                type: string
              app_name:
                type: string
        step_count:
          type: integer
          description: Number of associated steps
    
    LabelCreate:
      type: object
      required:
        - lbl_name
        - lbl_color
        - mig_id
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    
    LabelUpdate:
      type: object
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    
    LabelStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        step_type:
          type: string
          description: Step type code
        step_number:
          type: integer
          description: Step number
        step_title:
          type: string
          description: Step title/name
    
    MasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        stt_code:
          type: string
          description: Step type code
        stm_step_number:
          type: integer
          description: Step number
        stm_title:
          type: string
          description: Step title/name
        stm_description:
          type: string
          description: Step description
        stt_name:
          type: string
          description: Step type name
        step_code:
          type: string
          description: Composed step code (type-number)
        display_name:
          type: string
          description: Display name for dropdowns

    TeamCreateRequest:
      type: object
      required:
        - tms_name
        - tms_email
      properties:
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    User:
      type: object
      properties:
        usr_id:
          type: integer
          description: Unique identifier for the user
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active
        rls_id:
          type: integer
          description: Role ID
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        teams:
          type: array
          items:
            type: object
            properties:
              tms_id:
                type: integer
              tms_name:
                type: string
              tms_description:
                type: string
              tms_email:
                type: string
                format: email
          description: Teams the user belongs to

    UserInput:
      type: object
      required:
        - usr_first_name
        - usr_last_name
        - usr_is_admin
      properties:
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active (defaults to true)
        rls_id:
          type: integer
          description: Role ID

    PlanInstanceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PhaseSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseWithSteps'

    PhaseWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepWithLabels'

    StepWithLabels:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: Formatted step code (e.g., "BGO-001")
        name:
          type: string
        status:
          type: string
          enum: [NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED]
        durationMinutes:
          type: integer
        ownerTeamId:
          type: integer
        ownerTeamName:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'

    # --- Environment Schemas ---
    Environment:
      type: object
      properties:
        env_id:
          type: integer
          description: Unique identifier for the environment
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentWithCounts:
      allOf:
        - $ref: '#/components/schemas/Environment'
        - type: object
          properties:
            application_count:
              type: integer
              description: Number of applications associated with this environment
            iteration_count:
              type: integer
              description: Number of iterations associated with this environment

    EnvironmentCreateRequest:
      type: object
      required:
        - env_code
        - env_name
      properties:
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentDetails:
      allOf:
        - $ref: '#/components/schemas/EnvironmentWithCounts'
        - type: object
          properties:
            applications:
              type: array
              items:
                $ref: '#/components/schemas/Application'
              description: List of applications associated with this environment
            iterations:
              type: array
              items:
                $ref: '#/components/schemas/IterationWithRole'
              description: List of iterations associated with this environment

    Application:
      type: object
      properties:
        app_id:
          type: integer
          description: Unique identifier for the application
        app_code:
          type: string
          description: Application code
        app_name:
          type: string
          description: Name of the application
        app_description:
          type: string
          description: Description of the application

    IterationWithRole:
      allOf:
        - $ref: '#/components/schemas/IterationSummary'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/EnvironmentRole'

    EnvironmentRole:
      type: object
      properties:
        enr_id:
          type: integer
          description: Unique identifier for the environment role
        enr_code:
          type: string
          description: Role code (e.g., SOURCE, TARGET)
        enr_name:
          type: string
          description: Role name
        enr_description:
          type: string
          description: Role description

    PaginatedEnvironments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentWithCounts'
        total:
          type: integer
          description: Total number of environments
        page:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages

    RoleIterations:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/EnvironmentRole'
        iterations:
          type: array
          items:
            $ref: '#/components/schemas/IterationSummary'

    BlockingRelationshipsError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        blocking_relationships:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          description: Object containing arrays of blocking relationships by type

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message

    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource (e.g., duplicate entry).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
