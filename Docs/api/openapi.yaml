openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Migrations
    description: Operations about migrations, iterations, sequences and phases.
  - name: Teams
    description: Operations about teams.
  - name: Users
    description: Operations about users.
  - name: WebApp
    description: Serves static web assets.

paths:
  /migrations/{migId}/iterations/{iteId}:
    get:
      summary: Get a specific iteration
      tags: [Migrations]
      operationId: getIterationById
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances:
    get:
      summary: List all plan instances for an iteration
      tags: [Migrations]
      operationId: listPlanInstancesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All plan instances for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInstanceSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences:
    get:
      summary: List all sequences for a plan instance
      tags: [Migrations]
      operationId: listSequencesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All sequences for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/phases:
    get:
      summary: List all phases for a plan instance
      tags: [Migrations]
      operationId: listPhasesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences/{seqId}/phases:
    get:
      summary: List all phases for a sequence
      tags: [Migrations]
      operationId: listPhasesForSequence
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seqId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations:
    get:
      summary: List all migrations
      tags: [Migrations]
      operationId: listMigrations
      responses:
        '200':
          description: A list of migrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MigrationSummary'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{id}:
    get:
      summary: Get a single migration by ID
      tags: [Migrations]
      operationId: getMigrationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The migration object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Migration'
        '404':
          $ref: '#/components/responses/NotFound'

  /migrations/{migId}/iterations:
    get:
      summary: List all iterations for a migration
      tags: [Migrations]
      operationId: listIterationsForMigration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All iterations for the given migration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IterationSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /step-view:
    get:
      tags:
        - StepView
      summary: Get all step view data
      description: Retrieves all data for the step view component.
      operationId: getStepViewData
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepView'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teams:
    get:
      tags:
        - Teams
      summary: Get all teams
      description: Retrieves a list of all teams.
      operationId: getAllTeams
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the provided details.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{id}:
    get:
      tags:
        - Teams
      summary: Get a team by ID
      description: Retrieves a single team by its unique ID.
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Teams
      summary: Update a team
      description: Updates an existing team's details.
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '204':
          description: Team updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Delete a team
      description: Deletes a team by its unique ID.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Team deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{teamId}/users/{userId}:
    put:
      tags:
        - Teams
      summary: Add a user to a team
      description: Adds a user to a team, creating the membership link.
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Remove a user from a team
      description: Removes a user from a team, deleting the membership link.
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a list of all users.
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webapp/{path+}:
    get:
      tags:
        - WebApp
      summary: Serve a static asset
      description: Serves a static asset from the webapp resources.
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested asset.
          content:
            application/javascript: {}
            text/css: {}
            image/png: {}
            image/jpeg: {}
            image/svg+xml: {}
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # --- View Models ---
    StepView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string

    MigrationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    Migration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        businessCutoverDate:
          type: string
          format: date

    Iteration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    IterationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email

    TeamCreateRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email

    User:
      type: object
      properties:
        usr_id:
          type: string
          format: uuid
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_confluence_id:
          type: string
        usr_code:
          type: string
          description: "The user's unique 3-letter code, mapping to the Confluence user ID."
        rls_id:
          type: integer

    UserCreateRequest:
      type: object
      required:
        - usr_name
        - usr_email
        - usr_code
      properties:
        usr_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_confluence_id:
          type: string
        rls_id:
          type: integer

    PlanInstanceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PhaseSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource (e.g., duplicate entry).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
