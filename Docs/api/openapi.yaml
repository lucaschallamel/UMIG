openapi: 3.1.2
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: Users
    description: Operations about users
  - name: Teams
    description: Operations about teams
  - name: Plans
    description: Operations about implementation plans

paths:
  # --- Users Endpoints ---
  /api/v2/users:
    get:
      summary: List all users
      tags: [Users]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v2/users/{userId}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Teams Endpoints ---
  /api/v2/teams:
    get:
      summary: List all teams
      tags: [Teams]
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      summary: Create a new team
      tags: [Teams]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v2/teams/{teamId}:
    get:
      summary: Get a team by ID
      tags: [Teams]
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Team object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a team
      tags: [Teams]
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a team
      tags: [Teams]
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Plans Endpoints ---
  /api/v2/plans:
    get:
      summary: List all implementation plans
      tags: [Plans]
      responses:
        '200':
          description: A list of implementation plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
    post:
      summary: Create a new implementation plan
      tags: [Plans]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreateRequest'
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v2/plans/{planId}:
    get:
      summary: Get a plan by ID
      tags: [Plans]
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Plan object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a plan
      tags: [Plans]
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreateRequest'
      responses:
        '200':
          description: Plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a plan
      tags: [Plans]
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Plan deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    User:
      type: object
      properties:
        usr_id:
          type: integer
          readOnly: true
        usr_code:
          type: string
        usr_first_name:
          type: string
        usr_last_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_is_admin:
          type: boolean
        tms_id:
          type: integer
        rls_id:
          type: integer

    UserCreateRequest:
      type: object
      properties:
        usr_code:
          type: string
        usr_first_name:
          type: string
        usr_last_name:
          type: string
        usr_email:
          type: string
          format: email
        usr_is_admin:
          type: boolean
        tms_id:
          type: integer
        rls_id:
          type: integer

    Team:
      type: object
      properties:
        tms_id:
          type: integer
          readOnly: true
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    TeamCreateRequest:
      type: object
      properties:
        tms_name:
          type: string
        tms_email:
          type: string
          format: email
        tms_description:
          type: string

    Plan:
      type: object
      properties:
        mig_id:
          type: string
          format: uuid
          readOnly: true
        usr_id_owner:
          type: integer
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: string
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date

    PlanCreateRequest:
      type: object
      required:
        - usr_id_owner
        - mig_name
        - mig_status
        - mig_type
      properties:
        usr_id_owner:
          type: integer
        mig_name:
          type: string
        mig_description:
          type: string
        mig_status:
          type: string
        mig_type:
          type: string
        mig_start_date:
          type: string
          format: date
        mig_end_date:
          type: string
          format: date

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
