openapi: 3.0.0
info:
  title: UMIG API V2
  version: 2.0.0
  description: |
    REST API for the Unified Migration and Implementation Governance (UMIG) application.

    This API follows RESTful principles and is implemented using ScriptRunner Groovy scripts. It supersedes the V1 API.
    Architectural principles are documented in ADR-017.
servers:
  - url: /rest/scriptrunner/latest/custom
    description: ScriptRunner Custom REST Endpoints (relative to Confluence base URL)
tags:
  - name: StepView
    description: Operations related to the STEP View component.
  - name: Migrations
    description: Operations about migrations, iterations, sequences and phases.
  - name: Teams
    description: Operations about teams.
  - name: Environments
    description: Operations about environments and their associations.
  - name: Applications
    description: Operations about applications.
  - name: Labels
    description: Operations about labels and hierarchical filtering.
  - name: Plans
    description: Operations about plans, both master templates and instances.
  - name: Sequences
    description: Operations about sequences, both master templates and instances.
  - name: Phases
    description: Operations about phases, control points, ordering, and progress tracking.
  - name: Users
    description: Operations about users.
  - name: EmailTemplates
    description: Operations about email templates for notifications.
  - name: Steps
    description: Operations about steps, step instances, and status management.
  - name: Instructions
    description: Operations about instructions, completion tracking, and analytics.
  - name: Comments
    description: Operations about step comments and collaboration.
  - name: Statuses
    description: Operations about status management for different entity types.
  - name: WebApp
    description: Serves static web assets.

paths:
  /migrations/{migId}/iterations/{iteId}:
    get:
      summary: Get a specific iteration
      tags: [Migrations]
      operationId: getIterationById
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single iteration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances:
    get:
      summary: List all plan instances for an iteration
      tags: [Migrations]
      operationId: listPlanInstancesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All plan instances for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInstanceSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/sequences:
    get:
      summary: List all sequences for an iteration
      tags: [Migrations]
      operationId: listSequencesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All sequences for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/phases:
    get:
      summary: List all phases for an iteration
      tags: [Migrations]
      operationId: listPhasesForIteration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given iteration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences:
    get:
      summary: List all sequences for a plan instance
      tags: [Migrations]
      operationId: listSequencesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All sequences for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/phases:
    get:
      summary: List all phases for a plan instance
      tags: [Migrations]
      operationId: listPhasesForPlanInstance
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given plan instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations/{migId}/iterations/{iteId}/plan-instances/{pliId}/sequences/{seqId}/phases:
    get:
      summary: List all phases for a sequence
      tags: [Migrations]
      operationId: listPhasesForSequence
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: pliId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seqId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All phases for the given sequence
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseSummary'

  /migrations:
    get:
      summary: List all migrations
      tags: [Migrations]
      operationId: listMigrations
      responses:
        '200':
          description: A list of migrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MigrationSummary'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /migrations/{id}:
    get:
      summary: Get a single migration by ID
      tags: [Migrations]
      operationId: getMigrationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The migration object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Migration'
        '404':
          $ref: '#/components/responses/NotFound'

  /migrations/{migId}/iterations:
    get:
      summary: List all iterations for a migration
      tags: [Migrations]
      operationId: listIterationsForMigration
      parameters:
        - name: migId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All iterations for the given migration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IterationSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /step-view:
    get:
      tags:
        - StepView
      summary: Get all step view data
      description: Retrieves all data for the step view component.
      operationId: getStepViewData
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepView'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /stepViewApi/instance:
    get:
      tags:
        - StepView
      summary: Get step instance details by migration, iteration, and step code
      description: |
        Retrieves detailed information about a specific step instance in a given migration and iteration,
        including instructions, comments, labels, and impacted teams. This endpoint is used
        by the standalone step view macro to display a single step's details.
      operationId: getStepInstanceByCode
      parameters:
        - name: migrationName
          in: query
          required: true
          schema:
            type: string
          description: Migration name
          example: migrationa
        - name: iterationName
          in: query
          required: true
          schema:
            type: string
          description: Iteration name
          example: run1
        - name: stepCode
          in: query
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}-\d{3}$'
          description: Step code in format XXX-nnn (e.g., APP-001, DBM-042)
          example: APP-001
      responses:
        '200':
          description: Step instance details including instructions and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepInstanceDetails'
        '400':
          description: Bad request - invalid step code format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Missing required parameters. Expected: migrationName, iterationName, stepCode"
        '404':
          description: No step instance found for the given parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "No step instance found for step code: APP-001 in migration: migrationa, iteration: run1"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teams:
    get:
      tags:
        - Teams
      summary: Get teams with optional hierarchical filtering
      description: |
        Retrieves a list of teams. Can be filtered by hierarchical entities to show only teams 
        involved in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllTeams
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter teams by phase instance ID
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the provided details.
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '201':
          description: Team created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{id}:
    get:
      tags:
        - Teams
      summary: Get a team by ID
      description: Retrieves a single team by its unique ID.
      operationId: getTeamById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The requested team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Teams
      summary: Update a team
      description: Updates an existing team's details.
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
      responses:
        '204':
          description: Team updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Delete a team
      description: Deletes a team by its unique ID.
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Team deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /teams/{teamId}/users/{userId}:
    put:
      tags:
        - Teams
      summary: Add a user to a team
      description: Adds a user to a team, creating the membership link.
      operationId: addUserToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Teams
      summary: Remove a user from a team
      description: Removes a user from a team, deleting the membership link.
      operationId: removeUserFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /teams/{id}/applications:
    get:
      tags:
        - Teams
      summary: Get applications associated with a team
      description: Retrieves a list of applications that are associated with the specified team.
      operationId: getTeamApplications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of applications associated with the team
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teams/{teamId}/applications/{applicationId}:
    put:
      tags:
        - Teams
      summary: Add an application to a team
      description: Creates an association between a team and an application.
      operationId: addApplicationToTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application added to team successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Application is already associated with this team.
    delete:
      tags:
        - Teams
      summary: Remove an application from a team
      description: Removes the association between a team and an application.
      operationId: removeApplicationFromTeam
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application removed from team successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /environments:
    get:
      tags:
        - Environments
      summary: Get all environments with counts
      description: |
        Retrieves a list of all environments with their associated application and iteration counts.
        Supports pagination, sorting, and search for admin GUI.
      operationId: getAllEnvironments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          description: Page size for pagination
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter environments
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort direction
      responses:
        '200':
          description: A list of environments with counts
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/EnvironmentWithCounts'
                  - $ref: '#/components/schemas/PaginatedEnvironments'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Environments
      summary: Create a new environment
      description: Creates a new environment with the provided details.
      operationId: createEnvironment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentCreateRequest'
      responses:
        '201':
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/roles:
    get:
      tags:
        - Environments
      summary: Get all environment roles
      description: Retrieves a list of all available environment roles.
      operationId: getEnvironmentRoles
      responses:
        '200':
          description: A list of environment roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentRole'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}:
    get:
      tags:
        - Environments
      summary: Get an environment by ID
      description: Retrieves a single environment with full details including applications and iterations.
      operationId: getEnvironmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Environment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Environments
      summary: Update an environment
      description: Updates an existing environment's details.
      operationId: updateEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentCreateRequest'
      responses:
        '200':
          description: Environment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Delete an environment
      description: Deletes an environment by its unique ID.
      operationId: deleteEnvironment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Environment deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete environment due to existing relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingRelationshipsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/iterations:
    get:
      tags:
        - Environments
      summary: Get iterations grouped by role
      description: Retrieves iterations associated with an environment, grouped by their environment role.
      operationId: getEnvironmentIterationsByRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Iterations grouped by role
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RoleIterations'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/applications/{appId}:
    post:
      tags:
        - Environments
      summary: Associate an application with an environment
      description: Creates an association between an environment and an application.
      operationId: associateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Remove application association
      description: Removes the association between an environment and an application.
      operationId: disassociateApplication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: appId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Application disassociated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /environments/{id}/iterations/{iteId}:
    post:
      tags:
        - Environments
      summary: Associate an iteration with an environment
      description: Creates an association between an environment and an iteration with a specific role.
      operationId: associateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enr_id
              properties:
                enr_id:
                  type: integer
                  description: Environment role ID
      responses:
        '200':
          description: Iteration associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Environments
      summary: Remove iteration association
      description: Removes the association between an environment and an iteration.
      operationId: disassociateIteration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: iteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Iteration disassociated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps:
    get:
      tags:
        - Steps
      summary: Get steps with hierarchical filtering for runsheet
      description: |
        Retrieves step instances grouped by sequence and phase for runsheet display.
        Supports comprehensive hierarchical filtering to show only steps matching the specified criteria.
        Multiple filters can be combined for progressive refinement.
        Results are ordered by sequence number, phase number, and step number.
      operationId: getStepsForRunsheet
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by phase instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by owning team ID
        - name: labelId
          in: query
          required: false
          schema:
            type: integer
          description: Filter steps by label ID (steps that have this label)
      responses:
        '200':
          description: Steps grouped by sequence and phase for runsheet display
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceWithSteps'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/master:
    get:
      tags:
        - Steps
      summary: Get master steps for dropdowns
      description: |
        Retrieves all master steps in a format suitable for dropdown menus.
        Can be filtered by migration ID to show only steps belonging to a specific migration.
      operationId: getMasterSteps
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter steps by migration ID
      responses:
        '200':
          description: List of master steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterStep'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/instance/{stepInstanceId}:
    get:
      tags:
        - Steps
      summary: Get step instance details with instructions
      description: |
        Retrieves detailed information about a specific step instance including all associated instructions.
        Supports both UUID and step code lookup for backward compatibility.
      operationId: getStepInstanceDetails
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
          description: Step instance ID (UUID) or step code for backward compatibility
      responses:
        '200':
          description: Step instance details with instructions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepInstanceDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/{stepInstanceId}/status:
    put:
      tags:
        - Steps
      summary: Update step instance status
      description: |
        Updates the status of a step instance and sends email notifications to relevant users.
        Valid statuses are: OPEN, IN_PROGRESS, COMPLETED, BLOCKED, ON_HOLD.
      operationId: updateStepInstanceStatus
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepStatusUpdate'
      responses:
        '200':
          description: Step status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepStatusUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/{stepInstanceId}/open:
    post:
      tags:
        - Steps
      summary: Mark step as opened by PILOT
      description: |
        Marks a step instance as opened by the PILOT and sends email notifications to the owning team.
      operationId: openStepInstance
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        '200':
          description: Step opened successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/{stepInstanceId}/instructions/{instructionId}/complete:
    post:
      tags:
        - Steps
      summary: Mark instruction as completed
      description: |
        Marks a specific instruction within a step instance as completed and sends email notifications.
      operationId: completeInstruction
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: User ID for audit logging
      responses:
        '200':
          description: Instruction completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionCompleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /steps/{stepInstanceId}/comments:
    get:
      tags:
        - Comments
      summary: Get comments for a step instance
      description: Retrieves all comments associated with a specific step instance.
      operationId: getStepInstanceComments
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        '200':
          description: List of comments for the step instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Comments
      summary: Create a new comment for a step instance
      description: Creates a new comment for the specified step instance.
      operationId: createStepInstanceComment
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '200':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /comments/{commentId}:
    put:
      tags:
        - Comments
      summary: Update a comment
      description: Updates the body of an existing comment.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: Deletes an existing comment.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: Comment ID
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ==================== INSTRUCTIONS API ====================
  
  /instructions:
    get:
      tags:
        - Instructions
      summary: Get master instructions with hierarchical filtering
      description: |
        Retrieves master instructions with optional hierarchical filtering by step, plan, sequence, or phase.
        Results are ordered by instruction order within each step.
      operationId: getMasterInstructions
      parameters:
        - name: stepId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by step master ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by phase instance ID
      responses:
        '200':
          description: List of master instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterInstruction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/master:
    post:
      tags:
        - Instructions
      summary: Create a new master instruction
      description: Creates a new master instruction template for a step.
      operationId: createMasterInstruction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterInstructionCreate'
      responses:
        '201':
          description: Master instruction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterInstruction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/master/{instructionId}:
    get:
      tags:
        - Instructions
      summary: Get master instruction by ID
      description: Retrieves a specific master instruction by its ID.
      operationId: getMasterInstructionById
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      responses:
        '200':
          description: Master instruction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterInstruction'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Instructions
      summary: Update master instruction
      description: Updates an existing master instruction template.
      operationId: updateMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterInstructionUpdate'
      responses:
        '200':
          description: Master instruction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterInstruction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Instructions
      summary: Delete master instruction
      description: Deletes a master instruction template and all its instances.
      operationId: deleteMasterInstruction
      parameters:
        - name: instructionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master instruction ID
      responses:
        '200':
          description: Master instruction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/master/{stepId}/reorder:
    post:
      tags:
        - Instructions
      summary: Reorder master instructions within a step
      description: Updates the order of master instructions within a specific step.
      operationId: reorderMasterInstructions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step master ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstructionReorderRequest'
      responses:
        '200':
          description: Instructions reordered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReorderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/instance/{stepInstanceId}:
    get:
      tags:
        - Instructions
      summary: Get instruction instances for a step instance
      description: Retrieves all instruction instances for a specific step instance, ordered by sequence.
      operationId: getInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      responses:
        '200':
          description: List of instruction instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstructionInstance'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Instructions
      summary: Create instruction instances for a step
      description: Creates instruction instances from master templates for a specific step instance.
      operationId: createInstructionInstances
      parameters:
        - name: stepInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstructionInstanceCreate'
      responses:
        '201':
          description: Instruction instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstructionInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/instance/{instructionInstanceId}:
    get:
      tags:
        - Instructions
      summary: Get instruction instance by ID
      description: Retrieves a specific instruction instance by its ID.
      operationId: getInstructionInstanceById
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        '200':
          description: Instruction instance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionInstance'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/instance/{instructionInstanceId}/complete:
    post:
      tags:
        - Instructions
      summary: Mark instruction instance as completed
      description: Marks an instruction instance as completed by a specific user with timestamp.
      operationId: completeInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstructionCompleteRequest'
      responses:
        '200':
          description: Instruction instance completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionCompleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/instance/{instructionInstanceId}/uncomplete:
    post:
      tags:
        - Instructions
      summary: Mark instruction instance as not completed
      description: Reverts an instruction instance completion status (sets ini_is_completed to false).
      operationId: uncompleteInstructionInstance
      parameters:
        - name: instructionInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Instruction instance ID
      responses:
        '200':
          description: Instruction instance uncompleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionUncompleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/bulk/complete:
    post:
      tags:
        - Instructions
      summary: Bulk complete instruction instances
      description: Marks multiple instruction instances as completed by a specific user.
      operationId: bulkCompleteInstructions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInstructionCompleteRequest'
      responses:
        '200':
          description: Instructions completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkInstructionCompleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/analytics/progress:
    get:
      tags:
        - Instructions
      summary: Get instruction progress analytics
      description: |
        Retrieves instruction completion progress statistics with hierarchical filtering.
        Returns progress metrics for migrations, iterations, or teams.
      operationId: getInstructionProgressAnalytics
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        '200':
          description: Instruction progress analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionProgressAnalytics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /instructions/analytics/completion:
    get:
      tags:
        - Instructions
      summary: Get instruction completion timeline
      description: |
        Retrieves instruction completion timeline data for progress tracking and reporting.
        Shows completion trends over time.
      operationId: getInstructionCompletionAnalytics
      parameters:
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
      responses:
        '200':
          description: Instruction completion timeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructionCompletionAnalytics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /statuses:
    get:
      tags:
        - Statuses
      summary: Get all statuses
      description: Retrieves all available statuses across all entity types.
      operationId: getAllStatuses
      responses:
        '200':
          description: List of all statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /statuses/{type}:
    get:
      tags:
        - Statuses
      summary: Get statuses by entity type
      description: |
        Retrieves all statuses for a specific entity type.
        Common types include: Step, Migration, Iteration, Plan, Sequence, Phase.
      operationId: getStatusesByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: Entity type (capitalized, e.g., "Step", "Migration")
      responses:
        '200':
          description: List of statuses for the specified type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/context:
    get:
      tags:
        - Users
      summary: Get user context information
      description: |
        Retrieves context information for a user including role and permissions.
        Used for authentication and authorization purposes.
      operationId: getUserContext
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: Username to get context for
      responses:
        '200':
          description: User context information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContext'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels:
    get:
      tags:
        - Labels
      summary: Get labels with optional hierarchical filtering
      description: |
        Retrieves a list of labels. Can be filtered by hierarchical entities to show only labels 
        associated with step instances in specific migrations, iterations, plans, sequences, or phases.
      operationId: getAllLabels
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by iteration ID
        - name: planId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by plan instance ID
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by sequence instance ID
        - name: phaseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter labels by phase instance ID
      responses:
        '200':
          description: A list of labels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Labels
      summary: Create a new label
      description: Creates a new label within a migration scope.
      operationId: createLabel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelCreate'
      responses:
        '201':
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{id}:
    get:
      tags:
        - Labels
      summary: Get a specific label by ID
      description: Retrieves detailed information about a specific label including associated applications and step count.
      operationId: getLabelById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '200':
          description: Label details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Labels
      summary: Update an existing label
      description: Updates label properties including migration assignment.
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelUpdate'
      responses:
        '200':
          description: Label updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - Label name already exists in migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Delete a label
      description: Deletes a label and all its associations.
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '204':
          description: Label deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{id}/steps:
    get:
      tags:
        - Labels
      summary: Get steps associated with a label
      description: Retrieves all master steps that are associated with the specified label.
      operationId: getLabelSteps
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
      responses:
        '200':
          description: List of associated steps
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      $ref: '#/components/schemas/LabelStep'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{labelId}/applications/{applicationId}:
    post:
      tags:
        - Labels
      summary: Add application association to label
      description: Associates an application with a label.
      operationId: addLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        '200':
          description: Application associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Remove application association from label
      description: Removes the association between an application and a label.
      operationId: removeLabelApplication
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
          description: Application ID
      responses:
        '200':
          description: Application association removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /labels/{labelId}/steps/{stepId}:
    post:
      tags:
        - Labels
      summary: Add step association to label
      description: Associates a master step with a label.
      operationId: addLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        '200':
          description: Step associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Labels
      summary: Remove step association from label
      description: Removes the association between a master step and a label.
      operationId: removeLabelStep
      parameters:
        - name: labelId
          in: path
          required: true
          schema:
            type: integer
          description: Label ID
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Step Master ID
      responses:
        '200':
          description: Step association removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans/master:
    get:
      tags:
        - Plans
      summary: Get all master plans
      description: Retrieves a list of all master plan templates.
      operationId: getAllMasterPlans
      responses:
        '200':
          description: A list of master plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterPlan'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Plans
      summary: Create a new master plan
      description: Creates a new master plan template.
      operationId: createMasterPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterPlanInput'
      responses:
        '201':
          description: Master plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Plan with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans/master/{id}:
    get:
      tags:
        - Plans
      summary: Get master plan by ID
      description: Retrieves a specific master plan template by its ID.
      operationId: getMasterPlanById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        '200':
          description: Master plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPlan'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Plans
      summary: Update master plan
      description: Updates an existing master plan template.
      operationId: updateMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterPlanUpdate'
      responses:
        '200':
          description: Master plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - Plan with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Plans
      summary: Delete master plan
      description: Soft deletes a master plan template. Only allowed if no instances exist.
      operationId: deleteMasterPlan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Plan ID
      responses:
        '204':
          description: Master plan deleted successfully
        '400':
          description: Cannot delete - plan has active instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans:
    get:
      tags:
        - Plans
      summary: Get plan instances
      description: Retrieves a list of plan instances with optional filtering.
      operationId: getPlanInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        '200':
          description: A list of plan instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans/instance:
    post:
      tags:
        - Plans
      summary: Create plan instance
      description: Creates a new plan instance from a master plan template.
      operationId: createPlanInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInstanceInput'
      responses:
        '201':
          description: Plan instance created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Master plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans/instance/{id}:
    get:
      tags:
        - Plans
      summary: Get plan instance by ID
      description: Retrieves a specific plan instance by its ID.
      operationId: getPlanInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        '200':
          description: Plan instance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanInstanceDetail'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Plans
      summary: Update plan instance
      description: Updates an existing plan instance.
      operationId: updatePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInstanceUpdate'
      responses:
        '200':
          description: Plan instance updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanInstanceDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Plans
      summary: Delete plan instance
      description: Deletes a plan instance.
      operationId: deletePlanInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      responses:
        '204':
          description: Plan instance deleted successfully
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans/{id}/status:
    put:
      tags:
        - Plans
      summary: Update plan instance status
      description: Updates the status of a plan instance.
      operationId: updatePlanInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Plan Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  type: integer
                  description: New status ID
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/master:
    get:
      tags:
        - Sequences
      summary: Get all master sequences
      description: Retrieves a list of all master sequence templates.
      operationId: getAllMasterSequences
      responses:
        '200':
          description: A list of master sequences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterSequence'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Sequences
      summary: Create a new master sequence
      description: Creates a new master sequence template.
      operationId: createMasterSequence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSequenceRequest'
      responses:
        '201':
          description: Master sequence created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterSequence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Sequence with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/master/{id}:
    get:
      tags:
        - Sequences
      summary: Get master sequence by ID
      description: Retrieves a specific master sequence template by its ID.
      operationId: getMasterSequenceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        '200':
          description: Master sequence details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterSequence'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Sequences
      summary: Update master sequence
      description: Updates an existing master sequence template.
      operationId: updateMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSequenceRequest'
      responses:
        '200':
          description: Master sequence updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterSequence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - Sequence with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Sequences
      summary: Delete master sequence
      description: Soft deletes a master sequence template. Only allowed if no instances exist.
      operationId: deleteMasterSequence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      responses:
        '204':
          description: Master sequence deleted successfully
        '400':
          description: Cannot delete - sequence has active instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/master/{id}/order:
    put:
      tags:
        - Sequences
      summary: Update master sequence order
      description: Updates the display order of a master sequence template.
      operationId: updateMasterSequenceOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Sequence ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSequenceOrderRequest'
      responses:
        '200':
          description: Master sequence order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterSequence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences:
    get:
      tags:
        - Sequences
      summary: Get sequence instances
      description: Retrieves a list of sequence instances with optional filtering.
      operationId: getSequenceInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ownership
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        '200':
          description: A list of sequence instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SequenceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/instance:
    post:
      tags:
        - Sequences
      summary: Create sequence instance
      description: Creates a new sequence instance from a master sequence template.
      operationId: createSequenceInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSequenceInstanceRequest'
      responses:
        '201':
          description: Sequence instance created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Master sequence not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/instance/{id}:
    get:
      tags:
        - Sequences
      summary: Get sequence instance by ID
      description: Retrieves a specific sequence instance by its ID.
      operationId: getSequenceInstanceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        '200':
          description: Sequence instance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceInstance'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Sequences
      summary: Update sequence instance
      description: Updates an existing sequence instance.
      operationId: updateSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSequenceInstanceRequest'
      responses:
        '200':
          description: Sequence instance updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Sequences
      summary: Delete sequence instance
      description: Deletes a sequence instance.
      operationId: deleteSequenceInstance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      responses:
        '204':
          description: Sequence instance deleted successfully
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sequences/instance/{id}/status:
    put:
      tags:
        - Sequences
      summary: Update sequence instance status
      description: Updates the status of a sequence instance.
      operationId: updateSequenceInstanceStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Sequence Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
              properties:
                statusId:
                  type: integer
                  description: New status ID
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # === PHASES API ENDPOINTS ===
  /phases/master:
    get:
      tags:
        - Phases
      summary: Get all master phases
      description: Retrieves all master phase templates with optional sequence filtering.
      operationId: getMasterPhases
      parameters:
        - name: sequenceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence master ID
      responses:
        '200':
          description: A list of master phases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterPhase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Phases
      summary: Create master phase
      description: Creates a new master phase template.
      operationId: createMasterPhase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMasterPhaseRequest'
      responses:
        '201':
          description: Master phase created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPhase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/master/{phm_id}:
    get:
      tags:
        - Phases
      summary: Get master phase by ID
      description: Retrieves a specific master phase template.
      operationId: getMasterPhaseById
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        '200':
          description: Master phase details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPhase'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Phases
      summary: Update master phase
      description: Updates a master phase template.
      operationId: updateMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMasterPhaseRequest'
      responses:
        '200':
          description: Master phase updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPhase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Phases
      summary: Delete master phase
      description: Deletes a master phase template if no dependencies exist.
      operationId: deleteMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      responses:
        '200':
          description: Master phase deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/master/{phm_id}/instantiate:
    post:
      tags:
        - Phases
      summary: Instantiate phases from master
      description: Creates phase instances from a master phase template for a specific sequence instance.
      parameters:
        - name: phm_id
          in: path
          required: true
          description: Master phase ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sqi_id
              properties:
                sqi_id:
                  type: string
                  format: uuid
                  description: Sequence instance ID to create phases for
      responses:
        '201':
          description: Phase instances created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/instance:
    get:
      tags:
        - Phases
      summary: Get phase instances
      description: Retrieves phase instances with hierarchical filtering.
      operationId: getPhaseInstances
      parameters:
        - name: migrationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by migration ID
        - name: iterationId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by iteration ID
        - name: planInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by plan instance ID
        - name: sequenceInstanceId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by sequence instance ID
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by team ID
        - name: statusId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by status ID
      responses:
        '200':
          description: A list of phase instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhaseInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Phases
      summary: Create phase instance
      description: Creates a phase instance from a master phase template.
      operationId: createPhaseInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePhaseInstanceRequest'
      responses:
        '201':
          description: Phase instance created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/instance/{phi_id}:
    get:
      tags:
        - Phases
      summary: Get phase instance by ID
      description: Retrieves a specific phase instance.
      operationId: getPhaseInstanceById
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        '200':
          description: Phase instance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseInstance'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Phases
      summary: Update phase instance
      description: Updates a phase instance.
      operationId: updatePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhaseInstanceRequest'
      responses:
        '200':
          description: Phase instance updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Phases
      summary: Delete phase instance
      description: Deletes a phase instance if no dependencies exist.
      operationId: deletePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        '200':
          description: Phase instance deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/instance/{phi_id}/status:
    put:
      tags:
        - Phases
      summary: Update phase instance status
      description: Updates the status of a specific phase instance.
      parameters:
        - name: phi_id
          in: path
          required: true
          description: Phase instance ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sts_id
              properties:
                sts_id:
                  type: string
                  format: uuid
                  description: New status ID
      responses:
        '204':
          description: Status updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/{phi_id}/controls:
    get:
      tags:
        - Phases
      summary: Get phase control points
      description: Retrieves all control points for a phase instance.
      operationId: getPhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        '200':
          description: List of control points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ControlPoint'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/{phi_id}/controls/validate:
    post:
      tags:
        - Phases
      summary: Validate phase control points
      description: Validates all control points for a phase instance.
      operationId: validatePhaseControlPoints
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        '200':
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlPointValidation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/{phi_id}/controls/{cti_id}:
    put:
      tags:
        - Phases
      summary: Update control point
      description: Updates a control point status and validators.
      operationId: updateControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlPointRequest'
      responses:
        '200':
          description: Control point updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/{phi_id}/controls/{cti_id}/override:
    post:
      tags:
        - Phases
      summary: Override control point
      description: Overrides a control point with reason and audit trail.
      operationId: overrideControlPoint
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
        - name: cti_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Control Point Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverrideControlPointRequest'
      responses:
        '200':
          description: Control point overridden successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/{phi_id}/progress:
    get:
      tags:
        - Phases
      summary: Get phase progress
      description: Calculates and returns progress percentage for a phase instance.
      operationId: getPhaseProgress
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      responses:
        '200':
          description: Phase progress information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhaseProgress'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/master/reorder:
    put:
      tags:
        - Phases
      summary: Bulk reorder master phases
      description: Reorders multiple master phases within a sequence.
      operationId: reorderMasterPhases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderMasterPhasesRequest'
      responses:
        '200':
          description: Master phases reordered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/instance/reorder:
    put:
      tags:
        - Phases
      summary: Bulk reorder phase instances
      description: Reorders multiple phase instances within a sequence.
      operationId: reorderPhaseInstances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderPhaseInstancesRequest'
      responses:
        '200':
          description: Phase instances reordered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/master/{phm_id}/move:
    post:
      tags:
        - Phases
      summary: Move master phase
      description: Moves a master phase to a new position within its sequence.
      operationId: moveMasterPhase
      parameters:
        - name: phm_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Master Phase ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovePhaseRequest'
      responses:
        '200':
          description: Master phase moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /phases/instance/{phi_id}/move:
    post:
      tags:
        - Phases
      summary: Move phase instance
      description: Moves a phase instance to a new position within its sequence.
      operationId: movePhaseInstance
      parameters:
        - name: phi_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Phase Instance ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovePhaseRequest'
      responses:
        '200':
          description: Phase instance moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /applications:
    get:
      tags:
        - Applications
      summary: Get all applications
      description: Retrieves a list of all applications.
      operationId: getAllApplications
      responses:
        '200':
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a paginated list of all users with optional filtering and sorting.
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 500
          description: Number of items per page
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter users by name, email, or code
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., usr_first_name, usr_last_name, usr_email)
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
          description: Filter users by team membership
        - name: userCode
          in: query
          required: false
          schema:
            type: string
          description: Find user by exact code match (for authentication)
        - name: active
          in: query
          required: false
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
      responses:
        '200':
          description: A paginated list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalElements:
                    type: integer
                    description: Total number of users
                  totalPages:
                    type: integer
                    description: Total number of pages
                  pageNumber:
                    type: integer
                    description: Current page number (1-based)
                  pageSize:
                    type: integer
                    description: Number of items per page
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - user with same email or code already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update user
      description: Updates an existing user's information.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - email or code already exists for another user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user from the system.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '204':
          description: User deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete - user is referenced by other resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /emailTemplates:
    get:
      tags:
        - EmailTemplates
      summary: Get all email templates
      description: |
        Retrieves a list of all email templates used for notifications.
        Can be filtered to show only active templates.
      operationId: getAllEmailTemplates
      parameters:
        - name: activeOnly
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Filter to show only active templates
      responses:
        '200':
          description: List of email templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailTemplate'
                  total:
                    type: integer
                    description: Total number of templates
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - EmailTemplates
      summary: Create a new email template
      description: Creates a new email template for notifications.
      operationId: createEmailTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateCreate'
      responses:
        '201':
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /emailTemplates/{id}:
    get:
      tags:
        - EmailTemplates
      summary: Get an email template by ID
      description: Retrieves a specific email template by its unique ID.
      operationId: getEmailTemplateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        '200':
          description: Email template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - EmailTemplates
      summary: Update an email template
      description: Updates an existing email template. Supports partial updates.
      operationId: updateEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateUpdate'
      responses:
        '200':
          description: Email template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - EmailTemplates
      summary: Delete an email template
      description: Deletes an email template by its unique ID.
      operationId: deleteEmailTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Email template ID
      responses:
        '204':
          description: Email template deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webapp/{path+}:
    get:
      tags:
        - WebApp
      summary: Serve a static asset
      description: Serves a static asset from the webapp resources.
      operationId: getWebAppAsset
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested asset.
          content:
            application/javascript: {}
            text/css: {}
            image/png: {}
            image/jpeg: {}
            image/svg+xml: {}
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # --- View Models ---
    StepView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string

    MigrationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    Migration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        type:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        businessCutoverDate:
          type: string
          format: date

    Iteration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    IterationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        staticCutoverDate:
          type: string
          format: date
        dynamicCutoverDate:
          type: string
          format: date

    Team:
      type: object
      properties:
        tms_id:
          type: integer
          description: Unique identifier for the team
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    Label:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the label
        name:
          type: string
          description: Name of the label
        description:
          type: string
          description: Description of the label
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
    
    LabelDetail:
      type: object
      properties:
        lbl_id:
          type: integer
          description: Unique identifier for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: User ID who created the label
        applications:
          type: array
          items:
            type: object
            properties:
              app_id:
                type: integer
              app_code:
                type: string
              app_name:
                type: string
        step_count:
          type: integer
          description: Number of associated steps
    
    LabelCreate:
      type: object
      required:
        - lbl_name
        - lbl_color
        - mig_id
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    
    LabelUpdate:
      type: object
      properties:
        lbl_name:
          type: string
          description: Name of the label
        lbl_description:
          type: string
          description: Description of the label
        lbl_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the label
        mig_id:
          type: string
          format: uuid
          description: Migration ID this label belongs to
    
    LabelStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        step_type:
          type: string
          description: Step type code
        step_number:
          type: integer
          description: Step number
        step_title:
          type: string
          description: Step title/name
    
    MasterStep:
      type: object
      properties:
        stm_id:
          type: string
          format: uuid
          description: Step master ID
        stt_code:
          type: string
          description: Step type code
        stm_step_number:
          type: integer
          description: Step number
        stm_title:
          type: string
          description: Step title/name
        stm_description:
          type: string
          description: Step description
        stt_name:
          type: string
          description: Step type name
        step_code:
          type: string
          description: Composed step code (type-number)
        display_name:
          type: string
          description: Display name for dropdowns

    StepInstanceDetails:
      type: object
      description: Complete details for a step instance, including instructions, comments, and metadata
      properties:
        stepSummary:
          type: object
          description: Summary information about the step
          properties:
            ID:
              type: string
              format: uuid
              description: Step instance ID
            StepCode:
              type: string
              pattern: '^[A-Z]{3}-\d{3}$'
              description: Step code (e.g., APP-001)
            Name:
              type: string
              description: Step name
            Status:
              type: string
              description: Current status of the step
            Duration:
              type: integer
              nullable: true
              description: Duration in minutes
            AssignedTeam:
              type: string
              description: Name of the team assigned to this step
            PredecessorCode:
              type: string
              nullable: true
              description: Code of the predecessor step if any
            PredecessorName:
              type: string
              nullable: true
              description: Name of the predecessor step if any
            TargetEnvironment:
              type: string
              nullable: true
              description: Target environment for this step
            Description:
              type: string
              nullable: true
              description: Step description
            MigrationName:
              type: string
              description: Name of the migration
            IterationName:
              type: string
              description: Name of the iteration
            PlanName:
              type: string
              description: Name of the plan
            SequenceName:
              type: string
              description: Name of the sequence
            PhaseName:
              type: string
              description: Name of the phase
            Labels:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Label name
                  color:
                    type: string
                    description: Label color in hex format
        instructions:
          type: array
          description: List of instructions for this step
          items:
            type: object
            properties:
              Id:
                type: string
                format: uuid
                description: Instruction instance ID
              Order:
                type: integer
                description: Display order of the instruction
              Description:
                type: string
                description: Instruction text
              Duration:
                type: integer
                nullable: true
                description: Duration in minutes
              IsCompleted:
                type: boolean
                description: Whether the instruction is completed
        impactedTeams:
          type: array
          description: Teams impacted by this step
          items:
            type: object
            properties:
              name:
                type: string
                description: Team name
        comments:
          type: array
          description: Comments on this step instance
          items:
            type: object
            properties:
              id:
                type: integer
                description: Comment ID
              body:
                type: string
                description: Comment text
              createdAt:
                type: string
                format: date-time
                description: When the comment was created
              author:
                type: object
                properties:
                  name:
                    type: string
                    description: Author's display name
                  team:
                    type: string
                    nullable: true
                    description: Author's team name

    InstructionInstance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Instruction instance ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          description: Instruction description
        content:
          type: string
          description: Instruction content/details
        status:
          type: string
          description: Instruction status
        number:
          type: integer
          description: Instruction number within the step
        isCompleted:
          type: boolean
          description: Whether the instruction is completed

    StepStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, COMPLETED, BLOCKED, ON_HOLD]
          description: New status for the step
        userId:
          type: integer
          description: User ID for audit logging

    StepStatusUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        newStatus:
          type: string
          description: The new status that was set
        emailsSent:
          type: integer
          description: Number of notification emails sent

    StepActionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the action was successful
        message:
          type: string
          description: Success message
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent

    InstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the completion was successful
        message:
          type: string
          description: Success message
        instructionId:
          type: string
          format: uuid
          description: Instruction ID
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance ID
        emailsSent:
          type: integer
          description: Number of notification emails sent

    # ==================== INSTRUCTION SCHEMAS ====================

    MasterInstruction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Master instruction ID
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        teamName:
          type: string
          nullable: true
          description: Responsible team name
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        controlName:
          type: string
          nullable: true
          description: Associated control name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User who created the instruction
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          nullable: true
          description: User who last updated the instruction

    MasterInstructionCreate:
      type: object
      required:
        - stepMasterId
        - name
        - content
        - instructionOrder
      properties:
        stepMasterId:
          type: string
          format: uuid
          description: Associated step master ID
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        createdBy:
          type: integer
          description: User creating the instruction

    MasterInstructionUpdate:
      type: object
      properties:
        name:
          type: string
          description: Instruction name
        description:
          type: string
          nullable: true
          description: Instruction description
        content:
          type: string
          description: Detailed instruction content
        instructionOrder:
          type: integer
          description: Order/sequence within the step
        teamId:
          type: integer
          nullable: true
          description: Responsible team ID
        controlId:
          type: string
          format: uuid
          nullable: true
          description: Associated control ID
        updatedBy:
          type: integer
          description: User updating the instruction

    InstructionInstanceCreate:
      type: object
      required:
        - masterInstructionIds
      properties:
        masterInstructionIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of master instruction IDs to create instances from

    InstructionCompleteRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          description: User ID marking the instruction as complete

    InstructionUncompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the uncomplete action was successful
        message:
          type: string
          description: Success message
        instructionInstanceId:
          type: string
          format: uuid
          description: Instruction instance ID

    BulkInstructionCompleteRequest:
      type: object
      required:
        - instructionInstanceIds
        - userId
      properties:
        instructionInstanceIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of instruction instance IDs to complete
        userId:
          type: integer
          description: User ID marking the instructions as complete

    BulkInstructionCompleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the bulk completion was successful
        message:
          type: string
          description: Success message
        completedCount:
          type: integer
          description: Number of instructions successfully completed
        failedCount:
          type: integer
          description: Number of instructions that failed to complete
        emailsSent:
          type: integer
          description: Number of notification emails sent

    InstructionReorderRequest:
      type: object
      required:
        - orderData
      properties:
        orderData:
          type: array
          items:
            type: object
            required:
              - instructionId
              - order
            properties:
              instructionId:
                type: string
                format: uuid
                description: Instruction ID
              order:
                type: integer
                description: New order position
          description: List of instruction ID and order pairs

    ReorderResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the reorder was successful
        message:
          type: string
          description: Success message
        updatedCount:
          type: integer
          description: Number of instructions reordered

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message
        deletedId:
          type: string
          format: uuid
          description: ID of the deleted entity

    InstructionProgressAnalytics:
      type: object
      properties:
        totalInstructions:
          type: integer
          description: Total number of instruction instances
        completedInstructions:
          type: integer
          description: Number of completed instruction instances
        completionPercentage:
          type: number
          format: double
          description: Completion percentage (0-100)
        teamBreakdown:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              totalInstructions:
                type: integer
                description: Total instructions for this team
              completedInstructions:
                type: integer
                description: Completed instructions for this team
              completionPercentage:
                type: number
                format: double
                description: Team completion percentage
          description: Progress breakdown by team
        phaseBreakdown:
          type: array
          items:
            type: object
            properties:
              phaseId:
                type: string
                format: uuid
                description: Phase instance ID
              phaseName:
                type: string
                description: Phase name
              totalInstructions:
                type: integer
                description: Total instructions in this phase
              completedInstructions:
                type: integer
                description: Completed instructions in this phase
              completionPercentage:
                type: number
                format: double
                description: Phase completion percentage
          description: Progress breakdown by phase

    InstructionCompletionAnalytics:
      type: object
      properties:
        timelineData:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: Date of completion
              count:
                type: integer
                description: Number of instructions completed on this date
              cumulativeCount:
                type: integer
                description: Cumulative count of completed instructions
          description: Daily completion timeline
        averageCompletionTime:
          type: number
          format: double
          description: Average time to complete instructions (in hours)
        peakCompletionDays:
          type: array
          items:
            type: string
            format: date
          description: Days with highest completion activity
        teamPerformance:
          type: array
          items:
            type: object
            properties:
              teamId:
                type: integer
                description: Team ID
              teamName:
                type: string
                description: Team name
              averageCompletionTime:
                type: number
                format: double
                description: Average completion time for this team (in hours)
              totalCompleted:
                type: integer
                description: Total instructions completed by this team
          description: Team performance metrics

    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment ID
        body:
          type: string
          description: Comment text content
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          type: integer
          description: User ID who created the comment
        createdByName:
          type: string
          description: Name of the user who created the comment
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: integer
          description: User ID who last updated the comment
        stepInstanceId:
          type: string
          format: uuid
          description: Step instance this comment belongs to

    CommentCreate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)

    CommentUpdate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          description: Updated comment text content
        userId:
          type: integer
          description: User ID for audit logging (optional)

    CommentCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the creation was successful
        commentId:
          type: integer
          description: ID of the created comment
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    CommentUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
        message:
          type: string
          description: Success message

    CommentDeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
        message:
          type: string
          description: Success message

    Status:
      type: object
      properties:
        sts_id:
          type: integer
          description: Status ID
        sts_code:
          type: string
          description: Status code
        sts_name:
          type: string
          description: Status name
        sts_description:
          type: string
          description: Status description
        sts_type:
          type: string
          description: Entity type this status applies to
        sts_color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
          description: Hex color code for the status
        sts_sort_order:
          type: integer
          description: Sort order for display

    UserContext:
      type: object
      properties:
        userId:
          type: integer
          description: User ID
        username:
          type: string
          description: Username/code
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        isAdmin:
          type: boolean
          description: Whether the user has admin privileges
        roleId:
          type: integer
          description: Role ID
        role:
          type: string
          description: Role code (e.g., NORMAL, PILOT)
        isActive:
          type: boolean
          description: Whether the user account is active

    TeamCreateRequest:
      type: object
      required:
        - tms_name
        - tms_email
      properties:
        tms_name:
          type: string
          description: Name of the team
        tms_email:
          type: string
          format: email
          description: Email address for the team
        tms_description:
          type: string
          description: Description of the team

    # --- Plans Models ---
    MasterPlan:
      type: object
      properties:
        plm_id:
          type: string
          format: uuid
          description: Unique identifier for the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        tms_name:
          type: string
          description: Name of the owning team
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          type: string
          description: Current status of the master plan
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the plan
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    MasterPlanInput:
      type: object
      required:
        - tms_id
        - plm_name
        - plm_status
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          type: string
          description: Initial status of the master plan

    MasterPlanUpdate:
      type: object
      properties:
        tms_id:
          type: integer
          description: ID of the team that owns this plan
        plm_name:
          type: string
          description: Name of the master plan
        plm_description:
          type: string
          description: Description of the plan
        plm_status:
          type: string
          description: Status of the master plan

    PlanInstance:
      type: object
      properties:
        pli_id:
          type: string
          format: uuid
          description: Unique identifier for the plan instance
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan template
        plm_name:
          type: string
          description: Name of the master plan
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration this instance belongs to
        itr_name:
          type: string
          description: Name of the iteration
        mig_name:
          type: string
          description: Name of the migration
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          type: string
          description: Current status of the plan instance
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        created_by:
          type: string
          description: User who created the plan instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the plan instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    PlanInstanceDetail:
      allOf:
        - $ref: '#/components/schemas/PlanInstance'
        - type: object
          properties:
            plm_description:
              type: string
              description: Description from master plan

    PlanInstanceInput:
      type: object
      required:
        - plm_id
        - ite_id
        - usr_id_owner
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan to instantiate
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration for this instance
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        pli_name:
          type: string
          description: Override name for the instance (optional)
        pli_description:
          type: string
          description: Override description for the instance (optional)

    PlanInstanceUpdate:
      type: object
      properties:
        pli_name:
          type: string
          description: Name of the plan instance
        pli_description:
          type: string
          description: Description of the plan instance
        pli_status:
          type: string
          description: Status of the plan instance
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance

    # --- Sequences Models ---
    MasterSequence:
      type: object
      properties:
        sqm_id:
          type: string
          format: uuid
          description: Unique identifier for the master sequence
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        plm_name:
          type: string
          description: Name of the master plan
        tms_id:
          type: integer
          description: ID of the team that owns this sequence
        tms_name:
          type: string
          description: Name of the owning team
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan
        sqm_status:
          type: string
          description: Current status of the master sequence
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        created_by:
          type: string
          description: User who created the sequence
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    CreateSequenceRequest:
      type: object
      required:
        - plm_id
        - tms_id
        - sqm_name
        - sqm_status
      properties:
        plm_id:
          type: string
          format: uuid
          description: ID of the master plan this sequence belongs to
        tms_id:
          type: integer
          description: ID of the team that owns this sequence
        sqm_name:
          type: string
          description: Name of the master sequence
        sqm_description:
          type: string
          description: Description of the sequence
        sqm_order:
          type: integer
          description: Display order within the plan
        sqm_status:
          type: string
          description: Initial status of the master sequence

    UpdateSequenceOrderRequest:
      type: object
      required:
        - sqm_order
      properties:
        sqm_order:
          type: integer
          description: New display order for the sequence

    SequenceInstance:
      type: object
      properties:
        sqi_id:
          type: string
          format: uuid
          description: Unique identifier for the sequence instance
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence template
        sqm_name:
          type: string
          description: Name of the master sequence
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance this sequence belongs to
        pli_name:
          type: string
          description: Name of the plan instance
        ite_id:
          type: string
          format: uuid
          description: ID of the iteration
        itr_name:
          type: string
          description: Name of the iteration
        mig_id:
          type: string
          format: uuid
          description: ID of the migration
        mig_name:
          type: string
          description: Name of the migration
        sqi_name:
          type: string
          description: Name of the sequence instance
        sqi_description:
          type: string
          description: Description of the sequence instance
        sqi_order:
          type: integer
          description: Display order within the plan instance
        sqi_status:
          type: string
          description: Current status of the sequence instance
        sts_id:
          type: integer
          description: Status ID
        sts_name:
          type: string
          description: Status name
        sts_color:
          type: string
          description: Status color code
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        owner_name:
          type: string
          description: Name of the owner
        tms_id:
          type: integer
          description: ID of the team (from master)
        tms_name:
          type: string
          description: Name of the team
        created_by:
          type: string
          description: User who created the sequence instance
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_by:
          type: string
          description: User who last updated the sequence instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    CreateSequenceInstanceRequest:
      type: object
      required:
        - sqm_id
        - pli_id
        - usr_id_owner
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence to instantiate
        pli_id:
          type: string
          format: uuid
          description: ID of the plan instance for this sequence
        usr_id_owner:
          type: integer
          description: ID of the user who owns this instance
        sqi_name:
          type: string
          description: Override name for the sequence instance (optional)
        sqi_description:
          type: string
          description: Override description for the sequence instance (optional)

    User:
      type: object
      properties:
        usr_id:
          type: integer
          description: Unique identifier for the user
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active
        rls_id:
          type: integer
          description: Role ID
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        teams:
          type: array
          items:
            type: object
            properties:
              tms_id:
                type: integer
              tms_name:
                type: string
              tms_description:
                type: string
              tms_email:
                type: string
                format: email
          description: Teams the user belongs to

    UserInput:
      type: object
      required:
        - usr_first_name
        - usr_last_name
        - usr_is_admin
      properties:
        usr_code:
          type: string
          description: "The user's unique 3-letter code"
        usr_first_name:
          type: string
          description: User's first name
        usr_last_name:
          type: string
          description: User's last name
        usr_email:
          type: string
          format: email
          description: User's email address
        usr_is_admin:
          type: boolean
          description: Whether the user has super admin privileges
        usr_active:
          type: boolean
          description: Whether the user account is active (defaults to true)
        rls_id:
          type: integer
          description: Role ID

    PlanInstanceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PhaseSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    SequenceWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseWithSteps'

    PhaseWithSteps:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        number:
          type: integer
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepWithLabels'

    StepWithLabels:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: Formatted step code (e.g., "BGO-001")
        name:
          type: string
        status:
          type: string
          enum: [NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED]
        durationMinutes:
          type: integer
        ownerTeamId:
          type: integer
        ownerTeamName:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'

    # --- Environment Schemas ---
    Environment:
      type: object
      properties:
        env_id:
          type: integer
          description: Unique identifier for the environment
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentWithCounts:
      allOf:
        - $ref: '#/components/schemas/Environment'
        - type: object
          properties:
            application_count:
              type: integer
              description: Number of applications associated with this environment
            iteration_count:
              type: integer
              description: Number of iterations associated with this environment

    EnvironmentCreateRequest:
      type: object
      required:
        - env_code
        - env_name
      properties:
        env_code:
          type: string
          maxLength: 10
          description: Environment code (e.g., DEV, TEST, PROD)
        env_name:
          type: string
          maxLength: 64
          description: Full name of the environment
        env_description:
          type: string
          description: Detailed description of the environment

    EnvironmentDetails:
      allOf:
        - $ref: '#/components/schemas/EnvironmentWithCounts'
        - type: object
          properties:
            applications:
              type: array
              items:
                $ref: '#/components/schemas/Application'
              description: List of applications associated with this environment
            iterations:
              type: array
              items:
                $ref: '#/components/schemas/IterationWithRole'
              description: List of iterations associated with this environment

    Application:
      type: object
      properties:
        app_id:
          type: integer
          description: Unique identifier for the application
        app_code:
          type: string
          description: Application code
        app_name:
          type: string
          description: Name of the application
        app_description:
          type: string
          description: Description of the application

    IterationWithRole:
      allOf:
        - $ref: '#/components/schemas/IterationSummary'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/EnvironmentRole'

    EnvironmentRole:
      type: object
      properties:
        enr_id:
          type: integer
          description: Unique identifier for the environment role
        enr_code:
          type: string
          description: Role code (e.g., SOURCE, TARGET)
        enr_name:
          type: string
          description: Role name
        enr_description:
          type: string
          description: Role description

    PaginatedEnvironments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentWithCounts'
        total:
          type: integer
          description: Total number of environments
        page:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages

    RoleIterations:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/EnvironmentRole'
        iterations:
          type: array
          items:
            $ref: '#/components/schemas/IterationSummary'

    BlockingRelationshipsError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        blocking_relationships:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          description: Object containing arrays of blocking relationships by type

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message

    # --- Email Template Schemas ---
    EmailTemplate:
      type: object
      properties:
        emt_id:
          type: string
          format: uuid
          description: Unique identifier for the email template
        emt_type:
          type: string
          enum: [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active
        emt_created_date:
          type: string
          format: date-time
          description: Creation timestamp
        emt_updated_date:
          type: string
          format: date-time
          description: Last update timestamp
        emt_created_by:
          type: string
          description: Username who created the template
        emt_updated_by:
          type: string
          description: Username who last updated the template

    EmailTemplateCreate:
      type: object
      required:
        - emt_type
        - emt_name
        - emt_subject
        - emt_body_html
      properties:
        emt_type:
          type: string
          enum: [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          default: true
          description: Whether the template is active

    EmailTemplateUpdate:
      type: object
      properties:
        emt_type:
          type: string
          enum: [STEP_OPENED, INSTRUCTION_COMPLETED, STEP_STATUS_CHANGED, CUSTOM]
          description: Type of email template
        emt_name:
          type: string
          description: Name of the email template
        emt_subject:
          type: string
          description: Email subject line template
        emt_body_html:
          type: string
          description: HTML email body template
        emt_body_text:
          type: string
          description: Plain text email body template
        emt_is_active:
          type: boolean
          description: Whether the template is active

    # --- Generic Schemas ---
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    # === PHASES API SCHEMAS ===
    MasterPhase:
      type: object
      properties:
        phm_id:
          type: string
          format: uuid
          description: Unique identifier for the master phase
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor master phase
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this phase
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this phase

    PhaseInstance:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Unique identifier for the phase instance
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase this instance is based on
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          type: string
          description: Current status of the phase instance
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          nullable: true
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          nullable: true
          description: Actual end time of the phase
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        created_by:
          type: integer
          description: ID of the user who created this instance
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        updated_by:
          type: integer
          description: ID of the user who last updated this instance

    ControlPoint:
      type: object
      properties:
        cti_id:
          type: string
          format: uuid
          description: Unique identifier for the control point instance
        phi_id:
          type: string
          format: uuid
          description: ID of the phase instance this control point belongs to
        cti_name:
          type: string
          description: Name of the control point
        cti_description:
          type: string
          description: Description of the control point
        cti_status:
          type: string
          description: Current status of the control point
        cti_type:
          type: string
          description: Type of control point (validation, checkpoint, etc.)
        usr_id_it_validator:
          type: integer
          nullable: true
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          nullable: true
          description: ID of the business validator user
        is_overridden:
          type: boolean
          description: Whether the control point has been overridden
        override_reason:
          type: string
          nullable: true
          description: Reason for override if applicable
        override_by:
          type: string
          nullable: true
          description: User who performed the override
        override_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the override

    ControlPointValidation:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        validation_status:
          type: string
          description: Overall validation status (passed, failed, warning)
        total_controls:
          type: integer
          description: Total number of control points
        validated_controls:
          type: integer
          description: Number of validated control points
        failed_controls:
          type: integer
          description: Number of failed control points
        control_details:
          type: array
          items:
            type: object
            properties:
              cti_id:
                type: string
                format: uuid
                description: Control point instance ID
              cti_name:
                type: string
                description: Control point name
              status:
                type: string
                description: Individual control point status
              validation_result:
                type: string
                description: Validation result details

    PhaseProgress:
      type: object
      properties:
        phi_id:
          type: string
          format: uuid
          description: Phase instance ID
        progress_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Progress percentage (0-100)

    CreateMasterPhaseRequest:
      type: object
      required:
        - sqm_id
        - phm_name
      properties:
        sqm_id:
          type: string
          format: uuid
          description: ID of the master sequence this phase belongs to
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        phm_order:
          type: integer
          description: Display order within the sequence
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase

    UpdateMasterPhaseRequest:
      type: object
      properties:
        phm_name:
          type: string
          description: Name of the master phase
        phm_description:
          type: string
          description: Description of the master phase
        predecessor_phm_id:
          type: string
          format: uuid
          description: ID of the predecessor master phase

    CreatePhaseInstanceRequest:
      type: object
      required:
        - phm_id
        - sqi_id
      properties:
        phm_id:
          type: string
          format: uuid
          description: ID of the master phase to instantiate
        sqi_id:
          type: string
          format: uuid
          description: ID of the sequence instance this phase belongs to
        phi_name:
          type: string
          description: Name override for the phase instance
        phi_description:
          type: string
          description: Description override for the phase instance
        phi_status:
          type: string
          description: Initial status of the phase instance
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance

    UpdatePhaseInstanceRequest:
      type: object
      properties:
        phi_name:
          type: string
          description: Name of the phase instance
        phi_description:
          type: string
          description: Description of the phase instance
        phi_status:
          type: string
          description: Status of the phase instance
        phi_order:
          type: integer
          description: Display order within the sequence instance
        predecessor_phi_id:
          type: string
          format: uuid
          description: ID of the predecessor phase instance
        phi_start_time:
          type: string
          format: date-time
          description: Actual start time of the phase
        phi_end_time:
          type: string
          format: date-time
          description: Actual end time of the phase

    UpdateControlPointRequest:
      type: object
      properties:
        cti_status:
          type: string
          description: New status for the control point
        usr_id_it_validator:
          type: integer
          description: ID of the IT validator user
        usr_id_biz_validator:
          type: integer
          description: ID of the business validator user

    OverrideControlPointRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for the override
          default: "Override requested"
        overrideBy:
          type: string
          description: User performing the override
          default: "system"

    ReorderMasterPhasesRequest:
      type: object
      required:
        - sequenceId
        - phaseOrderMap
      properties:
        sequenceId:
          type: string
          format: uuid
          description: ID of the master sequence containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase UUID to new order position
          example:
            "123e4567-e89b-12d3-a456-426614174000": 1
            "456e7890-e89b-12d3-a456-426614174001": 2

    ReorderPhaseInstancesRequest:
      type: object
      required:
        - sequenceInstanceId
        - phaseOrderMap
      properties:
        sequenceInstanceId:
          type: string
          format: uuid
          description: ID of the sequence instance containing the phases
        phaseOrderMap:
          type: object
          additionalProperties:
            type: integer
          description: Map of phase instance UUID to new order position
          example:
            "789e0123-e89b-12d3-a456-426614174002": 1
            "012e3456-e89b-12d3-a456-426614174003": 2

    MovePhaseRequest:
      type: object
      required:
        - newOrder
      properties:
        newOrder:
          type: integer
          description: New order position for the phase
          minimum: 1

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access to the resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid input, object invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource (e.g., duplicate entry).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
