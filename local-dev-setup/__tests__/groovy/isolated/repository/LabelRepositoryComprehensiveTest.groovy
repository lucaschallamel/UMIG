package umig.tests.unit.repository

import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import groovy.transform.Field
import java.sql.Connection
import java.sql.SQLException
import java.sql.Timestamp

/**
 * Comprehensive test suite for LabelRepository following TD-001 self-contained architecture
 *
 * TD-014 Week 2: Repository 3 of 8 - LabelRepository Coverage
 * - 24 tests across 5 categories
 * - 100% method coverage (12/12 methods)
 * - 90-95% line coverage target
 * - ADR-031 compliant type casting
 * - Zero external dependencies
 *
 * Critical Testing Requirements:
 * - Field name transformation validation (lbl_id → id, lbl_name → name, etc.)
 * - UUID parameter handling for all 5 hierarchical methods
 * - Dynamic partial update testing with field validation
 * - Computed counts validation in pagination
 * - Complex join chain validation (findLabelsByPhaseId)
 * - Blocking relationships prevent deletion
 *
 * Coverage: LabelRepository hierarchical filtering, pagination, CRUD operations
 */
class LabelRepositoryComprehensiveTest {

    // ============================================
    // EMBEDDED DEPENDENCIES - TD-001 Pattern
    // ============================================

    // Mock PostgreSQL exception for self-contained testing
    static class MockPSQLException extends SQLException {
        MockPSQLException(String message, String sqlState) {
            super(message, sqlState)
        }
    }

    static class MockConnection implements Connection {
        @Override
        void close() {}

        @Override
        boolean isClosed() { return false }

        @Override
        boolean getAutoCommit() { return true }

        @Override
        void setAutoCommit(boolean autoCommit) {}

        // Required stub methods
        @Override
        java.sql.Statement createStatement() { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql) { return null }

        @Override
        java.sql.CallableStatement prepareCall(String sql) { return null }

        @Override
        String nativeSQL(String sql) { return sql }

        @Override
        void commit() {}

        @Override
        void rollback() {}

        @Override
        java.sql.DatabaseMetaData getMetaData() { return null }

        @Override
        void setReadOnly(boolean readOnly) {}

        @Override
        boolean isReadOnly() { return false }

        @Override
        void setCatalog(String catalog) {}

        @Override
        String getCatalog() { return null }

        @Override
        void setTransactionIsolation(int level) {}

        @Override
        int getTransactionIsolation() { return 0 }

        @Override
        java.sql.SQLWarning getWarnings() { return null }

        @Override
        void clearWarnings() {}

        @Override
        java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency) { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) { return null }

        @Override
        java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) { return null }

        @Override
        java.util.Map<String, Class<?>> getTypeMap() { return null }

        @Override
        void setTypeMap(java.util.Map<String, Class<?>> map) {}

        @Override
        void setHoldability(int holdability) {}

        @Override
        int getHoldability() { return 0 }

        @Override
        java.sql.Savepoint setSavepoint() { return null }

        @Override
        java.sql.Savepoint setSavepoint(String name) { return null }

        @Override
        void rollback(java.sql.Savepoint savepoint) {}

        @Override
        void releaseSavepoint(java.sql.Savepoint savepoint) {}

        @Override
        java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) { return null }

        @Override
        java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql, int[] columnIndexes) { return null }

        @Override
        java.sql.PreparedStatement prepareStatement(String sql, String[] columnNames) { return null }

        @Override
        java.sql.Clob createClob() { return null }

        @Override
        java.sql.Blob createBlob() { return null }

        @Override
        java.sql.NClob createNClob() { return null }

        @Override
        java.sql.SQLXML createSQLXML() { return null }

        @Override
        boolean isValid(int timeout) { return true }

        @Override
        void setClientInfo(String name, String value) {}

        @Override
        void setClientInfo(java.util.Properties properties) {}

        @Override
        String getClientInfo(String name) { return null }

        @Override
        java.util.Properties getClientInfo() { return null }

        @Override
        java.sql.Array createArrayOf(String typeName, Object[] elements) { return null }

        @Override
        java.sql.Struct createStruct(String typeName, Object[] attributes) { return null }

        @Override
        void setSchema(String schema) {}

        @Override
        String getSchema() { return null }

        @Override
        void abort(java.util.concurrent.Executor executor) {}

        @Override
        void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds) {}

        @Override
        int getNetworkTimeout() { return 0 }

        @Override
        <T> T unwrap(Class<T> iface) { return null }

        @Override
        boolean isWrapperFor(Class<?> iface) { return false }
    }

    /**
     * PropertyAccessibleRowResult - Wrapper for GroovyRowResult that properly exposes map properties
     *
     * FIX: Resolves "No such property: count/total" errors by enabling direct property access
     * on Map keys (e.g., result.count, result.total) which standard GroovyRowResult doesn't support
     * in the test context.
     *
     * Root Cause: Tests access properties like `blocking.steps.count` but GroovyRowResult
     * doesn't expose map keys as properties by default in static typing contexts.
     *
     * Solution: Override getProperty() to fall back to map access when standard property
     * lookup fails, maintaining full backward compatibility.
     */
    static class PropertyAccessibleRowResult extends GroovyRowResult {
        PropertyAccessibleRowResult(Map map) {
            super(map)
        }

        @Override
        Object getProperty(String name) {
            try {
                // First try GroovyRowResult's native property access
                return super.getProperty(name)
            } catch (MissingPropertyException e) {
                // Fall back to map get() method for keys like 'count', 'total', etc.
                return this.get(name)
            }
        }
    }

    static class EmbeddedMockSql extends Sql {
        private Map<String, List<Map<String, Object>>> mockData = [:]
        private boolean throwError = false
        private String errorMessage = ""
        private String sqlState = ""
        private int nextLabelId = 8

        EmbeddedMockSql() {
            super(new MockConnection())
            initializeMockData()
        }

        private void initializeMockData() {
            // 7 labels with edge cases
            mockData['labels'] = [
                [
                    lbl_id: 1,
                    lbl_name: 'Critical',
                    lbl_description: 'Critical priority',
                    lbl_color: '#FF0000',
                    mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'),
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 2,
                    lbl_name: 'High',
                    lbl_description: 'High priority',
                    lbl_color: '#FFA500',
                    mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'),
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 3,
                    lbl_name: 'Medium',
                    lbl_description: 'Medium priority',
                    lbl_color: '#FFFF00',
                    mig_id: UUID.fromString('00000000-0000-0000-0000-000000000002'),
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 4,
                    lbl_name: 'Low',
                    lbl_description: 'Low priority',
                    lbl_color: '#00FF00',
                    mig_id: UUID.fromString('00000000-0000-0000-0000-000000000002'),
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 5,
                    lbl_name: 'Legacy',
                    lbl_description: null,
                    lbl_color: '#808080',
                    mig_id: null,
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 6,
                    lbl_name: 'Migration-Specific',
                    lbl_description: 'Only for migration 1',
                    lbl_color: '#0000FF',
                    mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'),
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>,
                [
                    lbl_id: 7,
                    lbl_name: 'Orphan',
                    lbl_description: 'No relationships',
                    lbl_color: '#800080',
                    mig_id: null,
                    created_at: new Timestamp(System.currentTimeMillis()),
                    created_by: 'admin'
                ] as Map<String, Object>
            ]

            // Hierarchical entities
            mockData['migrations'] = [
                [mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'), mig_name: 'Migration Alpha'] as Map<String, Object>,
                [mig_id: UUID.fromString('00000000-0000-0000-0000-000000000002'), mig_name: 'Migration Beta'] as Map<String, Object>
            ]

            mockData['iterations'] = [
                [ite_id: UUID.fromString('10000000-0000-0000-0000-000000000001'), ite_name: 'Wave 1', mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'), plm_id: 1] as Map<String, Object>,
                [ite_id: UUID.fromString('10000000-0000-0000-0000-000000000002'), ite_name: 'Wave 2', mig_id: UUID.fromString('00000000-0000-0000-0000-000000000002'), plm_id: 2] as Map<String, Object>
            ]

            mockData['planInstances'] = [
                [pli_id: UUID.fromString('20000000-0000-0000-0000-000000000001'), pli_name: 'Plan A', ite_id: UUID.fromString('10000000-0000-0000-0000-000000000001'), plm_id: 1] as Map<String, Object>,
                [pli_id: UUID.fromString('20000000-0000-0000-0000-000000000002'), pli_name: 'Plan B', ite_id: UUID.fromString('10000000-0000-0000-0000-000000000002'), plm_id: 2] as Map<String, Object>
            ]

            mockData['sequenceInstances'] = [
                [sqi_id: UUID.fromString('30000000-0000-0000-0000-000000000001'), sqi_name: 'Sequence 1', pli_id: UUID.fromString('20000000-0000-0000-0000-000000000001'), sqm_id: 1] as Map<String, Object>,
                [sqi_id: UUID.fromString('30000000-0000-0000-0000-000000000002'), sqi_name: 'Sequence 2', pli_id: UUID.fromString('20000000-0000-0000-0000-000000000002'), sqm_id: 2] as Map<String, Object>
            ]

            mockData['phaseInstances'] = [
                [phi_id: UUID.fromString('40000000-0000-0000-0000-000000000001'), phi_name: 'Phase 1', sqi_id: UUID.fromString('30000000-0000-0000-0000-000000000001')] as Map<String, Object>,
                [phi_id: UUID.fromString('40000000-0000-0000-0000-000000000002'), phi_name: 'Phase 2', sqi_id: UUID.fromString('30000000-0000-0000-0000-000000000002')] as Map<String, Object>
            ]

            mockData['stepsMaster'] = [
                [stm_id: 1, stm_name: 'Deploy App', stm_code: 'STM-001', phm_id: 1] as Map<String, Object>,
                [stm_id: 2, stm_name: 'Configure DB', stm_code: 'STM-002', phm_id: 2] as Map<String, Object>
            ]

            mockData['stepsInstance'] = [
                [sti_id: UUID.fromString('50000000-0000-0000-0000-000000000001'), sti_name: 'Deploy App Instance', stm_id: 1, phi_id: UUID.fromString('40000000-0000-0000-0000-000000000001')] as Map<String, Object>,
                [sti_id: UUID.fromString('50000000-0000-0000-0000-000000000002'), sti_name: 'Configure DB Instance', stm_id: 2, phi_id: UUID.fromString('40000000-0000-0000-0000-000000000002')] as Map<String, Object>
            ]

            mockData['phasesMaster'] = [
                [phm_id: 1, phm_name: 'Phase Master 1', sqm_id: 1] as Map<String, Object>,
                [phm_id: 2, phm_name: 'Phase Master 2', sqm_id: 2] as Map<String, Object>
            ]

            mockData['sequencesMaster'] = [
                [sqm_id: 1, sqm_name: 'Sequence Master 1', plm_id: 1] as Map<String, Object>,
                [sqm_id: 2, sqm_name: 'Sequence Master 2', plm_id: 2] as Map<String, Object>
            ]

            mockData['applications'] = [
                [app_id: 1, app_name: 'App A', app_code: 'APP-A'] as Map<String, Object>,
                [app_id: 2, app_name: 'App B', app_code: 'APP-B'] as Map<String, Object>
            ]

            mockData['users'] = [
                [usr_code: 'admin', usr_first_name: 'Admin', usr_last_name: 'User'] as Map<String, Object>
            ]

            // Junction tables
            mockData['labelAppAssociations'] = [
                [lbl_id: 1, app_id: 1] as Map<String, Object>,
                [lbl_id: 1, app_id: 2] as Map<String, Object>,
                [lbl_id: 2, app_id: 1] as Map<String, Object>
            ]

            mockData['labelStepAssociations'] = [
                [lbl_id: 1, stm_id: 1] as Map<String, Object>,
                [lbl_id: 1, stm_id: 2] as Map<String, Object>,
                [lbl_id: 2, stm_id: 1] as Map<String, Object>
            ]
        }

        @Override
        List<GroovyRowResult> rows(String query, Map<String, Object> params = [:]) {
            if (throwError) {
                if (sqlState == '23503') {
                    throw new MockPSQLException(errorMessage, '23503')
                } else if (sqlState == '23505') {
                    throw new MockPSQLException(errorMessage, '23505')
                }
                throw new SQLException(errorMessage)
            }

            // Find all labels
            if (query.contains('SELECT lbl_id, lbl_name, lbl_description, lbl_color') &&
                query.contains('FROM labels_lbl') &&
                query.contains('ORDER BY lbl_name') &&
                !query.contains('JOIN')) {
                return mockData['labels'].collect { new PropertyAccessibleRowResult(it as Map) }
            }

            // Find labels by migration ID (hierarchical)
            if (query.contains('JOIN iterations_ite i ON') && params.containsKey('migrationId')) {
                UUID migrationId = params.migrationId as UUID
                def relevantLabels = mockData['labels'].findAll { label ->
                    (label as Map<String, Object>).mig_id == migrationId
                }
                return relevantLabels.collect { new PropertyAccessibleRowResult(it as Map) }
            }

            // Find labels by iteration ID
            if (query.contains('WHERE i.ite_id = :iterationId')) {
                UUID iterationId = params.iterationId as UUID
                def iteration = mockData['iterations'].find { (it as Map<String, Object>).ite_id == iterationId }
                if (iteration) {
                    def migrationId = (iteration as Map<String, Object>).mig_id as UUID
                    def relevantLabels = mockData['labels'].findAll { label ->
                        (label as Map<String, Object>).mig_id == migrationId
                    }
                    return relevantLabels.collect { new PropertyAccessibleRowResult(it as Map) }
                }
                return []
            }

            // Find labels by plan ID
            if (query.contains('WHERE pli.pli_id = :planInstanceId')) {
                UUID planId = params.planInstanceId as UUID
                def plan = mockData['planInstances'].find { (it as Map<String, Object>).pli_id == planId }
                if (plan) {
                    def iterationId = (plan as Map<String, Object>).ite_id as UUID
                    def iteration = mockData['iterations'].find { (it as Map<String, Object>).ite_id == iterationId }
                    if (iteration) {
                        def migrationId = (iteration as Map<String, Object>).mig_id as UUID
                        def relevantLabels = mockData['labels'].findAll { label ->
                            (label as Map<String, Object>).mig_id == migrationId
                        }
                        return relevantLabels.collect { new PropertyAccessibleRowResult(it as Map) }
                    }
                }
                return []
            }

            // Find labels by sequence ID
            if (query.contains('WHERE sqi.sqi_id = :sequenceInstanceId')) {
                UUID sequenceId = params.sequenceInstanceId as UUID
                def sequence = mockData['sequenceInstances'].find { (it as Map<String, Object>).sqi_id == sequenceId }
                if (sequence) {
                    def planId = (sequence as Map<String, Object>).pli_id as UUID
                    def plan = mockData['planInstances'].find { (it as Map<String, Object>).pli_id == planId }
                    if (plan) {
                        def iterationId = (plan as Map<String, Object>).ite_id as UUID
                        def iteration = mockData['iterations'].find { (it as Map<String, Object>).ite_id == iterationId }
                        if (iteration) {
                            def migrationId = (iteration as Map<String, Object>).mig_id as UUID
                            def relevantLabels = mockData['labels'].findAll { label ->
                                (label as Map<String, Object>).mig_id == migrationId
                            }
                            return relevantLabels.collect { new PropertyAccessibleRowResult(it as Map) }
                        }
                    }
                }
                return []
            }

            // Find labels by phase ID (complex join chain: phi → sti → stm → labels)
            if (query.contains('WHERE phi.phi_id = :phaseInstanceId')) {
                UUID phaseId = params.phaseInstanceId as UUID
                def stepInstances = mockData['stepsInstance'].findAll {
                    (it as Map<String, Object>).phi_id == phaseId
                }
                def stmIds = stepInstances.collect { (it as Map<String, Object>).stm_id }
                def associations = mockData['labelStepAssociations'].findAll {
                    stmIds.contains((it as Map<String, Object>).stm_id)
                }
                def labelIds = associations.collect { (it as Map<String, Object>).lbl_id }
                def relevantLabels = mockData['labels'].findAll {
                    labelIds.contains((it as Map<String, Object>).lbl_id)
                }
                return relevantLabels.collect { new PropertyAccessibleRowResult(it as Map) }
            }

            // Pagination query - count query
            if (query.contains('SELECT COUNT(*)') && query.contains('FROM labels_lbl')) {
                int count = mockData['labels'].size()
                if (params.containsKey('searchTerm')) {
                    String searchTerm = (params.searchTerm as String).toLowerCase().replace('%', '')
                    count = mockData['labels'].findAll { label ->
                        def lblName = ((label as Map<String, Object>).lbl_name as String).toLowerCase()
                        def lblDesc = (label as Map<String, Object>).lbl_description as String
                        lblName.contains(searchTerm) || (lblDesc && lblDesc.toLowerCase().contains(searchTerm))
                    }.size()
                }
                return [new PropertyAccessibleRowResult([total: count] as Map)]
            }

            // Pagination query - data query
            if (query.contains('COALESCE(app_counts.app_count, 0)::INTEGER AS application_count')) {
                def labels = mockData['labels']

                // Apply search filter if present
                if (params.containsKey('searchTerm')) {
                    String searchTerm = (params.searchTerm as String).toLowerCase().replace('%', '')
                    labels = labels.findAll { label ->
                        def lblName = ((label as Map<String, Object>).lbl_name as String).toLowerCase()
                        def lblDesc = (label as Map<String, Object>).lbl_description as String
                        lblName.contains(searchTerm) || (lblDesc && lblDesc.toLowerCase().contains(searchTerm))
                    }
                }

                // Enrich with counts and migration name
                def enrichedLabels = labels.collect { label ->
                    def lblId = (label as Map<String, Object>).lbl_id as Integer
                    def migId = (label as Map<String, Object>).mig_id as UUID

                    def appCount = mockData['labelAppAssociations'].count {
                        (it as Map<String, Object>).lbl_id == lblId
                    }
                    def stepCount = mockData['labelStepAssociations'].count {
                        (it as Map<String, Object>).lbl_id == lblId
                    }

                    def migration = migId ? mockData['migrations'].find { (it as Map<String, Object>).mig_id == migId } : null
                    def migName = migration ? (migration as Map<String, Object>).mig_name : null

                    def enriched = new HashMap<String, Object>(label as Map<String, Object>)
                    enriched.application_count = appCount
                    enriched.step_count = stepCount
                    enriched.mig_name = migName
                    enriched.updated_at = enriched.created_at
                    enriched.updated_by = enriched.created_by
                    return enriched
                }

                // Apply pagination
                int offset = params.offset as Integer
                int limit = params.limit as Integer
                def paginated = enrichedLabels.drop(offset).take(limit)

                return paginated.collect { new PropertyAccessibleRowResult(it as Map) }
            }

            // Get blocking relationships - applications
            if (query.contains('FROM applications_app a') && query.contains('JOIN labels_lbl_x_applications_app')) {
                Integer labelId = params.labelId as Integer
                def associations = mockData['labelAppAssociations'].findAll {
                    (it as Map<String, Object>).lbl_id == labelId
                }
                def appIds = associations.collect { (it as Map<String, Object>).app_id }
                def apps = mockData['applications'].findAll {
                    appIds.contains((it as Map<String, Object>).app_id)
                }
                return apps.collect { new PropertyAccessibleRowResult(it as Map) }
            }

            // Get blocking relationships - steps count
            if (query.contains('SELECT COUNT(*) as count') && query.contains('FROM labels_lbl_x_steps_master_stm')) {
                Integer labelId = params.labelId as Integer
                def countResult = mockData['labelStepAssociations'].count {
                    (it as Map<String, Object>).lbl_id == labelId
                }
                return [new PropertyAccessibleRowResult([count: countResult] as Map)]
            }

            return []
        }

        GroovyRowResult firstRow(String query, Map<String, Object> params = [:]) {
            if (throwError) {
                if (sqlState == '23503') {
                    throw new MockPSQLException(errorMessage, '23503')
                } else if (sqlState == '23505') {
                    throw new MockPSQLException(errorMessage, '23505')
                }
                throw new SQLException(errorMessage)
            }

            // Find label by ID
            if (query.contains('FROM labels_lbl l') && query.contains('WHERE l.lbl_id = :labelId')) {
                Integer labelId = params.labelId as Integer
                def label = mockData['labels'].find {
                    (it as Map<String, Object>).lbl_id == labelId
                }
                if (label) {
                    def enriched = new HashMap<String, Object>(label as Map<String, Object>)
                    def migId = enriched.mig_id as UUID
                    if (migId) {
                        def migration = mockData['migrations'].find { (it as Map<String, Object>).mig_id == migId }
                        enriched.mig_name = migration ? (migration as Map<String, Object>).mig_name : null
                    } else {
                        enriched.mig_name = null
                    }

                    def user = mockData['users'].find { (it as Map<String, Object>).usr_code == enriched.created_by }
                    enriched.usr_first_name = user ? (user as Map<String, Object>).usr_first_name : null
                    enriched.usr_last_name = user ? (user as Map<String, Object>).usr_last_name : null
                    enriched.updated_at = enriched.created_at
                    enriched.updated_by = enriched.created_by

                    return new PropertyAccessibleRowResult(enriched as Map)
                }
                return null
            }

            def results = rows(query, params)
            return results.isEmpty() ? null : results[0]
        }

        List<List<Object>> executeInsert(String query, Map<String, Object> params) {
            if (throwError) {
                if (sqlState == '23505') {
                    throw new MockPSQLException("duplicate key value violates unique constraint", '23505')
                }
                throw new SQLException(errorMessage)
            }

            if (query.contains('INSERT INTO labels_lbl')) {
                int newId = nextLabelId++
                def newLabel = new HashMap<String, Object>(params)
                newLabel.lbl_id = newId
                newLabel.created_at = new Timestamp(System.currentTimeMillis())
                if (!newLabel.created_by) {
                    newLabel.created_by = 'system'
                }
                mockData['labels'].add(newLabel)
                return [[newId]]
            }

            return [[1]]
        }

        int executeUpdate(String query, Map<String, Object> params) {
            if (throwError) {
                if (sqlState == '23503') {
                    throw new MockPSQLException("violates foreign key constraint", '23503')
                }
                throw new SQLException(errorMessage)
            }

            if (query.contains('UPDATE labels_lbl')) {
                Integer labelId = params.lbl_id as Integer
                def label = mockData['labels'].find { (it as Map<String, Object>).lbl_id == labelId }
                if (label) {
                    if (params.containsKey('lbl_name')) {
                        (label as Map<String, Object>).lbl_name = params.lbl_name
                    }
                    if (params.containsKey('lbl_description')) {
                        (label as Map<String, Object>).lbl_description = params.lbl_description
                    }
                    if (params.containsKey('lbl_color')) {
                        (label as Map<String, Object>).lbl_color = params.lbl_color
                    }
                    if (params.containsKey('mig_id')) {
                        (label as Map<String, Object>).mig_id = params.mig_id
                    }
                    (label as Map<String, Object>).updated_at = new Timestamp(System.currentTimeMillis())
                    (label as Map<String, Object>).updated_by = params.updated_by ?: 'system'
                    return 1
                }
                return 0
            }

            if (query.contains('DELETE FROM labels_lbl')) {
                Integer labelId = params.labelId as Integer

                // Check for blocking relationships
                def hasApps = mockData['labelAppAssociations'].any {
                    (it as Map<String, Object>).lbl_id == labelId
                }
                def hasSteps = mockData['labelStepAssociations'].any {
                    (it as Map<String, Object>).lbl_id == labelId
                }

                if (hasApps || hasSteps) {
                    throw new MockPSQLException("violates foreign key constraint", '23503')
                }

                def removed = mockData['labels'].removeAll {
                    (it as Map<String, Object>).lbl_id == labelId
                }
                return removed ? 1 : 0
            }

            return 0
        }

        void setError(boolean error, String message = "Test error", String state = "") {
            this.throwError = error
            this.errorMessage = message
            this.sqlState = state
        }
    }

    static class EmbeddedDatabaseUtil {
        private static EmbeddedMockSql mockSql = new EmbeddedMockSql()

        static <T> T withSql(Closure<T> closure) {
            return closure.call(mockSql) as T
        }

        static void resetMockSql() {
            mockSql = new EmbeddedMockSql()
        }

        static EmbeddedMockSql getMockSql() {
            return mockSql
        }
    }

    static class EmbeddedLabelRepository {

        /**
         * Retrieves all labels from the database.
         * @return A list of labels with frontend-compatible field names.
         */
        List<Map<String, Object>> findAllLabels() {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT lbl_id, lbl_name, lbl_description, lbl_color
                    FROM labels_lbl
                    ORDER BY lbl_name
                """, [:] as Map<String, Object>)

                // Transform to match frontend expectations
                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds labels involved in a specific migration.
         * @param migrationId The UUID of the migration.
         * @return A list of labels involved in the migration.
         */
        List<Map<String, Object>> findLabelsByMigrationId(UUID migrationId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT DISTINCT l.lbl_id, l.lbl_name, l.lbl_description, l.lbl_color
                    FROM labels_lbl l
                    JOIN labels_lbl_x_steps_master_stm lxs ON l.lbl_id = lxs.lbl_id
                    JOIN steps_master_stm s ON lxs.stm_id = s.stm_id
                    JOIN phases_master_phm p ON s.phm_id = p.phm_id
                    JOIN sequences_master_sqm sq ON p.sqm_id = sq.sqm_id
                    JOIN plans_master_plm pl ON sq.plm_id = pl.plm_id
                    JOIN iterations_ite i ON pl.plm_id = i.plm_id
                    WHERE i.mig_id = :migrationId
                    ORDER BY l.lbl_name
                """, [migrationId: migrationId] as Map<String, Object>)

                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds labels involved in a specific iteration.
         * @param iterationId The UUID of the iteration.
         * @return A list of labels involved in the iteration.
         */
        List<Map<String, Object>> findLabelsByIterationId(UUID iterationId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT DISTINCT l.lbl_id, l.lbl_name, l.lbl_description, l.lbl_color
                    FROM labels_lbl l
                    JOIN labels_lbl_x_steps_master_stm lxs ON l.lbl_id = lxs.lbl_id
                    JOIN steps_master_stm s ON lxs.stm_id = s.stm_id
                    JOIN phases_master_phm p ON s.phm_id = p.phm_id
                    JOIN sequences_master_sqm sq ON p.sqm_id = sq.sqm_id
                    JOIN plans_master_plm pl ON sq.plm_id = pl.plm_id
                    JOIN iterations_ite i ON pl.plm_id = i.plm_id
                    WHERE i.ite_id = :iterationId
                    ORDER BY l.lbl_name
                """, [iterationId: iterationId] as Map<String, Object>)

                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds labels involved in a specific plan instance.
         * @param planInstanceId The UUID of the plan instance.
         * @return A list of labels involved in the plan instance.
         */
        List<Map<String, Object>> findLabelsByPlanId(UUID planInstanceId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT DISTINCT l.lbl_id, l.lbl_name, l.lbl_description, l.lbl_color
                    FROM labels_lbl l
                    JOIN labels_lbl_x_steps_master_stm lxs ON l.lbl_id = lxs.lbl_id
                    JOIN steps_master_stm s ON lxs.stm_id = s.stm_id
                    JOIN phases_master_phm p ON s.phm_id = p.phm_id
                    JOIN sequences_master_sqm sq ON p.sqm_id = sq.sqm_id
                    JOIN plans_instance_pli pli ON sq.plm_id = pli.plm_id
                    WHERE pli.pli_id = :planInstanceId
                    ORDER BY l.lbl_name
                """, [planInstanceId: planInstanceId] as Map<String, Object>)

                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds labels involved in a specific sequence instance.
         * @param sequenceInstanceId The UUID of the sequence instance.
         * @return A list of labels involved in the sequence instance.
         */
        List<Map<String, Object>> findLabelsBySequenceId(UUID sequenceInstanceId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT DISTINCT l.lbl_id, l.lbl_name, l.lbl_description, l.lbl_color
                    FROM labels_lbl l
                    JOIN labels_lbl_x_steps_master_stm lxs ON l.lbl_id = lxs.lbl_id
                    JOIN steps_master_stm s ON lxs.stm_id = s.stm_id
                    JOIN phases_master_phm p ON s.phm_id = p.phm_id
                    JOIN sequences_instance_sqi sqi ON p.sqm_id = sqi.sqm_id
                    WHERE sqi.sqi_id = :sequenceInstanceId
                    ORDER BY l.lbl_name
                """, [sequenceInstanceId: sequenceInstanceId] as Map<String, Object>)

                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds labels involved in a specific phase instance.
         * @param phaseInstanceId The UUID of the phase instance.
         * @return A list of labels involved in the phase instance.
         */
        List<Map<String, Object>> findLabelsByPhaseId(UUID phaseInstanceId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def results = (sql as EmbeddedMockSql).rows("""
                    SELECT DISTINCT l.lbl_id, l.lbl_name, l.lbl_description, l.lbl_color
                    FROM labels_lbl l
                    JOIN labels_lbl_x_steps_master_stm lxs ON l.lbl_id = lxs.lbl_id
                    JOIN steps_master_stm s ON lxs.stm_id = s.stm_id
                    JOIN steps_instance_sti sti ON s.stm_id = sti.stm_id
                    JOIN phases_instance_phi phi ON sti.phi_id = phi.phi_id
                    WHERE phi.phi_id = :phaseInstanceId
                    ORDER BY l.lbl_name
                """, [phaseInstanceId: phaseInstanceId] as Map<String, Object>)

                return results.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color
                    ] as Map<String, Object>
                }
            }
        }

        /**
         * Finds all labels with pagination support.
         */
        Map<String, Object> findAllLabelsWithPagination(
            int pageNumber = 1,
            int pageSize = 50,
            String searchTerm = null,
            String sortField = 'lbl_id',
            String sortDirection = 'asc'
        ) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def offset = (pageNumber - 1) * pageSize
                Map<String, Object> params = [:]

                def whereClause = ""
                if (searchTerm?.trim()) {
                    whereClause = "WHERE ..."
                    params.searchTerm = "%${searchTerm.trim()}%"
                }

                // Get total count
                def countQuery = "SELECT COUNT(*) as total FROM labels_lbl l LEFT JOIN migrations_mig m ON l.mig_id = m.mig_id ${whereClause}"
                def totalCount = (sql as EmbeddedMockSql).firstRow(countQuery, params).total as Long

                // Get paginated results
                params.limit = pageSize
                params.offset = offset

                def labels = (sql as EmbeddedMockSql).rows("""
                    SELECT
                        l.lbl_id,
                        l.lbl_name,
                        l.lbl_description,
                        l.lbl_color,
                        l.mig_id,
                        l.created_at,
                        l.created_by,
                        l.updated_at,
                        l.updated_by,
                        m.mig_name,
                        COALESCE(app_counts.app_count, 0)::INTEGER AS application_count,
                        COALESCE(step_counts.step_count, 0)::INTEGER AS step_count
                    FROM labels_lbl l
                    LEFT JOIN migrations_mig m ON l.mig_id = m.mig_id
                    ${whereClause}
                    LIMIT :limit OFFSET :offset
                """, params)

                def items = labels.collect { row ->
                    [
                        id: (row as GroovyRowResult).lbl_id,
                        name: (row as GroovyRowResult).lbl_name,
                        description: (row as GroovyRowResult).lbl_description,
                        color: (row as GroovyRowResult).lbl_color,
                        mig_id: (row as GroovyRowResult).mig_id,
                        mig_name: (row as GroovyRowResult).mig_name,
                        created_at: (row as GroovyRowResult).created_at,
                        created_by: (row as GroovyRowResult).created_by,
                        updated_at: (row as GroovyRowResult).updated_at,
                        updated_by: (row as GroovyRowResult).updated_by,
                        application_count: (row as GroovyRowResult).application_count,
                        step_count: (row as GroovyRowResult).step_count
                    ] as Map<String, Object>
                }

                return [
                    items: items,
                    total: totalCount.intValue(),
                    page: pageNumber,
                    size: pageSize,
                    totalPages: Math.ceil(totalCount.doubleValue() / pageSize) as Integer
                ] as Map<String, Object>
            }
        }

        /**
         * Finds a label by its ID with full details.
         */
        Map<String, Object> findLabelById(int labelId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def label = (sql as EmbeddedMockSql).firstRow("""
                    SELECT
                        l.lbl_id,
                        l.lbl_name,
                        l.lbl_description,
                        l.lbl_color,
                        l.mig_id,
                        l.created_at,
                        l.created_by,
                        l.updated_at,
                        l.updated_by,
                        m.mig_name,
                        u.usr_first_name,
                        u.usr_last_name
                    FROM labels_lbl l
                    LEFT JOIN migrations_mig m ON l.mig_id = m.mig_id
                    LEFT JOIN users_usr u ON l.created_by = u.usr_code
                    WHERE l.lbl_id = :labelId
                """, [labelId: labelId] as Map<String, Object>)

                if (label) {
                    def result = [
                        id: (label as GroovyRowResult).lbl_id,
                        name: (label as GroovyRowResult).lbl_name,
                        description: (label as GroovyRowResult).lbl_description,
                        color: (label as GroovyRowResult).lbl_color,
                        mig_id: (label as GroovyRowResult).mig_id,
                        mig_name: (label as GroovyRowResult).mig_name,
                        created_at: (label as GroovyRowResult).created_at,
                        created_by: (label as GroovyRowResult).created_by,
                        updated_at: (label as GroovyRowResult).updated_at,
                        updated_by: (label as GroovyRowResult).updated_by,
                        created_by_name: (label as GroovyRowResult).usr_first_name ?
                            "${(label as GroovyRowResult).usr_first_name} ${(label as GroovyRowResult).usr_last_name}" : null
                    ] as Map<String, Object>

                    // Get related applications
                    result.applications = (sql as EmbeddedMockSql).rows("""
                        SELECT a.app_id, a.app_code, a.app_name
                        FROM applications_app a
                        JOIN labels_lbl_x_applications_app lxa ON a.app_id = lxa.app_id
                        WHERE lxa.lbl_id = :labelId
                        ORDER BY a.app_code
                    """, [labelId: labelId] as Map<String, Object>).collect { it as Map<String, Object> }

                    // Get related steps count
                    def stepCount = (sql as EmbeddedMockSql).firstRow("""
                        SELECT COUNT(*) as count
                        FROM labels_lbl_x_steps_master_stm
                        WHERE lbl_id = :labelId
                    """, [labelId: labelId] as Map<String, Object>)
                    result.step_count = (stepCount as GroovyRowResult).count

                    return result
                }

                return null
            }
        }

        /**
         * Creates a new label.
         */
        Map<String, Object> createLabel(Map<String, Object> label) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def keys = (sql as EmbeddedMockSql).executeInsert("""
                    INSERT INTO labels_lbl (lbl_name, lbl_description, lbl_color, mig_id, created_by, created_at)
                    VALUES (:lbl_name, :lbl_description, :lbl_color, :mig_id, :created_by, NOW())
                """, label)

                label.lbl_id = keys[0][0]
                return label
            }
        }

        /**
         * Updates an existing label.
         */
        Map<String, Object> updateLabel(int labelId, Map<String, Object> updates) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def setClause = []
                Map<String, Object> params = [lbl_id: labelId] as Map<String, Object>

                if (updates.containsKey('lbl_name')) {
                    setClause.add('lbl_name = :lbl_name')
                    params['lbl_name'] = updates['lbl_name'] as String
                }
                if (updates.containsKey('lbl_description')) {
                    setClause.add('lbl_description = :lbl_description')
                    params['lbl_description'] = updates['lbl_description'] as String
                }
                if (updates.containsKey('lbl_color')) {
                    setClause.add('lbl_color = :lbl_color')
                    params['lbl_color'] = updates['lbl_color'] as String
                }
                if (updates.containsKey('mig_id')) {
                    setClause.add('mig_id = :mig_id')
                    params['mig_id'] = updates['mig_id']
                }

                if (setClause.isEmpty()) {
                    return findLabelById(labelId)
                }

                setClause.add('updated_at = NOW()')
                if (updates.containsKey('updated_by')) {
                    setClause.add('updated_by = :updated_by')
                    params['updated_by'] = updates['updated_by'] as String
                } else {
                    setClause.add('updated_by = :updated_by')
                    params['updated_by'] = 'system' as String
                }

                def query = """
                    UPDATE labels_lbl
                    SET ${setClause.join(', ')}
                    WHERE lbl_id = :lbl_id
                """

                (sql as EmbeddedMockSql).executeUpdate(query, params)

                return findLabelById(labelId)
            }
        }

        /**
         * Deletes a label.
         */
        boolean deleteLabel(int labelId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def rowsAffected = (sql as EmbeddedMockSql).executeUpdate("""
                    DELETE FROM labels_lbl WHERE lbl_id = :labelId
                """, [labelId: labelId] as Map<String, Object>)

                return rowsAffected > 0
            }
        }

        /**
         * Returns all relationships that block deletion of a label.
         */
        Map<String, Object> getLabelBlockingRelationships(int labelId) {
            return EmbeddedDatabaseUtil.withSql { sql ->
                def blocking = [:] as Map<String, Object>

                // Applications
                def applications = (sql as EmbeddedMockSql).rows("""
                    SELECT a.app_id, a.app_code, a.app_name
                    FROM applications_app a
                    JOIN labels_lbl_x_applications_app lxa ON a.app_id = lxa.app_id
                    WHERE lxa.lbl_id = :labelId
                    ORDER BY a.app_code
                """, [labelId: labelId] as Map<String, Object>)

                if (applications) {
                    blocking.applications = applications.collect { it as Map<String, Object> }
                }

                // Steps
                def stepCount = (sql as EmbeddedMockSql).firstRow("""
                    SELECT COUNT(*) as count
                    FROM labels_lbl_x_steps_master_stm
                    WHERE lbl_id = :labelId
                """, [labelId: labelId] as Map<String, Object>)

                if (((stepCount as GroovyRowResult).count as Integer) > 0) {
                    blocking.steps = [count: (stepCount as GroovyRowResult).count as Integer] as Map<String, Object>
                }

                return blocking
            }
        }
    }

    // ============================================
    // TEST EXECUTION
    // ============================================

    static int testCount = 0
    static int passCount = 0
    static List<String> failures = []
    static long startTime = System.currentTimeMillis()

    static void main(String[] args) {
        println "\n" + "="*80
        println "TD-014 Week 2: LabelRepository Comprehensive Test Suite (Repository 3 of 8)"
        println "="*80

        // Test Categories
        testCRUDOperations()
        testSimpleRetrievalAndFieldTransformation()
        testPaginationOperations()
        testHierarchicalFiltering()
        testBlockingRelationshipsAndEdgeCases()

        // Print Results
        printTestSummary()
    }

    // ============================================
    // CATEGORY A: CRUD OPERATIONS (6 tests)
    // ============================================

    static void testCRUDOperations() {
        println "\n📋 Category A: CRUD Operations (6 tests)..."
        EmbeddedLabelRepository repository = new EmbeddedLabelRepository()

        // Test 1: Create label successfully with all fields
        runTest("A1: Create label with all fields") {
            Map<String, Object> labelData = [
                lbl_name: 'Urgent',
                lbl_description: 'Urgent priority tasks',
                lbl_color: '#FF00FF',
                mig_id: UUID.fromString('00000000-0000-0000-0000-000000000001'),
                created_by: 'testuser'
            ] as Map<String, Object>

            Map<String, Object> result = repository.createLabel(labelData)
            assert result.lbl_id == 8 : "Should return new ID"
            assert result.lbl_name == 'Urgent' : "Should have correct name"
        }

        // Test 2: Create label with duplicate name (23505 conflict)
        runTest("A2: Create label with duplicate name") {
            EmbeddedDatabaseUtil.resetMockSql()
            EmbeddedMockSql mockSql = EmbeddedDatabaseUtil.getMockSql()

            try {
                mockSql.setError(true, "duplicate key value violates unique constraint", "23505")

                Map<String, Object> labelData = [
                    lbl_name: 'Critical',
                    lbl_description: 'Duplicate',
                    lbl_color: '#FF0000',
                    created_by: 'testuser'
                ] as Map<String, Object>

                repository.createLabel(labelData)
                assert false : "Should throw SQLException"
            } catch (SQLException e) {
                assert e.message.contains('duplicate key') : "Should indicate duplicate"
                assert e.getSQLState() == '23505' : "Should be unique constraint violation"
            } finally {
                mockSql.setError(false)
                EmbeddedDatabaseUtil.resetMockSql()
            }
        }

        // Test 3: Find label by ID (found)
        runTest("A3: Find label by ID - found") {
            Map<String, Object> label = repository.findLabelById(1)

            // CRITICAL: Field name transformation validation
            assert label != null : "Should find label"
            assert label.id == 1 : "Should have transformed id (not lbl_id)"
            assert label.name == 'Critical' : "Should have transformed name (not lbl_name)"
            assert label.description == 'Critical priority' : "Should have transformed description"
            assert label.color == '#FF0000' : "Should have transformed color"
            assert !label.containsKey('lbl_id') : "Database field lbl_id must NOT exist in result"
            assert !label.containsKey('lbl_name') : "Database field lbl_name must NOT exist in result"
            assert !label.containsKey('lbl_description') : "Database field lbl_description must NOT exist in result"
            assert !label.containsKey('lbl_color') : "Database field lbl_color must NOT exist in result"
        }

        // Test 4: Find label by ID (not found)
        runTest("A4: Find label by ID - not found") {
            Map<String, Object> label = repository.findLabelById(999)
            assert label == null : "Should return null for non-existent label"
        }

        // Test 5: Update label with partial fields (dynamic updates)
        runTest("A5: Update label with partial fields") {
            Map<String, Object> updates = [lbl_name: 'Super Critical'] as Map<String, Object>
            Map<String, Object> updated = repository.updateLabel(1, updates)

            // CRITICAL: Field transformation and partial update validation
            assert updated.name == 'Super Critical' : "Should have updated name"
            assert updated.description == 'Critical priority' : "Description should be unchanged"
            assert updated.color == '#FF0000' : "Color should be unchanged"
            assert !updated.containsKey('lbl_name') : "Database field must NOT exist in result"
        }

        // Test 6: Delete label successfully
        runTest("A6: Delete label without relationships") {
            boolean deleted = repository.deleteLabel(7) // Orphan label with no relationships
            assert deleted == true : "Should delete successfully"
        }
    }

    // ============================================
    // CATEGORY B: SIMPLE RETRIEVAL & FIELD TRANSFORMATION (3 tests)
    // ============================================

    static void testSimpleRetrievalAndFieldTransformation() {
        println "\n🔍 Category B: Simple Retrieval & Field Transformation (3 tests)..."
        EmbeddedLabelRepository repository = new EmbeddedLabelRepository()

        // Test 7: Find all labels with field transformation validation
        runTest("B1: Find all labels with field transformation") {
            List<Map<String, Object>> labels = repository.findAllLabels()

            assert labels != null : "Should return labels"
            assert labels.size() == 7 : "Should find 7 labels"

            // CRITICAL: Validate field transformation for each label
            labels.each { label ->
                assert label.containsKey('id') : "Should have id field"
                assert label.containsKey('name') : "Should have name field"
                assert label.containsKey('description') : "Should have description field"
                assert label.containsKey('color') : "Should have color field"
                assert !label.containsKey('lbl_id') : "Should NOT have lbl_id field"
                assert !label.containsKey('lbl_name') : "Should NOT have lbl_name field"
                assert !label.containsKey('lbl_description') : "Should NOT have lbl_description field"
                assert !label.containsKey('lbl_color') : "Should NOT have lbl_color field"
            }
        }

        // Test 8: Get label blocking relationships with applications
        runTest("B2: Get blocking relationships - applications") {
            Map<String, Object> blocking = repository.getLabelBlockingRelationships(1)

            assert blocking.applications != null : "Should have application relationships"
            assert (blocking.applications as List).size() == 2 : "Should have 2 application relationships"
        }

        // Test 9: Get label blocking relationships with steps
        runTest("B3: Get blocking relationships - steps") {
            Map<String, Object> blocking = repository.getLabelBlockingRelationships(1)

            assert blocking.steps != null : "Should have step relationships"
            assert (blocking.steps as Map<String, Object>).count == 2 : "Should have 2 step relationships"
        }
    }

    // ============================================
    // CATEGORY C: PAGINATION OPERATIONS (6 tests)
    // ============================================

    static void testPaginationOperations() {
        println "\n📄 Category C: Pagination Operations (6 tests)..."
        EmbeddedLabelRepository repository = new EmbeddedLabelRepository()

        // Test 10: Pagination with default parameters
        runTest("C1: Pagination with default parameters") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(1, 5)

            assert result.total == 7 : "Should have correct total count"
            assert (result.items as List).size() == 5 : "Should return 5 items"
            assert result.page == 1 : "Should be page 1"
            assert result.size == 5 : "Should have page size 5"
            assert result.totalPages == 2 : "Should have 2 total pages"

            // CRITICAL: Field transformation validation in pagination
            def firstItem = (result.items as List)[0] as Map<String, Object>
            assert firstItem.containsKey('id') : "Should have id field"
            assert firstItem.containsKey('name') : "Should have name field"
            assert !firstItem.containsKey('lbl_id') : "Should NOT have lbl_id field"
        }

        // Test 11: Pagination with search filter
        runTest("C2: Pagination with search filter") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(1, 50, 'Critical')

            assert (result.items as List).size() >= 1 : "Should find matching labels"
            def item = (result.items as List).find {
                ((it as Map<String, Object>).name as String).contains('Critical')
            }
            assert item != null : "Should find Critical label"
        }

        // Test 12: Pagination with sorting (name ASC)
        runTest("C3: Pagination with sorting - name ASC") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(1, 50, null, 'lbl_name', 'asc')

            assert (result.items as List).size() > 0 : "Should return items"
            // Sorting validation would require checking order, but MockSql doesn't implement full sorting
        }

        // Test 13: Pagination with computed columns
        runTest("C4: Pagination with computed columns") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(1, 50)

            def labelWithCounts = (result.items as List).find {
                (it as Map<String, Object>).id == 1
            } as Map<String, Object>

            // CRITICAL: Computed counts validation
            assert labelWithCounts.application_count == 2 : "Should have correct application count"
            assert labelWithCounts.step_count == 2 : "Should have correct step count"
        }

        // Test 14: Pagination edge cases (page beyond results)
        runTest("C5: Pagination edge case - page beyond results") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(10, 50)

            assert (result.items as List).size() == 0 : "Should return empty list"
            assert result.total == 7 : "Total count should still be correct"
        }

        // Test 15: Empty results pagination
        runTest("C6: Empty results pagination") {
            Map<String, Object> result = repository.findAllLabelsWithPagination(1, 50, 'NonExistentLabel')

            assert result.total == 0 : "Should have zero total"
            assert (result.items as List).isEmpty() : "Should return empty items"
        }
    }

    // ============================================
    // CATEGORY D: HIERARCHICAL FILTERING (5 tests)
    // ============================================

    static void testHierarchicalFiltering() {
        println "\n🔗 Category D: Hierarchical Filtering (5 tests - UUID-based)..."
        EmbeddedLabelRepository repository = new EmbeddedLabelRepository()

        // Test 16: Find labels by migration ID (UUID parameter)
        runTest("D1: Find labels by migration ID") {
            UUID migrationId = UUID.fromString('00000000-0000-0000-0000-000000000001')
            List<Map<String, Object>> labels = repository.findLabelsByMigrationId(migrationId)

            assert labels != null : "Should return labels"
            assert labels.size() >= 1 : "Should find labels for migration"

            // CRITICAL: Field transformation validation
            labels.each { label ->
                assert !label.containsKey('lbl_id') : "Should NOT have database field"
                assert label.containsKey('id') : "Should have transformed field"
            }
        }

        // Test 17: Find labels by iteration ID (UUID parameter)
        runTest("D2: Find labels by iteration ID") {
            UUID iterationId = UUID.fromString('10000000-0000-0000-0000-000000000001')
            List<Map<String, Object>> labels = repository.findLabelsByIterationId(iterationId)

            assert labels != null : "Should return labels"
            assert labels.size() >= 1 : "Should find labels for iteration"

            // Field transformation validation
            labels.each { label ->
                assert label.containsKey('name') : "Should have transformed name field"
            }
        }

        // Test 18: Find labels by plan ID (UUID parameter)
        runTest("D3: Find labels by plan ID") {
            UUID planId = UUID.fromString('20000000-0000-0000-0000-000000000001')
            List<Map<String, Object>> labels = repository.findLabelsByPlanId(planId)

            assert labels != null : "Should return labels"
            // Join chain validation through hierarchy
        }

        // Test 19: Find labels by sequence ID (UUID parameter)
        runTest("D4: Find labels by sequence ID") {
            UUID sequenceId = UUID.fromString('30000000-0000-0000-0000-000000000001')
            List<Map<String, Object>> labels = repository.findLabelsBySequenceId(sequenceId)

            assert labels != null : "Should return labels"
        }

        // Test 20: Find labels by phase ID (UUID parameter, complex join chain)
        runTest("D5: Find labels by phase ID - complex join chain") {
            UUID phaseId = UUID.fromString('40000000-0000-0000-0000-000000000001')
            List<Map<String, Object>> labels = repository.findLabelsByPhaseId(phaseId)

            // CRITICAL: Complex join chain validation (phi → sti → stm → labels)
            assert labels != null : "Should return labels"
            assert labels.size() >= 1 : "Should find labels through complex join chain"

            // Validate field transformation
            labels.each { label ->
                assert label.containsKey('id') : "Should have id field"
                assert !label.containsKey('lbl_id') : "Should NOT have lbl_id field"
            }
        }
    }

    // ============================================
    // CATEGORY E: BLOCKING RELATIONSHIPS & EDGE CASES (4 tests)
    // ============================================

    static void testBlockingRelationshipsAndEdgeCases() {
        println "\n⚠️ Category E: Blocking Relationships & Edge Cases (4 tests)..."
        EmbeddedLabelRepository repository = new EmbeddedLabelRepository()

        // Test 21: Label with no relationships (can delete)
        runTest("E1: Delete label with no relationships") {
            boolean deleted = repository.deleteLabel(7) // Orphan label
            assert deleted == true : "Should delete orphan label successfully"
        }

        // Test 22: Label with applications (cannot delete)
        runTest("E2: Delete label with applications - FK violation") {
            EmbeddedDatabaseUtil.resetMockSql()

            try {
                repository.deleteLabel(1) // Has applications
                assert false : "Should throw SQLException for FK violation"
            } catch (SQLException e) {
                assert e.getSQLState() == '23503' : "Should be FK violation (23503)"
                assert e.message.contains('foreign key') : "Should indicate FK constraint"
            }
        }

        // Test 23: Label with steps (cannot delete)
        runTest("E3: Delete label with steps - FK violation") {
            EmbeddedDatabaseUtil.resetMockSql()

            try {
                repository.deleteLabel(1) // Has steps
                assert false : "Should throw SQLException for FK violation"
            } catch (SQLException e) {
                assert e.getSQLState() == '23503' : "Should be FK violation"
            }
        }

        // Test 24: Null field handling and edge cases
        runTest("E4: Null field handling") {
            Map<String, Object> label = repository.findLabelById(5) // Legacy label with null description

            assert label != null : "Should find label"
            assert label.description == null : "Should handle null description"
            assert label.name == 'Legacy' : "Should still have name"
            assert label.mig_id == null : "Should handle null migration ID"
        }
    }

    // ============================================
    // TEST UTILITIES
    // ============================================

    static void runTest(String testName, Closure test) {
        testCount++
        try {
            test.call()
            passCount++
            println "  ✅ ${testName}"
        } catch (AssertionError e) {
            failures.add("${testName}: ${e.message}" as String)
            println "  ❌ ${testName}: ${e.message}"
        } catch (Exception e) {
            failures.add("${testName}: Unexpected error - ${e.message}" as String)
            println "  ❌ ${testName}: Unexpected error - ${e.message}"
        }
    }

    static void printTestSummary() {
        long duration = System.currentTimeMillis() - startTime

        println "\n" + "="*80
        println "TEST EXECUTION SUMMARY - LabelRepository (Repository 3 of 8)"
        println "="*80
        println "Total Tests: ${testCount}"
        println "Passed: ${passCount}"
        println "Failed: ${failures.size()}"
        println "Success Rate: ${testCount > 0 ? (passCount * 100 / testCount) : 0}%"
        println "Execution Time: ${duration}ms"

        if (!failures.isEmpty()) {
            println "\n❌ FAILURES:"
            failures.each { println "  - ${it}" }
        } else {
            println "\n🎉 ALL 24 TESTS PASSED! TD-014 Week 2 LabelRepository coverage complete. 🚀"
        }

        println "\n📊 Performance Metrics:"
        println "  - Average test time: ${testCount > 0 ? duration / testCount : 0}ms"
        println "  - Tests per second: ${duration > 0 ? (testCount * 1000 / duration) : 0}"

        println "\n✨ Coverage Summary:"
        println "  ✓ Category A: CRUD Operations (6 tests)"
        println "  ✓ Category B: Simple Retrieval & Field Transformation (3 tests)"
        println "  ✓ Category C: Pagination Operations (6 tests)"
        println "  ✓ Category D: Hierarchical Filtering - UUID-based (5 tests)"
        println "  ✓ Category E: Blocking Relationships & Edge Cases (4 tests)"

        println "\n🎯 Critical Validations Covered:"
        println "  ✓ Field name transformation (lbl_id → id, lbl_name → name, etc.)"
        println "  ✓ UUID parameter handling for all 5 hierarchical methods"
        println "  ✓ Dynamic partial update testing with field validation"
        println "  ✓ Computed counts validation in pagination"
        println "  ✓ Complex join chain validation (findLabelsByPhaseId)"
        println "  ✓ Blocking relationships prevent deletion (23503 FK violation)"

        println "\n📈 Method Coverage: 12/12 methods (100%)"
        println "  ✓ findAllLabels()"
        println "  ✓ findLabelsByMigrationId(UUID)"
        println "  ✓ findLabelsByIterationId(UUID)"
        println "  ✓ findLabelsByPlanId(UUID)"
        println "  ✓ findLabelsBySequenceId(UUID)"
        println "  ✓ findLabelsByPhaseId(UUID)"
        println "  ✓ findAllLabelsWithPagination(...)"
        println "  ✓ findLabelById(int)"
        println "  ✓ createLabel(Map)"
        println "  ✓ updateLabel(int, Map)"
        println "  ✓ deleteLabel(int)"
        println "  ✓ getLabelBlockingRelationships(int)"

        println "="*80
    }
}
