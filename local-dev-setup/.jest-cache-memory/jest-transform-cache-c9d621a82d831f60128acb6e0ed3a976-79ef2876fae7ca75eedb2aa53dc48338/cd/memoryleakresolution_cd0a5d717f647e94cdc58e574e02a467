b7ed44c1ee254dfa0c628b3ab4f36a36
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MemoryLeakResolver = void 0;
exports.enhancedAfterEach = enhancedAfterEach;
exports.memoryLeakResolver = void 0;
exports.memoryOptimizedBeforeEach = memoryOptimizedBeforeEach;
class MemoryLeakResolver {
  constructor() {
    this.activeTimers = new Set();
    this.activeIntervals = new Set();
    this.activeEventListeners = new Map();
    this.activeDOMObservers = new Set();
    this.activeFetchRequests = new Set();
    this.memorySnapshots = [];
  }
  cleanupAccessibilityTester(testerInstance) {
    if (!testerInstance) return;
    try {
      if (testerInstance.violations) {
        testerInstance.violations.length = 0;
        testerInstance.violations = null;
      }
      if (testerInstance.document) {
        testerInstance.document = null;
      }
      if (testerInstance._cachedElements) {
        testerInstance._cachedElements.clear();
        testerInstance._cachedElements = null;
      }
      Object.keys(testerInstance).forEach(key => {
        testerInstance[key] = null;
      });
    } catch (error) {
      console.warn('Non-critical cleanup warning for AccessibilityTester:', error.message);
    }
  }
  cleanupDOMEnvironment(container, document) {
    if (!container || !document) return;
    try {
      const allElements = container.querySelectorAll('*');
      allElements.forEach(element => {
        const newElement = element.cloneNode(true);
        if (element.parentNode) {
          element.parentNode.replaceChild(newElement, element);
        }
      });
      container.innerHTML = '';
      if (container.dataset) {
        Object.keys(container.dataset).forEach(key => {
          delete container.dataset[key];
        });
      }
      if (typeof window !== 'undefined') {
        ['teamsManager', 'accessibilityTester', 'teamBuilder'].forEach(prop => {
          if (window[prop]) {
            window[prop] = null;
            delete window[prop];
          }
        });
      }
    } catch (error) {
      console.warn('Non-critical DOM cleanup warning:', error.message);
    }
  }
  cleanupTeamsManager(managerInstance) {
    if (!managerInstance) return;
    try {
      if (typeof managerInstance.destroy === 'function') {
        managerInstance.destroy();
      }
      if (managerInstance.cache) {
        if (managerInstance.cache.clear) {
          managerInstance.cache.clear();
        } else {
          managerInstance.cache = null;
        }
      }
      if (managerInstance.networkMetrics) {
        Object.keys(managerInstance.networkMetrics).forEach(key => {
          managerInstance.networkMetrics[key] = 0;
        });
        managerInstance.networkMetrics = null;
      }
      if (managerInstance.retryConfig) {
        managerInstance.retryConfig = null;
      }
      if (managerInstance.errorRecoveryCallbacks) {
        if (managerInstance.errorRecoveryCallbacks.clear) {
          managerInstance.errorRecoveryCallbacks.clear();
        }
        managerInstance.errorRecoveryCallbacks = null;
      }
      if (managerInstance._pendingOperations) {
        managerInstance._pendingOperations.clear();
        managerInstance._pendingOperations = null;
      }
      Object.keys(managerInstance).forEach(key => {
        if (typeof managerInstance[key] !== 'function') {
          managerInstance[key] = null;
        }
      });
    } catch (error) {
      console.warn('Non-critical TeamsManager cleanup warning:', error.message);
    }
  }
  cleanupTimersAndIntervals() {
    try {
      jest.clearAllTimers();
      jest.clearAllMocks();
      this.activeTimers.forEach(timerId => {
        try {
          clearTimeout(timerId);
        } catch (e) {}
      });
      this.activeTimers.clear();
      this.activeIntervals.forEach(intervalId => {
        try {
          clearInterval(intervalId);
        } catch (e) {}
      });
      this.activeIntervals.clear();
      const highestTimeoutId = setTimeout(() => {}, 0);
      for (let i = highestTimeoutId; i > 0; i--) {
        try {
          clearTimeout(i);
          clearInterval(i);
        } catch (e) {}
      }
    } catch (error) {
      console.warn('Non-critical timer cleanup warning:', error.message);
    }
  }
  forceGarbageCollection() {
    try {
      if (global.gc) {
        global.gc();
      }
      if (typeof jest !== 'undefined' && jest.resetModules) {
        jest.resetModules();
      }
      ['global.teamsManager', 'global.accessibilityTester', 'global.teamBuilder'].forEach(path => {
        const parts = path.split('.');
        let obj = global;
        for (let i = 1; i < parts.length - 1; i++) {
          obj = obj[parts[i]];
          if (!obj) break;
        }
        if (obj && parts.length > 1) {
          obj[parts[parts.length - 1]] = null;
          delete obj[parts[parts.length - 1]];
        }
      });
    } catch (error) {
      console.warn('Non-critical garbage collection warning:', error.message);
    }
  }
  performComprehensiveCleanup(context = {}) {
    const {
      container,
      document,
      teamsManager,
      accessibilityTester,
      teamBuilder
    } = context;
    try {
      this.cleanupAccessibilityTester(accessibilityTester);
      this.cleanupTeamsManager(teamsManager);
      if (teamBuilder) {
        if (typeof teamBuilder.destroy === 'function') {
          teamBuilder.destroy();
        }
        if (teamBuilder._cachedTeams) {
          teamBuilder._cachedTeams.clear();
          teamBuilder._cachedTeams = null;
        }
      }
      this.cleanupDOMEnvironment(container, document);
      this.cleanupTimersAndIntervals();
      this.forceGarbageCollection();
      this.takeMemorySnapshot();
    } catch (error) {
      console.error('Error during comprehensive cleanup:', error);
      this.forceGarbageCollection();
    }
  }
  takeMemorySnapshot() {
    try {
      if (process.memoryUsage) {
        const usage = process.memoryUsage();
        const snapshot = {
          timestamp: Date.now(),
          heapUsed: usage.heapUsed,
          heapTotal: usage.heapTotal,
          external: usage.external,
          rss: usage.rss
        };
        this.memorySnapshots.push(snapshot);
        if (this.memorySnapshots.length > 10) {
          this.memorySnapshots.shift();
        }
        const memoryUsageMB = usage.heapUsed / 1024 / 1024;
        if (memoryUsageMB > 400) {
          console.warn(`⚠️ Memory usage approaching limit: ${memoryUsageMB.toFixed(1)}MB / 512MB`);
        }
        return snapshot;
      }
    } catch (error) {
      console.warn('Memory monitoring error:', error.message);
    }
    return null;
  }
  getMemoryStatistics() {
    if (this.memorySnapshots.length === 0) return null;
    const latest = this.memorySnapshots[this.memorySnapshots.length - 1];
    const oldest = this.memorySnapshots[0];
    return {
      current: {
        heapUsedMB: (latest.heapUsed / 1024 / 1024).toFixed(1),
        heapTotalMB: (latest.heapTotal / 1024 / 1024).toFixed(1),
        externalMB: (latest.external / 1024 / 1024).toFixed(1)
      },
      trend: this.memorySnapshots.length > 1 ? {
        heapGrowthMB: ((latest.heapUsed - oldest.heapUsed) / 1024 / 1024).toFixed(1),
        duration: latest.timestamp - oldest.timestamp
      } : null,
      compliance: {
        isWithinLimit: latest.heapUsed < 512 * 1024 * 1024,
        utilizationPercent: (latest.heapUsed / (512 * 1024 * 1024) * 100).toFixed(1)
      }
    };
  }
}
exports.MemoryLeakResolver = MemoryLeakResolver;
const memoryLeakResolver = exports.memoryLeakResolver = new MemoryLeakResolver();
function enhancedAfterEach(context) {
  return () => {
    memoryLeakResolver.performComprehensiveCleanup(context);
  };
}
function memoryOptimizedBeforeEach() {
  return () => {
    memoryLeakResolver.takeMemorySnapshot();
    memoryLeakResolver.forceGarbageCollection();
    jest.clearAllMocks();
    jest.clearAllTimers();
  };
}
var _default = exports.default = MemoryLeakResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,