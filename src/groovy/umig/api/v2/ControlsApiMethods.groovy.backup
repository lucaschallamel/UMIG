/**
 * Additional methods for ControlsApi.groovy to support Admin GUI functionality.
 * These methods should be copied and pasted into the main ControlsApi.groovy file.
 */

/**
 * Handles GET requests for master controls with Admin GUI support.
 * Provides filtering, pagination, sorting, and computed fields.
 * @param queryParams Query parameters from the request
 * @return Response with paginated and filtered master controls data
 */
private Response handleMasterControlsRequest(MultivaluedMap queryParams) {
    try {
        def filters = [:]
        def pageNumber = 1
        def pageSize = 50
        def sortField = null
        def sortDirection = 'asc'

        // Extract query parameters
        queryParams.keySet().each { param ->
            def value = queryParams.getFirst(param)
            switch (param) {
                case 'page':
                    pageNumber = Integer.parseInt(value)
                    break
                case 'size':
                    pageSize = Integer.parseInt(value)
                    break
                case 'sort':
                    sortField = value
                    break
                case 'direction':
                    sortDirection = value
                    break
                default:
                    filters[param] = value
            }
        }

        // Validate sort field
        def allowedSortFields = ['ctm_id', 'ctm_name', 'ctm_description', 'ctm_type', 'ctm_is_critical', 'ctm_order', 'created_at', 'updated_at', 'instance_count', 'validation_count']
        if (sortField && !allowedSortFields.contains(sortField)) {
            return Response.status(Response.Status.BAD_REQUEST)
                .entity(new JsonBuilder([error: "Invalid sort field: ${sortField}. Allowed fields: ${allowedSortFields.join(', ')}", code: 400]).toString())
                .build()
        }

        def result = controlRepository.findMasterControlsWithFilters(filters, pageNumber, pageSize, sortField, sortDirection)
        return Response.ok(new JsonBuilder(result).toString()).build()
    } catch (SQLException e) {
        def statusCode = mapSqlStateToHttpStatus(e.getSQLState())
        return Response.status(statusCode)
            .entity(new JsonBuilder([error: e.message, code: statusCode]).toString())
            .build()
    } catch (Exception e) {
        return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
            .entity(new JsonBuilder([error: "Internal server error", code: 500]).toString())
            .build()
    }
}

/**
 * Maps SQL state codes to appropriate HTTP status codes
 */
private static int mapSqlStateToHttpStatus(String sqlState) {
    switch (sqlState) {
        case '23503': return 400 // Foreign key violation
        case '23505': return 409 // Unique violation
        case '23514': return 400 // Check constraint violation
        default: return 500     // General server error
    }
}